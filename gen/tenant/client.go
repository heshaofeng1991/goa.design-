// Code generated by goa v3.6.2, DO NOT EDIT.
//
// tenant client
//
// Command:
// $ goa gen goa/design -o ./

package tenant

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "tenant" service client.
type Client struct {
	IntegrationsEndpoint     goa.Endpoint
	GetTenantInfoEndpoint    goa.Endpoint
	UpdateTenantInfoEndpoint goa.Endpoint
}

// NewClient initializes a "tenant" service client given the endpoints.
func NewClient(integrations, getTenantInfo, updateTenantInfo goa.Endpoint) *Client {
	return &Client{
		IntegrationsEndpoint:     integrations,
		GetTenantInfoEndpoint:    getTenantInfo,
		UpdateTenantInfoEndpoint: updateTenantInfo,
	}
}

// Integrations calls the "integrations" endpoint of the "tenant" service.
func (c *Client) Integrations(ctx context.Context, p *AuthToken) (res *TenantIntegrations, err error) {
	var ires interface{}
	ires, err = c.IntegrationsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TenantIntegrations), nil
}

// GetTenantInfo calls the "get_tenant_info" endpoint of the "tenant" service.
func (c *Client) GetTenantInfo(ctx context.Context, p *AuthToken) (res *TenantRsp, err error) {
	var ires interface{}
	ires, err = c.GetTenantInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TenantRsp), nil
}

// UpdateTenantInfo calls the "update_tenant_info" endpoint of the "tenant"
// service.
func (c *Client) UpdateTenantInfo(ctx context.Context, p *TenantInfo) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UpdateTenantInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}
