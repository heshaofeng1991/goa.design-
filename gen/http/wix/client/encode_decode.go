// Code generated by goa v3.6.2, DO NOT EDIT.
//
// wix HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	wix "goa/gen/wix"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildCallbackWixRequest instantiates a HTTP request object with method and
// path set to call the "wix" service "callback_wix" endpoint
func (c *Client) BuildCallbackWixRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackWixWixPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("wix", "callback_wix", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackWixRequest returns an encoder for requests sent to the wix
// callback_wix server.
func EncodeCallbackWixRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*wix.WixCallbackArgs)
		if !ok {
			return goahttp.ErrInvalidType("wix", "callback_wix", "*wix.WixCallbackArgs", v)
		}
		values := req.URL.Query()
		values.Add("code", p.Code)
		if p.State != nil {
			values.Add("state", *p.State)
		}
		values.Add("instanceId", p.InstanceID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCallbackWixResponse returns a decoder for responses returned by the
// wix callback_wix endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCallbackWixResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCallbackWixResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CallbackWixResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "callback_wix", err)
			}
			err = ValidateCallbackWixResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "callback_wix", err)
			}
			res := NewCallbackWixWixCallbackRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CallbackWixUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "callback_wix", err)
			}
			err = ValidateCallbackWixUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "callback_wix", err)
			}
			return nil, NewCallbackWixUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("wix", "callback_wix", resp.StatusCode, string(body))
		}
	}
}

// BuildWebhooksProductsWixRequest instantiates a HTTP request object with
// method and path set to call the "wix" service "webhooks_products_wix"
// endpoint
func (c *Client) BuildWebhooksProductsWixRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WebhooksProductsWixWixPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("wix", "webhooks_products_wix", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeWebhooksProductsWixRequest returns an encoder for requests sent to the
// wix webhooks_products_wix server.
func EncodeWebhooksProductsWixRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*wix.WebHooksCallBackProducts)
		if !ok {
			return goahttp.ErrInvalidType("wix", "webhooks_products_wix", "*wix.WebHooksCallBackProducts", v)
		}
		body := NewWebhooksProductsWixRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("wix", "webhooks_products_wix", err)
		}
		return nil
	}
}

// DecodeWebhooksProductsWixResponse returns a decoder for responses returned
// by the wix webhooks_products_wix endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeWebhooksProductsWixResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeWebhooksProductsWixResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WebhooksProductsWixResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "webhooks_products_wix", err)
			}
			err = ValidateWebhooksProductsWixResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "webhooks_products_wix", err)
			}
			res := NewWebhooksProductsWixWebHooksCallBackProductsRespOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body WebhooksProductsWixUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "webhooks_products_wix", err)
			}
			err = ValidateWebhooksProductsWixUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "webhooks_products_wix", err)
			}
			return nil, NewWebhooksProductsWixUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("wix", "webhooks_products_wix", resp.StatusCode, string(body))
		}
	}
}

// BuildProductsListRequest instantiates a HTTP request object with method and
// path set to call the "wix" service "products_list" endpoint
func (c *Client) BuildProductsListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProductsListWixPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("wix", "products_list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProductsListRequest returns an encoder for requests sent to the wix
// products_list server.
func EncodeProductsListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*wix.GetProductsListReq)
		if !ok {
			return goahttp.ErrInvalidType("wix", "products_list", "*wix.GetProductsListReq", v)
		}
		body := NewProductsListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("wix", "products_list", err)
		}
		return nil
	}
}

// DecodeProductsListResponse returns a decoder for responses returned by the
// wix products_list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeProductsListResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeProductsListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ProductsListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "products_list", err)
			}
			err = ValidateProductsListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "products_list", err)
			}
			res := NewProductsListGetProductsListRespOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ProductsListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "products_list", err)
			}
			err = ValidateProductsListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "products_list", err)
			}
			return nil, NewProductsListUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("wix", "products_list", resp.StatusCode, string(body))
		}
	}
}

// BuildOrdersListRequest instantiates a HTTP request object with method and
// path set to call the "wix" service "orders_list" endpoint
func (c *Client) BuildOrdersListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OrdersListWixPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("wix", "orders_list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeOrdersListRequest returns an encoder for requests sent to the wix
// orders_list server.
func EncodeOrdersListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*wix.GetOrdersListReq)
		if !ok {
			return goahttp.ErrInvalidType("wix", "orders_list", "*wix.GetOrdersListReq", v)
		}
		body := NewOrdersListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("wix", "orders_list", err)
		}
		return nil
	}
}

// DecodeOrdersListResponse returns a decoder for responses returned by the wix
// orders_list endpoint. restoreBody controls whether the response body should
// be restored after having been read.
// DecodeOrdersListResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeOrdersListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OrdersListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "orders_list", err)
			}
			err = ValidateOrdersListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "orders_list", err)
			}
			res := NewOrdersListGetOrdersListRespOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body OrdersListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("wix", "orders_list", err)
			}
			err = ValidateOrdersListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("wix", "orders_list", err)
			}
			return nil, NewOrdersListUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("wix", "orders_list", resp.StatusCode, string(body))
		}
	}
}
