// Code generated by goa v3.6.2, DO NOT EDIT.
//
// wix HTTP server
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	wix "goa/gen/wix"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the wix service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	CallbackWix         http.Handler
	WebhooksProductsWix http.Handler
	ProductsList        http.Handler
	OrdersList          http.Handler
	CORS                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the wix service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *wix.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CallbackWix", "GET", "/v1/integrations/wix/callback"},
			{"WebhooksProductsWix", "POST", "/v1/integrations/wix/webhooks/products"},
			{"ProductsList", "POST", "/v1/integrations/wix/products"},
			{"OrdersList", "POST", "/v1/integrations/wix/orders"},
			{"CORS", "OPTIONS", "/v1/integrations/wix/callback"},
			{"CORS", "OPTIONS", "/v1/integrations/wix/webhooks/products"},
			{"CORS", "OPTIONS", "/v1/integrations/wix/products"},
			{"CORS", "OPTIONS", "/v1/integrations/wix/orders"},
		},
		CallbackWix:         NewCallbackWixHandler(e.CallbackWix, mux, decoder, encoder, errhandler, formatter),
		WebhooksProductsWix: NewWebhooksProductsWixHandler(e.WebhooksProductsWix, mux, decoder, encoder, errhandler, formatter),
		ProductsList:        NewProductsListHandler(e.ProductsList, mux, decoder, encoder, errhandler, formatter),
		OrdersList:          NewOrdersListHandler(e.OrdersList, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "wix" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CallbackWix = m(s.CallbackWix)
	s.WebhooksProductsWix = m(s.WebhooksProductsWix)
	s.ProductsList = m(s.ProductsList)
	s.OrdersList = m(s.OrdersList)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the wix endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCallbackWixHandler(mux, h.CallbackWix)
	MountWebhooksProductsWixHandler(mux, h.WebhooksProductsWix)
	MountProductsListHandler(mux, h.ProductsList)
	MountOrdersListHandler(mux, h.OrdersList)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the wix endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCallbackWixHandler configures the mux to serve the "wix" service
// "callback_wix" endpoint.
func MountCallbackWixHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWixOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/integrations/wix/callback", f)
}

// NewCallbackWixHandler creates a HTTP handler which loads the HTTP request
// and calls the "wix" service "callback_wix" endpoint.
func NewCallbackWixHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCallbackWixRequest(mux, decoder)
		encodeResponse = EncodeCallbackWixResponse(encoder)
		encodeError    = EncodeCallbackWixError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "callback_wix")
		ctx = context.WithValue(ctx, goa.ServiceKey, "wix")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountWebhooksProductsWixHandler configures the mux to serve the "wix"
// service "webhooks_products_wix" endpoint.
func MountWebhooksProductsWixHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWixOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/integrations/wix/webhooks/products", f)
}

// NewWebhooksProductsWixHandler creates a HTTP handler which loads the HTTP
// request and calls the "wix" service "webhooks_products_wix" endpoint.
func NewWebhooksProductsWixHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeWebhooksProductsWixRequest(mux, decoder)
		encodeResponse = EncodeWebhooksProductsWixResponse(encoder)
		encodeError    = EncodeWebhooksProductsWixError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "webhooks_products_wix")
		ctx = context.WithValue(ctx, goa.ServiceKey, "wix")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountProductsListHandler configures the mux to serve the "wix" service
// "products_list" endpoint.
func MountProductsListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWixOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/integrations/wix/products", f)
}

// NewProductsListHandler creates a HTTP handler which loads the HTTP request
// and calls the "wix" service "products_list" endpoint.
func NewProductsListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeProductsListRequest(mux, decoder)
		encodeResponse = EncodeProductsListResponse(encoder)
		encodeError    = EncodeProductsListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "products_list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "wix")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountOrdersListHandler configures the mux to serve the "wix" service
// "orders_list" endpoint.
func MountOrdersListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWixOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/integrations/wix/orders", f)
}

// NewOrdersListHandler creates a HTTP handler which loads the HTTP request and
// calls the "wix" service "orders_list" endpoint.
func NewOrdersListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeOrdersListRequest(mux, decoder)
		encodeResponse = EncodeOrdersListResponse(encoder)
		encodeError    = EncodeOrdersListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "orders_list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "wix")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service wix.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleWixOrigin(h)
	mux.Handle("OPTIONS", "/v1/integrations/wix/callback", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/wix/webhooks/products", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/wix/products", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/wix/orders", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleWixOrigin applies the CORS response headers corresponding to the
// origin for the service wix.
func HandleWixOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, Accept, Origin, Authorization, X-Api-Version, x-nss-tenant-id")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
