// Code generated by goa v3.6.2, DO NOT EDIT.
//
// tenant client HTTP transport
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the tenant service endpoint HTTP clients.
type Client struct {
	// Integrations Doer is the HTTP client used to make requests to the
	// integrations endpoint.
	IntegrationsDoer goahttp.Doer

	// GetTenantInfo Doer is the HTTP client used to make requests to the
	// get_tenant_info endpoint.
	GetTenantInfoDoer goahttp.Doer

	// UpdateTenantInfo Doer is the HTTP client used to make requests to the
	// update_tenant_info endpoint.
	UpdateTenantInfoDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the tenant service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		IntegrationsDoer:     doer,
		GetTenantInfoDoer:    doer,
		UpdateTenantInfoDoer: doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// Integrations returns an endpoint that makes HTTP requests to the tenant
// service integrations server.
func (c *Client) Integrations() goa.Endpoint {
	var (
		encodeRequest  = EncodeIntegrationsRequest(c.encoder)
		decodeResponse = DecodeIntegrationsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIntegrationsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IntegrationsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tenant", "integrations", err)
		}
		return decodeResponse(resp)
	}
}

// GetTenantInfo returns an endpoint that makes HTTP requests to the tenant
// service get_tenant_info server.
func (c *Client) GetTenantInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTenantInfoRequest(c.encoder)
		decodeResponse = DecodeGetTenantInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTenantInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTenantInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tenant", "get_tenant_info", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTenantInfo returns an endpoint that makes HTTP requests to the tenant
// service update_tenant_info server.
func (c *Client) UpdateTenantInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateTenantInfoRequest(c.encoder)
		decodeResponse = DecodeUpdateTenantInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateTenantInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTenantInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tenant", "update_tenant_info", err)
		}
		return decodeResponse(resp)
	}
}
