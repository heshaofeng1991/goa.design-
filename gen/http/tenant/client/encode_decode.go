// Code generated by goa v3.6.2, DO NOT EDIT.
//
// tenant HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	tenant "goa/gen/tenant"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildIntegrationsRequest instantiates a HTTP request object with method and
// path set to call the "tenant" service "integrations" endpoint
func (c *Client) BuildIntegrationsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IntegrationsTenantPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tenant", "integrations", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIntegrationsRequest returns an encoder for requests sent to the tenant
// integrations server.
func EncodeIntegrationsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tenant.AuthToken)
		if !ok {
			return goahttp.ErrInvalidType("tenant", "integrations", "*tenant.AuthToken", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeIntegrationsResponse returns a decoder for responses returned by the
// tenant integrations endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeIntegrationsResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeIntegrationsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IntegrationsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "integrations", err)
			}
			err = ValidateIntegrationsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "integrations", err)
			}
			res := NewIntegrationsTenantIntegrationsOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IntegrationsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "integrations", err)
			}
			err = ValidateIntegrationsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "integrations", err)
			}
			return nil, NewIntegrationsUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tenant", "integrations", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTenantInfoRequest instantiates a HTTP request object with method and
// path set to call the "tenant" service "get_tenant_info" endpoint
func (c *Client) BuildGetTenantInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTenantInfoTenantPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tenant", "get_tenant_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTenantInfoRequest returns an encoder for requests sent to the
// tenant get_tenant_info server.
func EncodeGetTenantInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tenant.AuthToken)
		if !ok {
			return goahttp.ErrInvalidType("tenant", "get_tenant_info", "*tenant.AuthToken", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetTenantInfoResponse returns a decoder for responses returned by the
// tenant get_tenant_info endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetTenantInfoResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetTenantInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTenantInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "get_tenant_info", err)
			}
			err = ValidateGetTenantInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "get_tenant_info", err)
			}
			res := NewGetTenantInfoTenantRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetTenantInfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "get_tenant_info", err)
			}
			err = ValidateGetTenantInfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "get_tenant_info", err)
			}
			return nil, NewGetTenantInfoUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tenant", "get_tenant_info", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTenantInfoRequest instantiates a HTTP request object with method
// and path set to call the "tenant" service "update_tenant_info" endpoint
func (c *Client) BuildUpdateTenantInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTenantInfoTenantPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tenant", "update_tenant_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTenantInfoRequest returns an encoder for requests sent to the
// tenant update_tenant_info server.
func EncodeUpdateTenantInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tenant.TenantInfo)
		if !ok {
			return goahttp.ErrInvalidType("tenant", "update_tenant_info", "*tenant.TenantInfo", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateTenantInfoRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tenant", "update_tenant_info", err)
		}
		return nil
	}
}

// DecodeUpdateTenantInfoResponse returns a decoder for responses returned by
// the tenant update_tenant_info endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateTenantInfoResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateTenantInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateTenantInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "update_tenant_info", err)
			}
			err = ValidateUpdateTenantInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "update_tenant_info", err)
			}
			res := NewUpdateTenantInfoUserRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateTenantInfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tenant", "update_tenant_info", err)
			}
			err = ValidateUpdateTenantInfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tenant", "update_tenant_info", err)
			}
			return nil, NewUpdateTenantInfoUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tenant", "update_tenant_info", resp.StatusCode, string(body))
		}
	}
}

// unmarshalIntegrationDataResponseBodyToTenantIntegrationData builds a value
// of type *tenant.IntegrationData from a value of type
// *IntegrationDataResponseBody.
func unmarshalIntegrationDataResponseBodyToTenantIntegrationData(v *IntegrationDataResponseBody) *tenant.IntegrationData {
	if v == nil {
		return nil
	}
	res := &tenant.IntegrationData{
		Store:         v.Store,
		Platform:      v.Platform,
		CreatedAt:     v.CreatedAt,
		IntegrationAt: v.IntegrationAt,
	}

	return res
}

// unmarshalTenantDataResponseBodyToTenantTenantData builds a value of type
// *tenant.TenantData from a value of type *TenantDataResponseBody.
func unmarshalTenantDataResponseBodyToTenantTenantData(v *TenantDataResponseBody) *tenant.TenantData {
	if v == nil {
		return nil
	}
	res := &tenant.TenantData{
		TenantID:         v.TenantID,
		TenantCode:       v.TenantCode,
		Currency:         v.Currency,
		Balance:          v.Balance,
		HandlingFee:      v.HandlingFee,
		FirstInboundAt:   v.FirstInboundAt,
		StorageUnitPrice: v.StorageUnitPrice,
		ShippingOption:   v.ShippingOption,
		DefaultWarehouse: v.DefaultWarehouse,
		CountryCode:      v.CountryCode,
		UsTariffNumber:   v.UsTariffNumber,
		UkTariffNumber:   v.UkTariffNumber,
		PrepayTariff:     v.PrepayTariff,
	}
	if v.PresetChannelID != nil {
		res.PresetChannelID = make([]int32, len(v.PresetChannelID))
		for i, val := range v.PresetChannelID {
			res.PresetChannelID[i] = val
		}
	}
	if v.TestChannelID != nil {
		res.TestChannelID = make([]int32, len(v.TestChannelID))
		for i, val := range v.TestChannelID {
			res.TestChannelID[i] = val
		}
	}

	return res
}

// unmarshalUserDataResponseBodyToTenantUserData builds a value of type
// *tenant.UserData from a value of type *UserDataResponseBody.
func unmarshalUserDataResponseBodyToTenantUserData(v *UserDataResponseBody) *tenant.UserData {
	if v == nil {
		return nil
	}
	res := &tenant.UserData{
		Status: *v.Status,
	}

	return res
}
