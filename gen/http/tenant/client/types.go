// Code generated by goa v3.6.2, DO NOT EDIT.
//
// tenant HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	tenant "goa/gen/tenant"

	goa "goa.design/goa/v3/pkg"
)

// UpdateTenantInfoRequestBody is the type of the "tenant" service
// "update_tenant_info" endpoint HTTP request body.
type UpdateTenantInfoRequestBody struct {
	// shipping_option
	ShippingOption *int32 `form:"shipping_option,omitempty" json:"shipping_option,omitempty" xml:"shipping_option,omitempty"`
	// default warehouse
	DefaultWarehouse *int32 `form:"default_warehouse,omitempty" json:"default_warehouse,omitempty" xml:"default_warehouse,omitempty"`
	// country code of tariff number
	CountryCode *string `form:"country_code,omitempty" json:"country_code,omitempty" xml:"country_code,omitempty"`
	// us tariff number
	UsTariffNumber *string `form:"us_tariff_number,omitempty" json:"us_tariff_number,omitempty" xml:"us_tariff_number,omitempty"`
	// uk tariff number
	UkTariffNumber *string `form:"uk_tariff_number,omitempty" json:"uk_tariff_number,omitempty" xml:"uk_tariff_number,omitempty"`
	// prepay tariff
	PrepayTariff *bool `form:"prepay_tariff,omitempty" json:"prepay_tariff,omitempty" xml:"prepay_tariff,omitempty"`
}

// IntegrationsResponseBody is the type of the "tenant" service "integrations"
// endpoint HTTP response body.
type IntegrationsResponseBody struct {
	// List of integrations
	Data []*IntegrationDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Authorization
	Authorization *string `form:"Authorization,omitempty" json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	// JWT used for authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// GetTenantInfoResponseBody is the type of the "tenant" service
// "get_tenant_info" endpoint HTTP response body.
type GetTenantInfoResponseBody struct {
	// data
	Data *TenantDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateTenantInfoResponseBody is the type of the "tenant" service
// "update_tenant_info" endpoint HTTP response body.
type UpdateTenantInfoResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// IntegrationsUnauthorizedResponseBody is the type of the "tenant" service
// "integrations" endpoint HTTP response body for the "Unauthorized" error.
type IntegrationsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetTenantInfoUnauthorizedResponseBody is the type of the "tenant" service
// "get_tenant_info" endpoint HTTP response body for the "Unauthorized" error.
type GetTenantInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateTenantInfoUnauthorizedResponseBody is the type of the "tenant" service
// "update_tenant_info" endpoint HTTP response body for the "Unauthorized"
// error.
type UpdateTenantInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IntegrationDataResponseBody is used to define fields on response body types.
type IntegrationDataResponseBody struct {
	// NSS store
	Store *string `form:"store,omitempty" json:"store,omitempty" xml:"store,omitempty"`
	// shopify
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// created_at
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at
	IntegrationAt *string `form:"integration_at,omitempty" json:"integration_at,omitempty" xml:"integration_at,omitempty"`
}

// TenantDataResponseBody is used to define fields on response body types.
type TenantDataResponseBody struct {
	// tenant id
	TenantID *int32 `form:"tenant_id,omitempty" json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant code
	TenantCode *string `form:"tenant_code,omitempty" json:"tenant_code,omitempty" xml:"tenant_code,omitempty"`
	// currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// balance
	Balance *float64 `form:"balance,omitempty" json:"balance,omitempty" xml:"balance,omitempty"`
	// handling_fee
	HandlingFee *float64 `form:"handling_fee,omitempty" json:"handling_fee,omitempty" xml:"handling_fee,omitempty"`
	// preset_channel_ids
	PresetChannelID []int32 `form:"preset_channel_id,omitempty" json:"preset_channel_id,omitempty" xml:"preset_channel_id,omitempty"`
	// test_channel_id
	TestChannelID []int32 `form:"test_channel_id,omitempty" json:"test_channel_id,omitempty" xml:"test_channel_id,omitempty"`
	// first_inbound_at
	FirstInboundAt *string `form:"first_inbound_at,omitempty" json:"first_inbound_at,omitempty" xml:"first_inbound_at,omitempty"`
	// storage_unit_price
	StorageUnitPrice *float64 `form:"storage_unit_price,omitempty" json:"storage_unit_price,omitempty" xml:"storage_unit_price,omitempty"`
	// shipping_option
	ShippingOption *int32 `form:"shipping_option,omitempty" json:"shipping_option,omitempty" xml:"shipping_option,omitempty"`
	// default warehouse
	DefaultWarehouse *int32 `form:"default_warehouse,omitempty" json:"default_warehouse,omitempty" xml:"default_warehouse,omitempty"`
	// country code of tariff number
	CountryCode *string `form:"country_code,omitempty" json:"country_code,omitempty" xml:"country_code,omitempty"`
	// us tariff number
	UsTariffNumber *string `form:"us_tariff_number,omitempty" json:"us_tariff_number,omitempty" xml:"us_tariff_number,omitempty"`
	// uk tariff number
	UkTariffNumber *string `form:"uk_tariff_number,omitempty" json:"uk_tariff_number,omitempty" xml:"uk_tariff_number,omitempty"`
	// prepay tariff
	PrepayTariff *bool `form:"prepay_tariff,omitempty" json:"prepay_tariff,omitempty" xml:"prepay_tariff,omitempty"`
}

// UserDataResponseBody is used to define fields on response body types.
type UserDataResponseBody struct {
	// status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewUpdateTenantInfoRequestBody builds the HTTP request body from the payload
// of the "update_tenant_info" endpoint of the "tenant" service.
func NewUpdateTenantInfoRequestBody(p *tenant.TenantInfo) *UpdateTenantInfoRequestBody {
	body := &UpdateTenantInfoRequestBody{
		ShippingOption:   p.ShippingOption,
		DefaultWarehouse: p.DefaultWarehouse,
		CountryCode:      p.CountryCode,
		UsTariffNumber:   p.UsTariffNumber,
		UkTariffNumber:   p.UkTariffNumber,
		PrepayTariff:     p.PrepayTariff,
	}
	return body
}

// NewIntegrationsTenantIntegrationsOK builds a "tenant" service "integrations"
// endpoint result from a HTTP "OK" response.
func NewIntegrationsTenantIntegrationsOK(body *IntegrationsResponseBody) *tenant.TenantIntegrations {
	v := &tenant.TenantIntegrations{
		Code:          *body.Code,
		Message:       *body.Message,
		Authorization: body.Authorization,
		Token:         body.Token,
	}
	if body.Data != nil {
		v.Data = make([]*tenant.IntegrationData, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalIntegrationDataResponseBodyToTenantIntegrationData(val)
		}
	}

	return v
}

// NewIntegrationsUnauthorized builds a tenant service integrations endpoint
// Unauthorized error.
func NewIntegrationsUnauthorized(body *IntegrationsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetTenantInfoTenantRspOK builds a "tenant" service "get_tenant_info"
// endpoint result from a HTTP "OK" response.
func NewGetTenantInfoTenantRspOK(body *GetTenantInfoResponseBody) *tenant.TenantRsp {
	v := &tenant.TenantRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalTenantDataResponseBodyToTenantTenantData(body.Data)
	}

	return v
}

// NewGetTenantInfoUnauthorized builds a tenant service get_tenant_info
// endpoint Unauthorized error.
func NewGetTenantInfoUnauthorized(body *GetTenantInfoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateTenantInfoUserRspOK builds a "tenant" service "update_tenant_info"
// endpoint result from a HTTP "OK" response.
func NewUpdateTenantInfoUserRspOK(body *UpdateTenantInfoResponseBody) *tenant.UserRsp {
	v := &tenant.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToTenantUserData(body.Data)
	}

	return v
}

// NewUpdateTenantInfoUnauthorized builds a tenant service update_tenant_info
// endpoint Unauthorized error.
func NewUpdateTenantInfoUnauthorized(body *UpdateTenantInfoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateIntegrationsResponseBody runs the validations defined on
// IntegrationsResponseBody
func ValidateIntegrationsResponseBody(body *IntegrationsResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTenantInfoResponseBody runs the validations defined on
// get_tenant_info_response_body
func ValidateGetTenantInfoResponseBody(body *GetTenantInfoResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTenantInfoResponseBody runs the validations defined on
// update_tenant_info_response_body
func ValidateUpdateTenantInfoResponseBody(body *UpdateTenantInfoResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateIntegrationsUnauthorizedResponseBody runs the validations defined on
// integrations_Unauthorized_response_body
func ValidateIntegrationsUnauthorizedResponseBody(body *IntegrationsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetTenantInfoUnauthorizedResponseBody runs the validations defined
// on get_tenant_info_Unauthorized_response_body
func ValidateGetTenantInfoUnauthorizedResponseBody(body *GetTenantInfoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateTenantInfoUnauthorizedResponseBody runs the validations
// defined on update_tenant_info_Unauthorized_response_body
func ValidateUpdateTenantInfoUnauthorizedResponseBody(body *UpdateTenantInfoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserDataResponseBody runs the validations defined on
// UserDataResponseBody
func ValidateUserDataResponseBody(body *UserDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
