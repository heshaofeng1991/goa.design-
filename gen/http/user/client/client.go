// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user client HTTP transport
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the user service endpoint HTTP clients.
type Client struct {
	// UserSignup Doer is the HTTP client used to make requests to the user_signup
	// endpoint.
	UserSignupDoer goahttp.Doer

	// UserLogin Doer is the HTTP client used to make requests to the user_login
	// endpoint.
	UserLoginDoer goahttp.Doer

	// UserModifyPassword Doer is the HTTP client used to make requests to the
	// user_modify_password endpoint.
	UserModifyPasswordDoer goahttp.Doer

	// UserForgetPassword Doer is the HTTP client used to make requests to the
	// user_forget_password endpoint.
	UserForgetPasswordDoer goahttp.Doer

	// UserValidate Doer is the HTTP client used to make requests to the
	// user_validate endpoint.
	UserValidateDoer goahttp.Doer

	// UserLogout Doer is the HTTP client used to make requests to the user_logout
	// endpoint.
	UserLogoutDoer goahttp.Doer

	// GetUserInfo Doer is the HTTP client used to make requests to the
	// get_user_info endpoint.
	GetUserInfoDoer goahttp.Doer

	// UpdateUserInfo Doer is the HTTP client used to make requests to the
	// update_user_info endpoint.
	UpdateUserInfoDoer goahttp.Doer

	// Permissions Doer is the HTTP client used to make requests to the permissions
	// endpoint.
	PermissionsDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		UserSignupDoer:         doer,
		UserLoginDoer:          doer,
		UserModifyPasswordDoer: doer,
		UserForgetPasswordDoer: doer,
		UserValidateDoer:       doer,
		UserLogoutDoer:         doer,
		GetUserInfoDoer:        doer,
		UpdateUserInfoDoer:     doer,
		PermissionsDoer:        doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// UserSignup returns an endpoint that makes HTTP requests to the user service
// user_signup server.
func (c *Client) UserSignup() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserSignupRequest(c.encoder)
		decodeResponse = DecodeUserSignupResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserSignupRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserSignupDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_signup", err)
		}
		return decodeResponse(resp)
	}
}

// UserLogin returns an endpoint that makes HTTP requests to the user service
// user_login server.
func (c *Client) UserLogin() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserLoginRequest(c.encoder)
		decodeResponse = DecodeUserLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserLoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_login", err)
		}
		return decodeResponse(resp)
	}
}

// UserModifyPassword returns an endpoint that makes HTTP requests to the user
// service user_modify_password server.
func (c *Client) UserModifyPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserModifyPasswordRequest(c.encoder)
		decodeResponse = DecodeUserModifyPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserModifyPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserModifyPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_modify_password", err)
		}
		return decodeResponse(resp)
	}
}

// UserForgetPassword returns an endpoint that makes HTTP requests to the user
// service user_forget_password server.
func (c *Client) UserForgetPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserForgetPasswordRequest(c.encoder)
		decodeResponse = DecodeUserForgetPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserForgetPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserForgetPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_forget_password", err)
		}
		return decodeResponse(resp)
	}
}

// UserValidate returns an endpoint that makes HTTP requests to the user
// service user_validate server.
func (c *Client) UserValidate() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserValidateRequest(c.encoder)
		decodeResponse = DecodeUserValidateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserValidateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserValidateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_validate", err)
		}
		return decodeResponse(resp)
	}
}

// UserLogout returns an endpoint that makes HTTP requests to the user service
// user_logout server.
func (c *Client) UserLogout() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserLogoutRequest(c.encoder)
		decodeResponse = DecodeUserLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserLogoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "user_logout", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserInfo returns an endpoint that makes HTTP requests to the user service
// get_user_info server.
func (c *Client) GetUserInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserInfoRequest(c.encoder)
		decodeResponse = DecodeGetUserInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "get_user_info", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUserInfo returns an endpoint that makes HTTP requests to the user
// service update_user_info server.
func (c *Client) UpdateUserInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserInfoRequest(c.encoder)
		decodeResponse = DecodeUpdateUserInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateUserInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "update_user_info", err)
		}
		return decodeResponse(resp)
	}
}

// Permissions returns an endpoint that makes HTTP requests to the user service
// permissions server.
func (c *Client) Permissions() goa.Endpoint {
	var (
		encodeRequest  = EncodePermissionsRequest(c.encoder)
		decodeResponse = DecodePermissionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPermissionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PermissionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "permissions", err)
		}
		return decodeResponse(resp)
	}
}
