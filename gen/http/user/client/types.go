// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	user "goa/gen/user"

	goa "goa.design/goa/v3/pkg"
)

// UserSignupRequestBody is the type of the "user" service "user_signup"
// endpoint HTTP request body.
type UserSignupRequestBody struct {
	// user register email
	Email string `form:"email" json:"email" xml:"email"`
	// user register password
	Password string `form:"password" json:"password" xml:"password"`
	// user register name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// user register phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// source form platform
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// inviter id
	InviterID *int32 `form:"inviter_id,omitempty" json:"inviter_id,omitempty" xml:"inviter_id,omitempty"`
	// store code
	StoreCode *string `form:"store_code,omitempty" json:"store_code,omitempty" xml:"store_code,omitempty"`
	// website
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// platform
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// concerns
	Concerns *string `form:"concerns,omitempty" json:"concerns,omitempty" xml:"concerns,omitempty"`
}

// UserLoginRequestBody is the type of the "user" service "user_login" endpoint
// HTTP request body.
type UserLoginRequestBody struct {
	// user login email
	Email string `form:"email" json:"email" xml:"email"`
	// user login password
	Password string `form:"password" json:"password" xml:"password"`
	// store code
	StoreCode *string `form:"store_code,omitempty" json:"store_code,omitempty" xml:"store_code,omitempty"`
}

// UserModifyPasswordRequestBody is the type of the "user" service
// "user_modify_password" endpoint HTTP request body.
type UserModifyPasswordRequestBody struct {
	// user email
	Email string `form:"email" json:"email" xml:"email"`
	// user password
	Password string `form:"password" json:"password" xml:"password"`
	// old password
	OldPassword string `form:"old_password" json:"old_password" xml:"old_password"`
}

// UserForgetPasswordRequestBody is the type of the "user" service
// "user_forget_password" endpoint HTTP request body.
type UserForgetPasswordRequestBody struct {
	// user email
	Email string `form:"email" json:"email" xml:"email"`
	// user password
	Password string `form:"password" json:"password" xml:"password"`
	// email code
	Code string `form:"code" json:"code" xml:"code"`
	// action
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
}

// UserValidateRequestBody is the type of the "user" service "user_validate"
// endpoint HTTP request body.
type UserValidateRequestBody struct {
	// user email
	Email string `form:"email" json:"email" xml:"email"`
}

// UpdateUserInfoRequestBody is the type of the "user" service
// "update_user_info" endpoint HTTP request body.
type UpdateUserInfoRequestBody struct {
	// user name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// UserSignupResponseBody is the type of the "user" service "user_signup"
// endpoint HTTP response body.
type UserSignupResponseBody struct {
	// data
	Data *SignupDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserLoginResponseBody is the type of the "user" service "user_login"
// endpoint HTTP response body.
type UserLoginResponseBody struct {
	// data
	Data *SignupDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserModifyPasswordResponseBody is the type of the "user" service
// "user_modify_password" endpoint HTTP response body.
type UserModifyPasswordResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserForgetPasswordResponseBody is the type of the "user" service
// "user_forget_password" endpoint HTTP response body.
type UserForgetPasswordResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserValidateResponseBody is the type of the "user" service "user_validate"
// endpoint HTTP response body.
type UserValidateResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserLogoutResponseBody is the type of the "user" service "user_logout"
// endpoint HTTP response body.
type UserLogoutResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetUserInfoResponseBody is the type of the "user" service "get_user_info"
// endpoint HTTP response body.
type GetUserInfoResponseBody struct {
	// data
	Data *UserInfoDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateUserInfoResponseBody is the type of the "user" service
// "update_user_info" endpoint HTTP response body.
type UpdateUserInfoResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// PermissionsResponseBody is the type of the "user" service "permissions"
// endpoint HTTP response body.
type PermissionsResponseBody struct {
	// data
	Data *PermissionsDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserSignupUnauthorizedResponseBody is the type of the "user" service
// "user_signup" endpoint HTTP response body for the "Unauthorized" error.
type UserSignupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserLoginUnauthorizedResponseBody is the type of the "user" service
// "user_login" endpoint HTTP response body for the "Unauthorized" error.
type UserLoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserModifyPasswordUnauthorizedResponseBody is the type of the "user" service
// "user_modify_password" endpoint HTTP response body for the "Unauthorized"
// error.
type UserModifyPasswordUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserForgetPasswordUnauthorizedResponseBody is the type of the "user" service
// "user_forget_password" endpoint HTTP response body for the "Unauthorized"
// error.
type UserForgetPasswordUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserValidateUnauthorizedResponseBody is the type of the "user" service
// "user_validate" endpoint HTTP response body for the "Unauthorized" error.
type UserValidateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserLogoutUnauthorizedResponseBody is the type of the "user" service
// "user_logout" endpoint HTTP response body for the "Unauthorized" error.
type UserLogoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserInfoUnauthorizedResponseBody is the type of the "user" service
// "get_user_info" endpoint HTTP response body for the "Unauthorized" error.
type GetUserInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUserInfoUnauthorizedResponseBody is the type of the "user" service
// "update_user_info" endpoint HTTP response body for the "Unauthorized" error.
type UpdateUserInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PermissionsUnauthorizedResponseBody is the type of the "user" service
// "permissions" endpoint HTTP response body for the "Unauthorized" error.
type PermissionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SignupDataResponseBody is used to define fields on response body types.
type SignupDataResponseBody struct {
	// status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// UserDataResponseBody is used to define fields on response body types.
type UserDataResponseBody struct {
	// status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// UserInfoDataResponseBody is used to define fields on response body types.
type UserInfoDataResponseBody struct {
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// user name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// user email
	UserEmail *string `form:"user_email,omitempty" json:"user_email,omitempty" xml:"user_email,omitempty"`
	// user avatar
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
	// user phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
}

// PermissionsDataResponseBody is used to define fields on response body types.
type PermissionsDataResponseBody struct {
	// order_status
	OrderStatus []*OrderStatusDataResponseBody `form:"order_status,omitempty" json:"order_status,omitempty" xml:"order_status,omitempty"`
}

// OrderStatusDataResponseBody is used to define fields on response body types.
type OrderStatusDataResponseBody struct {
	// new
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// ready
	Action []string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
}

// NewUserSignupRequestBody builds the HTTP request body from the payload of
// the "user_signup" endpoint of the "user" service.
func NewUserSignupRequestBody(p *user.Signup) *UserSignupRequestBody {
	body := &UserSignupRequestBody{
		Email:     p.Email,
		Password:  p.Password,
		UserName:  p.UserName,
		Phone:     p.Phone,
		Source:    p.Source,
		InviterID: p.InviterID,
		StoreCode: p.StoreCode,
		Website:   p.Website,
		Platform:  p.Platform,
		Concerns:  p.Concerns,
	}
	return body
}

// NewUserLoginRequestBody builds the HTTP request body from the payload of the
// "user_login" endpoint of the "user" service.
func NewUserLoginRequestBody(p *user.Login) *UserLoginRequestBody {
	body := &UserLoginRequestBody{
		Email:     p.Email,
		Password:  p.Password,
		StoreCode: p.StoreCode,
	}
	return body
}

// NewUserModifyPasswordRequestBody builds the HTTP request body from the
// payload of the "user_modify_password" endpoint of the "user" service.
func NewUserModifyPasswordRequestBody(p *user.ModifyPassword) *UserModifyPasswordRequestBody {
	body := &UserModifyPasswordRequestBody{
		Email:       p.Email,
		Password:    p.Password,
		OldPassword: p.OldPassword,
	}
	return body
}

// NewUserForgetPasswordRequestBody builds the HTTP request body from the
// payload of the "user_forget_password" endpoint of the "user" service.
func NewUserForgetPasswordRequestBody(p *user.ForgetPassword) *UserForgetPasswordRequestBody {
	body := &UserForgetPasswordRequestBody{
		Email:    p.Email,
		Password: p.Password,
		Code:     p.Code,
		Action:   p.Action,
	}
	return body
}

// NewUserValidateRequestBody builds the HTTP request body from the payload of
// the "user_validate" endpoint of the "user" service.
func NewUserValidateRequestBody(p *user.ValidateEmail) *UserValidateRequestBody {
	body := &UserValidateRequestBody{
		Email: p.Email,
	}
	return body
}

// NewUpdateUserInfoRequestBody builds the HTTP request body from the payload
// of the "update_user_info" endpoint of the "user" service.
func NewUpdateUserInfoRequestBody(p *user.UserInfo) *UpdateUserInfoRequestBody {
	body := &UpdateUserInfoRequestBody{
		UserName: p.UserName,
	}
	return body
}

// NewUserSignupSignupRspOK builds a "user" service "user_signup" endpoint
// result from a HTTP "OK" response.
func NewUserSignupSignupRspOK(body *UserSignupResponseBody) *user.SignupRsp {
	v := &user.SignupRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalSignupDataResponseBodyToUserSignupData(body.Data)
	}

	return v
}

// NewUserSignupUnauthorized builds a user service user_signup endpoint
// Unauthorized error.
func NewUserSignupUnauthorized(body *UserSignupUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUserLoginSignupRspOK builds a "user" service "user_login" endpoint result
// from a HTTP "OK" response.
func NewUserLoginSignupRspOK(body *UserLoginResponseBody) *user.SignupRsp {
	v := &user.SignupRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalSignupDataResponseBodyToUserSignupData(body.Data)
	}

	return v
}

// NewUserLoginUnauthorized builds a user service user_login endpoint
// Unauthorized error.
func NewUserLoginUnauthorized(body *UserLoginUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUserModifyPasswordUserRspOK builds a "user" service
// "user_modify_password" endpoint result from a HTTP "OK" response.
func NewUserModifyPasswordUserRspOK(body *UserModifyPasswordResponseBody) *user.UserRsp {
	v := &user.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToUserUserData(body.Data)
	}

	return v
}

// NewUserModifyPasswordUnauthorized builds a user service user_modify_password
// endpoint Unauthorized error.
func NewUserModifyPasswordUnauthorized(body *UserModifyPasswordUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUserForgetPasswordUserRspOK builds a "user" service
// "user_forget_password" endpoint result from a HTTP "OK" response.
func NewUserForgetPasswordUserRspOK(body *UserForgetPasswordResponseBody) *user.UserRsp {
	v := &user.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToUserUserData(body.Data)
	}

	return v
}

// NewUserForgetPasswordUnauthorized builds a user service user_forget_password
// endpoint Unauthorized error.
func NewUserForgetPasswordUnauthorized(body *UserForgetPasswordUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUserValidateUserRspOK builds a "user" service "user_validate" endpoint
// result from a HTTP "OK" response.
func NewUserValidateUserRspOK(body *UserValidateResponseBody) *user.UserRsp {
	v := &user.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToUserUserData(body.Data)
	}

	return v
}

// NewUserValidateUnauthorized builds a user service user_validate endpoint
// Unauthorized error.
func NewUserValidateUnauthorized(body *UserValidateUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUserLogoutUserRspOK builds a "user" service "user_logout" endpoint result
// from a HTTP "OK" response.
func NewUserLogoutUserRspOK(body *UserLogoutResponseBody) *user.UserRsp {
	v := &user.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToUserUserData(body.Data)
	}

	return v
}

// NewUserLogoutUnauthorized builds a user service user_logout endpoint
// Unauthorized error.
func NewUserLogoutUnauthorized(body *UserLogoutUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserInfoUserInfoRspOK builds a "user" service "get_user_info" endpoint
// result from a HTTP "OK" response.
func NewGetUserInfoUserInfoRspOK(body *GetUserInfoResponseBody) *user.UserInfoRsp {
	v := &user.UserInfoRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserInfoDataResponseBodyToUserUserInfoData(body.Data)
	}

	return v
}

// NewGetUserInfoUnauthorized builds a user service get_user_info endpoint
// Unauthorized error.
func NewGetUserInfoUnauthorized(body *GetUserInfoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUserInfoUserRspOK builds a "user" service "update_user_info"
// endpoint result from a HTTP "OK" response.
func NewUpdateUserInfoUserRspOK(body *UpdateUserInfoResponseBody) *user.UserRsp {
	v := &user.UserRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUserDataResponseBodyToUserUserData(body.Data)
	}

	return v
}

// NewUpdateUserInfoUnauthorized builds a user service update_user_info
// endpoint Unauthorized error.
func NewUpdateUserInfoUnauthorized(body *UpdateUserInfoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPermissionsRspOK builds a "user" service "permissions" endpoint result
// from a HTTP "OK" response.
func NewPermissionsRspOK(body *PermissionsResponseBody) *user.PermissionsRsp {
	v := &user.PermissionsRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalPermissionsDataResponseBodyToUserPermissionsData(body.Data)
	}

	return v
}

// NewPermissionsUnauthorized builds a user service permissions endpoint
// Unauthorized error.
func NewPermissionsUnauthorized(body *PermissionsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUserSignupResponseBody runs the validations defined on
// user_signup_response_body
func ValidateUserSignupResponseBody(body *UserSignupResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateSignupDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserLoginResponseBody runs the validations defined on
// user_login_response_body
func ValidateUserLoginResponseBody(body *UserLoginResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateSignupDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserModifyPasswordResponseBody runs the validations defined on
// user_modify_password_response_body
func ValidateUserModifyPasswordResponseBody(body *UserModifyPasswordResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserForgetPasswordResponseBody runs the validations defined on
// user_forget_password_response_body
func ValidateUserForgetPasswordResponseBody(body *UserForgetPasswordResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserValidateResponseBody runs the validations defined on
// user_validate_response_body
func ValidateUserValidateResponseBody(body *UserValidateResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserLogoutResponseBody runs the validations defined on
// user_logout_response_body
func ValidateUserLogoutResponseBody(body *UserLogoutResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetUserInfoResponseBody runs the validations defined on
// get_user_info_response_body
func ValidateGetUserInfoResponseBody(body *GetUserInfoResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUserInfoResponseBody runs the validations defined on
// update_user_info_response_body
func ValidateUpdateUserInfoResponseBody(body *UpdateUserInfoResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUserDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePermissionsResponseBody runs the validations defined on
// PermissionsResponseBody
func ValidatePermissionsResponseBody(body *PermissionsResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidatePermissionsDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserSignupUnauthorizedResponseBody runs the validations defined on
// user_signup_Unauthorized_response_body
func ValidateUserSignupUnauthorizedResponseBody(body *UserSignupUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserLoginUnauthorizedResponseBody runs the validations defined on
// user_login_Unauthorized_response_body
func ValidateUserLoginUnauthorizedResponseBody(body *UserLoginUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserModifyPasswordUnauthorizedResponseBody runs the validations
// defined on user_modify_password_Unauthorized_response_body
func ValidateUserModifyPasswordUnauthorizedResponseBody(body *UserModifyPasswordUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserForgetPasswordUnauthorizedResponseBody runs the validations
// defined on user_forget_password_Unauthorized_response_body
func ValidateUserForgetPasswordUnauthorizedResponseBody(body *UserForgetPasswordUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserValidateUnauthorizedResponseBody runs the validations defined on
// user_validate_Unauthorized_response_body
func ValidateUserValidateUnauthorizedResponseBody(body *UserValidateUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserLogoutUnauthorizedResponseBody runs the validations defined on
// user_logout_Unauthorized_response_body
func ValidateUserLogoutUnauthorizedResponseBody(body *UserLogoutUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserInfoUnauthorizedResponseBody runs the validations defined on
// get_user_info_Unauthorized_response_body
func ValidateGetUserInfoUnauthorizedResponseBody(body *GetUserInfoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUserInfoUnauthorizedResponseBody runs the validations defined
// on update_user_info_Unauthorized_response_body
func ValidateUpdateUserInfoUnauthorizedResponseBody(body *UpdateUserInfoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePermissionsUnauthorizedResponseBody runs the validations defined on
// permissions_Unauthorized_response_body
func ValidatePermissionsUnauthorizedResponseBody(body *PermissionsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSignupDataResponseBody runs the validations defined on
// SignupDataResponseBody
func ValidateSignupDataResponseBody(body *SignupDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}

// ValidateUserDataResponseBody runs the validations defined on
// UserDataResponseBody
func ValidateUserDataResponseBody(body *UserDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidatePermissionsDataResponseBody runs the validations defined on
// PermissionsDataResponseBody
func ValidatePermissionsDataResponseBody(body *PermissionsDataResponseBody) (err error) {
	for _, e := range body.OrderStatus {
		if e != nil {
			if err2 := ValidateOrderStatusDataResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderStatusDataResponseBody runs the validations defined on
// OrderStatusDataResponseBody
func ValidateOrderStatusDataResponseBody(body *OrderStatusDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	return
}
