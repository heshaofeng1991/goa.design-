// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	user "goa/gen/user"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UserSignupRequestBody is the type of the "user" service "user_signup"
// endpoint HTTP request body.
type UserSignupRequestBody struct {
	// user register email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// user register password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// user register name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// user register phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// source form platform
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// inviter id
	InviterID *int32 `form:"inviter_id,omitempty" json:"inviter_id,omitempty" xml:"inviter_id,omitempty"`
	// store code
	StoreCode *string `form:"store_code,omitempty" json:"store_code,omitempty" xml:"store_code,omitempty"`
	// website
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// platform
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// concerns
	Concerns *string `form:"concerns,omitempty" json:"concerns,omitempty" xml:"concerns,omitempty"`
}

// UserLoginRequestBody is the type of the "user" service "user_login" endpoint
// HTTP request body.
type UserLoginRequestBody struct {
	// user login email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// user login password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// store code
	StoreCode *string `form:"store_code,omitempty" json:"store_code,omitempty" xml:"store_code,omitempty"`
}

// UserModifyPasswordRequestBody is the type of the "user" service
// "user_modify_password" endpoint HTTP request body.
type UserModifyPasswordRequestBody struct {
	// user email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// old password
	OldPassword *string `form:"old_password,omitempty" json:"old_password,omitempty" xml:"old_password,omitempty"`
}

// UserForgetPasswordRequestBody is the type of the "user" service
// "user_forget_password" endpoint HTTP request body.
type UserForgetPasswordRequestBody struct {
	// user email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// email code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// action
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
}

// UserValidateRequestBody is the type of the "user" service "user_validate"
// endpoint HTTP request body.
type UserValidateRequestBody struct {
	// user email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// UpdateUserInfoRequestBody is the type of the "user" service
// "update_user_info" endpoint HTTP request body.
type UpdateUserInfoRequestBody struct {
	// user name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
}

// UserSignupResponseBody is the type of the "user" service "user_signup"
// endpoint HTTP response body.
type UserSignupResponseBody struct {
	// data
	Data *SignupDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserLoginResponseBody is the type of the "user" service "user_login"
// endpoint HTTP response body.
type UserLoginResponseBody struct {
	// data
	Data *SignupDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserModifyPasswordResponseBody is the type of the "user" service
// "user_modify_password" endpoint HTTP response body.
type UserModifyPasswordResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserForgetPasswordResponseBody is the type of the "user" service
// "user_forget_password" endpoint HTTP response body.
type UserForgetPasswordResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserValidateResponseBody is the type of the "user" service "user_validate"
// endpoint HTTP response body.
type UserValidateResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserLogoutResponseBody is the type of the "user" service "user_logout"
// endpoint HTTP response body.
type UserLogoutResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetUserInfoResponseBody is the type of the "user" service "get_user_info"
// endpoint HTTP response body.
type GetUserInfoResponseBody struct {
	// data
	Data *UserInfoDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateUserInfoResponseBody is the type of the "user" service
// "update_user_info" endpoint HTTP response body.
type UpdateUserInfoResponseBody struct {
	// data
	Data *UserDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// PermissionsResponseBody is the type of the "user" service "permissions"
// endpoint HTTP response body.
type PermissionsResponseBody struct {
	// data
	Data *PermissionsDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UserSignupUnauthorizedResponseBody is the type of the "user" service
// "user_signup" endpoint HTTP response body for the "Unauthorized" error.
type UserSignupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserLoginUnauthorizedResponseBody is the type of the "user" service
// "user_login" endpoint HTTP response body for the "Unauthorized" error.
type UserLoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserModifyPasswordUnauthorizedResponseBody is the type of the "user" service
// "user_modify_password" endpoint HTTP response body for the "Unauthorized"
// error.
type UserModifyPasswordUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserForgetPasswordUnauthorizedResponseBody is the type of the "user" service
// "user_forget_password" endpoint HTTP response body for the "Unauthorized"
// error.
type UserForgetPasswordUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserValidateUnauthorizedResponseBody is the type of the "user" service
// "user_validate" endpoint HTTP response body for the "Unauthorized" error.
type UserValidateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserLogoutUnauthorizedResponseBody is the type of the "user" service
// "user_logout" endpoint HTTP response body for the "Unauthorized" error.
type UserLogoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserInfoUnauthorizedResponseBody is the type of the "user" service
// "get_user_info" endpoint HTTP response body for the "Unauthorized" error.
type GetUserInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUserInfoUnauthorizedResponseBody is the type of the "user" service
// "update_user_info" endpoint HTTP response body for the "Unauthorized" error.
type UpdateUserInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PermissionsUnauthorizedResponseBody is the type of the "user" service
// "permissions" endpoint HTTP response body for the "Unauthorized" error.
type PermissionsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignupDataResponseBody is used to define fields on response body types.
type SignupDataResponseBody struct {
	// status
	Status int `form:"status" json:"status" xml:"status"`
	// token
	Token string `form:"token" json:"token" xml:"token"`
}

// UserDataResponseBody is used to define fields on response body types.
type UserDataResponseBody struct {
	// status
	Status int `form:"status" json:"status" xml:"status"`
}

// UserInfoDataResponseBody is used to define fields on response body types.
type UserInfoDataResponseBody struct {
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// user name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// user email
	UserEmail *string `form:"user_email,omitempty" json:"user_email,omitempty" xml:"user_email,omitempty"`
	// user avatar
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
	// user phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
}

// PermissionsDataResponseBody is used to define fields on response body types.
type PermissionsDataResponseBody struct {
	// order_status
	OrderStatus []*OrderStatusDataResponseBody `form:"order_status,omitempty" json:"order_status,omitempty" xml:"order_status,omitempty"`
}

// OrderStatusDataResponseBody is used to define fields on response body types.
type OrderStatusDataResponseBody struct {
	// new
	Status int `form:"status" json:"status" xml:"status"`
	// ready
	Action []string `form:"action" json:"action" xml:"action"`
}

// NewUserSignupResponseBody builds the HTTP response body from the result of
// the "user_signup" endpoint of the "user" service.
func NewUserSignupResponseBody(res *user.SignupRsp) *UserSignupResponseBody {
	body := &UserSignupResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserSignupDataToSignupDataResponseBody(res.Data)
	}
	return body
}

// NewUserLoginResponseBody builds the HTTP response body from the result of
// the "user_login" endpoint of the "user" service.
func NewUserLoginResponseBody(res *user.SignupRsp) *UserLoginResponseBody {
	body := &UserLoginResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserSignupDataToSignupDataResponseBody(res.Data)
	}
	return body
}

// NewUserModifyPasswordResponseBody builds the HTTP response body from the
// result of the "user_modify_password" endpoint of the "user" service.
func NewUserModifyPasswordResponseBody(res *user.UserRsp) *UserModifyPasswordResponseBody {
	body := &UserModifyPasswordResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserDataToUserDataResponseBody(res.Data)
	}
	return body
}

// NewUserForgetPasswordResponseBody builds the HTTP response body from the
// result of the "user_forget_password" endpoint of the "user" service.
func NewUserForgetPasswordResponseBody(res *user.UserRsp) *UserForgetPasswordResponseBody {
	body := &UserForgetPasswordResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserDataToUserDataResponseBody(res.Data)
	}
	return body
}

// NewUserValidateResponseBody builds the HTTP response body from the result of
// the "user_validate" endpoint of the "user" service.
func NewUserValidateResponseBody(res *user.UserRsp) *UserValidateResponseBody {
	body := &UserValidateResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserDataToUserDataResponseBody(res.Data)
	}
	return body
}

// NewUserLogoutResponseBody builds the HTTP response body from the result of
// the "user_logout" endpoint of the "user" service.
func NewUserLogoutResponseBody(res *user.UserRsp) *UserLogoutResponseBody {
	body := &UserLogoutResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserDataToUserDataResponseBody(res.Data)
	}
	return body
}

// NewGetUserInfoResponseBody builds the HTTP response body from the result of
// the "get_user_info" endpoint of the "user" service.
func NewGetUserInfoResponseBody(res *user.UserInfoRsp) *GetUserInfoResponseBody {
	body := &GetUserInfoResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserInfoDataToUserInfoDataResponseBody(res.Data)
	}
	return body
}

// NewUpdateUserInfoResponseBody builds the HTTP response body from the result
// of the "update_user_info" endpoint of the "user" service.
func NewUpdateUserInfoResponseBody(res *user.UserRsp) *UpdateUserInfoResponseBody {
	body := &UpdateUserInfoResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserUserDataToUserDataResponseBody(res.Data)
	}
	return body
}

// NewPermissionsResponseBody builds the HTTP response body from the result of
// the "permissions" endpoint of the "user" service.
func NewPermissionsResponseBody(res *user.PermissionsRsp) *PermissionsResponseBody {
	body := &PermissionsResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalUserPermissionsDataToPermissionsDataResponseBody(res.Data)
	}
	return body
}

// NewUserSignupUnauthorizedResponseBody builds the HTTP response body from the
// result of the "user_signup" endpoint of the "user" service.
func NewUserSignupUnauthorizedResponseBody(res *goa.ServiceError) *UserSignupUnauthorizedResponseBody {
	body := &UserSignupUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "user_login" endpoint of the "user" service.
func NewUserLoginUnauthorizedResponseBody(res *goa.ServiceError) *UserLoginUnauthorizedResponseBody {
	body := &UserLoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserModifyPasswordUnauthorizedResponseBody builds the HTTP response body
// from the result of the "user_modify_password" endpoint of the "user" service.
func NewUserModifyPasswordUnauthorizedResponseBody(res *goa.ServiceError) *UserModifyPasswordUnauthorizedResponseBody {
	body := &UserModifyPasswordUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserForgetPasswordUnauthorizedResponseBody builds the HTTP response body
// from the result of the "user_forget_password" endpoint of the "user" service.
func NewUserForgetPasswordUnauthorizedResponseBody(res *goa.ServiceError) *UserForgetPasswordUnauthorizedResponseBody {
	body := &UserForgetPasswordUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserValidateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "user_validate" endpoint of the "user" service.
func NewUserValidateUnauthorizedResponseBody(res *goa.ServiceError) *UserValidateUnauthorizedResponseBody {
	body := &UserValidateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserLogoutUnauthorizedResponseBody builds the HTTP response body from the
// result of the "user_logout" endpoint of the "user" service.
func NewUserLogoutUnauthorizedResponseBody(res *goa.ServiceError) *UserLogoutUnauthorizedResponseBody {
	body := &UserLogoutUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserInfoUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get_user_info" endpoint of the "user" service.
func NewGetUserInfoUnauthorizedResponseBody(res *goa.ServiceError) *GetUserInfoUnauthorizedResponseBody {
	body := &GetUserInfoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUserInfoUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_user_info" endpoint of the "user" service.
func NewUpdateUserInfoUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUserInfoUnauthorizedResponseBody {
	body := &UpdateUserInfoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPermissionsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "permissions" endpoint of the "user" service.
func NewPermissionsUnauthorizedResponseBody(res *goa.ServiceError) *PermissionsUnauthorizedResponseBody {
	body := &PermissionsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUserSignupSignup builds a user service user_signup endpoint payload.
func NewUserSignupSignup(body *UserSignupRequestBody) *user.Signup {
	v := &user.Signup{
		Email:     *body.Email,
		Password:  *body.Password,
		UserName:  body.UserName,
		Phone:     body.Phone,
		Source:    body.Source,
		InviterID: body.InviterID,
		StoreCode: body.StoreCode,
		Website:   body.Website,
		Platform:  body.Platform,
		Concerns:  body.Concerns,
	}

	return v
}

// NewUserLoginLogin builds a user service user_login endpoint payload.
func NewUserLoginLogin(body *UserLoginRequestBody) *user.Login {
	v := &user.Login{
		Email:     *body.Email,
		Password:  *body.Password,
		StoreCode: body.StoreCode,
	}

	return v
}

// NewUserModifyPasswordModifyPassword builds a user service
// user_modify_password endpoint payload.
func NewUserModifyPasswordModifyPassword(body *UserModifyPasswordRequestBody, authorization *string, token *string) *user.ModifyPassword {
	v := &user.ModifyPassword{
		Email:       *body.Email,
		Password:    *body.Password,
		OldPassword: *body.OldPassword,
	}
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewUserForgetPasswordForgetPassword builds a user service
// user_forget_password endpoint payload.
func NewUserForgetPasswordForgetPassword(body *UserForgetPasswordRequestBody) *user.ForgetPassword {
	v := &user.ForgetPassword{
		Email:    *body.Email,
		Password: *body.Password,
		Code:     *body.Code,
		Action:   body.Action,
	}

	return v
}

// NewUserValidateValidateEmail builds a user service user_validate endpoint
// payload.
func NewUserValidateValidateEmail(body *UserValidateRequestBody) *user.ValidateEmail {
	v := &user.ValidateEmail{
		Email: *body.Email,
	}

	return v
}

// NewUserLogoutLogout builds a user service user_logout endpoint payload.
func NewUserLogoutLogout(authorization *string, token *string) *user.Logout {
	v := &user.Logout{}
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewGetUserInfoAuthToken builds a user service get_user_info endpoint payload.
func NewGetUserInfoAuthToken(authorization *string, token *string) *user.AuthToken {
	v := &user.AuthToken{}
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewUpdateUserInfoUserInfo builds a user service update_user_info endpoint
// payload.
func NewUpdateUserInfoUserInfo(body *UpdateUserInfoRequestBody, authorization *string, token *string) *user.UserInfo {
	v := &user.UserInfo{
		UserName: *body.UserName,
	}
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewPermissionsAuthToken builds a user service permissions endpoint payload.
func NewPermissionsAuthToken(authorization *string, token *string) *user.AuthToken {
	v := &user.AuthToken{}
	v.Authorization = authorization
	v.Token = token

	return v
}

// ValidateUserSignupRequestBody runs the validations defined on
// user_signup_request_body
func ValidateUserSignupRequestBody(body *UserSignupRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.InviterID != nil {
		if *body.InviterID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.inviter_id", *body.InviterID, 1, true))
		}
	}
	if body.StoreCode != nil {
		if utf8.RuneCountInString(*body.StoreCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.store_code", *body.StoreCode, utf8.RuneCountInString(*body.StoreCode), 1, true))
		}
	}
	if body.Website != nil {
		if utf8.RuneCountInString(*body.Website) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.website", *body.Website, utf8.RuneCountInString(*body.Website), 1, true))
		}
	}
	if body.Platform != nil {
		if utf8.RuneCountInString(*body.Platform) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.platform", *body.Platform, utf8.RuneCountInString(*body.Platform), 1, true))
		}
	}
	if body.Concerns != nil {
		if utf8.RuneCountInString(*body.Concerns) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.concerns", *body.Concerns, utf8.RuneCountInString(*body.Concerns), 1, true))
		}
	}
	return
}

// ValidateUserLoginRequestBody runs the validations defined on
// user_login_request_body
func ValidateUserLoginRequestBody(body *UserLoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.StoreCode != nil {
		if utf8.RuneCountInString(*body.StoreCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.store_code", *body.StoreCode, utf8.RuneCountInString(*body.StoreCode), 1, true))
		}
	}
	return
}

// ValidateUserModifyPasswordRequestBody runs the validations defined on
// user_modify_password_request_body
func ValidateUserModifyPasswordRequestBody(body *UserModifyPasswordRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("old_password", "body"))
	}
	return
}

// ValidateUserForgetPasswordRequestBody runs the validations defined on
// user_forget_password_request_body
func ValidateUserForgetPasswordRequestBody(body *UserForgetPasswordRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Action != nil {
		if utf8.RuneCountInString(*body.Action) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.action", *body.Action, utf8.RuneCountInString(*body.Action), 1, true))
		}
	}
	return
}

// ValidateUserValidateRequestBody runs the validations defined on
// user_validate_request_body
func ValidateUserValidateRequestBody(body *UserValidateRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateUpdateUserInfoRequestBody runs the validations defined on
// update_user_info_request_body
func ValidateUpdateUserInfoRequestBody(body *UpdateUserInfoRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_name", "body"))
	}
	return
}
