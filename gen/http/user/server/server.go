// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user HTTP server
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	user "goa/gen/user"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the user service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	UserSignup         http.Handler
	UserLogin          http.Handler
	UserModifyPassword http.Handler
	UserForgetPassword http.Handler
	UserValidate       http.Handler
	UserLogout         http.Handler
	GetUserInfo        http.Handler
	UpdateUserInfo     http.Handler
	Permissions        http.Handler
	CORS               http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the user service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *user.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"UserSignup", "POST", "/v1/users/signup"},
			{"UserLogin", "POST", "/v1/users/login"},
			{"UserModifyPassword", "POST", "/v1/users/modify-password"},
			{"UserForgetPassword", "POST", "/v1/users/forget-password"},
			{"UserValidate", "POST", "/v1/users/validate-email"},
			{"UserLogout", "POST", "/v1/users/logout"},
			{"GetUserInfo", "GET", "/v1/users"},
			{"UpdateUserInfo", "PUT", "/v1/users"},
			{"Permissions", "GET", "/v1/users/permissions"},
			{"CORS", "OPTIONS", "/v1/users/signup"},
			{"CORS", "OPTIONS", "/v1/users/login"},
			{"CORS", "OPTIONS", "/v1/users/modify-password"},
			{"CORS", "OPTIONS", "/v1/users/forget-password"},
			{"CORS", "OPTIONS", "/v1/users/validate-email"},
			{"CORS", "OPTIONS", "/v1/users/logout"},
			{"CORS", "OPTIONS", "/v1/users"},
			{"CORS", "OPTIONS", "/v1/users/permissions"},
		},
		UserSignup:         NewUserSignupHandler(e.UserSignup, mux, decoder, encoder, errhandler, formatter),
		UserLogin:          NewUserLoginHandler(e.UserLogin, mux, decoder, encoder, errhandler, formatter),
		UserModifyPassword: NewUserModifyPasswordHandler(e.UserModifyPassword, mux, decoder, encoder, errhandler, formatter),
		UserForgetPassword: NewUserForgetPasswordHandler(e.UserForgetPassword, mux, decoder, encoder, errhandler, formatter),
		UserValidate:       NewUserValidateHandler(e.UserValidate, mux, decoder, encoder, errhandler, formatter),
		UserLogout:         NewUserLogoutHandler(e.UserLogout, mux, decoder, encoder, errhandler, formatter),
		GetUserInfo:        NewGetUserInfoHandler(e.GetUserInfo, mux, decoder, encoder, errhandler, formatter),
		UpdateUserInfo:     NewUpdateUserInfoHandler(e.UpdateUserInfo, mux, decoder, encoder, errhandler, formatter),
		Permissions:        NewPermissionsHandler(e.Permissions, mux, decoder, encoder, errhandler, formatter),
		CORS:               NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "user" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UserSignup = m(s.UserSignup)
	s.UserLogin = m(s.UserLogin)
	s.UserModifyPassword = m(s.UserModifyPassword)
	s.UserForgetPassword = m(s.UserForgetPassword)
	s.UserValidate = m(s.UserValidate)
	s.UserLogout = m(s.UserLogout)
	s.GetUserInfo = m(s.GetUserInfo)
	s.UpdateUserInfo = m(s.UpdateUserInfo)
	s.Permissions = m(s.Permissions)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the user endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUserSignupHandler(mux, h.UserSignup)
	MountUserLoginHandler(mux, h.UserLogin)
	MountUserModifyPasswordHandler(mux, h.UserModifyPassword)
	MountUserForgetPasswordHandler(mux, h.UserForgetPassword)
	MountUserValidateHandler(mux, h.UserValidate)
	MountUserLogoutHandler(mux, h.UserLogout)
	MountGetUserInfoHandler(mux, h.GetUserInfo)
	MountUpdateUserInfoHandler(mux, h.UpdateUserInfo)
	MountPermissionsHandler(mux, h.Permissions)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the user endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUserSignupHandler configures the mux to serve the "user" service
// "user_signup" endpoint.
func MountUserSignupHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/signup", f)
}

// NewUserSignupHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "user_signup" endpoint.
func NewUserSignupHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserSignupRequest(mux, decoder)
		encodeResponse = EncodeUserSignupResponse(encoder)
		encodeError    = EncodeUserSignupError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_signup")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserLoginHandler configures the mux to serve the "user" service
// "user_login" endpoint.
func MountUserLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/login", f)
}

// NewUserLoginHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "user_login" endpoint.
func NewUserLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserLoginRequest(mux, decoder)
		encodeResponse = EncodeUserLoginResponse(encoder)
		encodeError    = EncodeUserLoginError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_login")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserModifyPasswordHandler configures the mux to serve the "user"
// service "user_modify_password" endpoint.
func MountUserModifyPasswordHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/modify-password", f)
}

// NewUserModifyPasswordHandler creates a HTTP handler which loads the HTTP
// request and calls the "user" service "user_modify_password" endpoint.
func NewUserModifyPasswordHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserModifyPasswordRequest(mux, decoder)
		encodeResponse = EncodeUserModifyPasswordResponse(encoder)
		encodeError    = EncodeUserModifyPasswordError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_modify_password")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserForgetPasswordHandler configures the mux to serve the "user"
// service "user_forget_password" endpoint.
func MountUserForgetPasswordHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/forget-password", f)
}

// NewUserForgetPasswordHandler creates a HTTP handler which loads the HTTP
// request and calls the "user" service "user_forget_password" endpoint.
func NewUserForgetPasswordHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserForgetPasswordRequest(mux, decoder)
		encodeResponse = EncodeUserForgetPasswordResponse(encoder)
		encodeError    = EncodeUserForgetPasswordError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_forget_password")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserValidateHandler configures the mux to serve the "user" service
// "user_validate" endpoint.
func MountUserValidateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/validate-email", f)
}

// NewUserValidateHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "user_validate" endpoint.
func NewUserValidateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserValidateRequest(mux, decoder)
		encodeResponse = EncodeUserValidateResponse(encoder)
		encodeError    = EncodeUserValidateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_validate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserLogoutHandler configures the mux to serve the "user" service
// "user_logout" endpoint.
func MountUserLogoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/users/logout", f)
}

// NewUserLogoutHandler creates a HTTP handler which loads the HTTP request and
// calls the "user" service "user_logout" endpoint.
func NewUserLogoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserLogoutRequest(mux, decoder)
		encodeResponse = EncodeUserLogoutResponse(encoder)
		encodeError    = EncodeUserLogoutError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "user_logout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserInfoHandler configures the mux to serve the "user" service
// "get_user_info" endpoint.
func MountGetUserInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/users", f)
}

// NewGetUserInfoHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "get_user_info" endpoint.
func NewGetUserInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetUserInfoRequest(mux, decoder)
		encodeResponse = EncodeGetUserInfoResponse(encoder)
		encodeError    = EncodeGetUserInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_user_info")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateUserInfoHandler configures the mux to serve the "user" service
// "update_user_info" endpoint.
func MountUpdateUserInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/users", f)
}

// NewUpdateUserInfoHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "update_user_info" endpoint.
func NewUpdateUserInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateUserInfoRequest(mux, decoder)
		encodeResponse = EncodeUpdateUserInfoResponse(encoder)
		encodeError    = EncodeUpdateUserInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_user_info")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPermissionsHandler configures the mux to serve the "user" service
// "permissions" endpoint.
func MountPermissionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUserOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/users/permissions", f)
}

// NewPermissionsHandler creates a HTTP handler which loads the HTTP request
// and calls the "user" service "permissions" endpoint.
func NewPermissionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePermissionsRequest(mux, decoder)
		encodeResponse = EncodePermissionsResponse(encoder)
		encodeError    = EncodePermissionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "permissions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "user")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service user.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleUserOrigin(h)
	mux.Handle("OPTIONS", "/v1/users/signup", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/login", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/modify-password", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/forget-password", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/validate-email", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/logout", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/users/permissions", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleUserOrigin applies the CORS response headers corresponding to the
// origin for the service user.
func HandleUserOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, Accept, Origin, Authorization, X-Api-Version, x-nss-tenant-id")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
