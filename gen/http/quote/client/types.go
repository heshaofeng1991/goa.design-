// Code generated by goa v3.6.2, DO NOT EDIT.
//
// quote HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	quote "goa/gen/quote"

	goa "goa.design/goa/v3/pkg"
)

// UpdateChannelCostStatusRequestBody is the type of the "quote" service
// "UpdateChannelCostStatus" endpoint HTTP request body.
type UpdateChannelCostStatusRequestBody struct {
	// 渠道ID
	Ids []int64 `form:"ids" json:"ids" xml:"ids"`
	// 排除国际二字码
	CountryCodes []string `form:"country_codes" json:"country_codes" xml:"country_codes"`
	// 状态（0 不启用 1 启用）
	Status bool `form:"status" json:"status" xml:"status"`
}

// UpdateChannelCostStatusResponseBody is the type of the "quote" service
// "UpdateChannelCostStatus" endpoint HTTP response body.
type UpdateChannelCostStatusResponseBody struct {
	// data
	Data *UpdateCustomerConfigDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateChannelCostStatusUnauthorizedResponseBody is the type of the "quote"
// service "UpdateChannelCostStatus" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateChannelCostStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateCustomerConfigDataResponseBody is used to define fields on response
// body types.
type UpdateCustomerConfigDataResponseBody struct {
	// 状态（0 更新成功 1 更新失败）
	Status *int32 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewUpdateChannelCostStatusRequestBody builds the HTTP request body from the
// payload of the "UpdateChannelCostStatus" endpoint of the "quote" service.
func NewUpdateChannelCostStatusRequestBody(p *quote.UpdateChannelCostStatusReq) *UpdateChannelCostStatusRequestBody {
	body := &UpdateChannelCostStatusRequestBody{
		Status: p.Status,
	}
	if p.Ids != nil {
		body.Ids = make([]int64, len(p.Ids))
		for i, val := range p.Ids {
			body.Ids[i] = val
		}
	}
	if p.CountryCodes != nil {
		body.CountryCodes = make([]string, len(p.CountryCodes))
		for i, val := range p.CountryCodes {
			body.CountryCodes[i] = val
		}
	}
	return body
}

// NewUpdateChannelCostStatusRspOK builds a "quote" service
// "UpdateChannelCostStatus" endpoint result from a HTTP "OK" response.
func NewUpdateChannelCostStatusRspOK(body *UpdateChannelCostStatusResponseBody) *quote.UpdateChannelCostStatusRsp {
	v := &quote.UpdateChannelCostStatusRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUpdateCustomerConfigDataResponseBodyToQuoteUpdateCustomerConfigData(body.Data)
	}

	return v
}

// NewUpdateChannelCostStatusUnauthorized builds a quote service
// UpdateChannelCostStatus endpoint Unauthorized error.
func NewUpdateChannelCostStatusUnauthorized(body *UpdateChannelCostStatusUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUpdateChannelCostStatusResponseBody runs the validations defined on
// UpdateChannelCostStatusResponseBody
func ValidateUpdateChannelCostStatusResponseBody(body *UpdateChannelCostStatusResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUpdateCustomerConfigDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateChannelCostStatusUnauthorizedResponseBody runs the validations
// defined on UpdateChannelCostStatus_Unauthorized_Response_Body
func ValidateUpdateChannelCostStatusUnauthorizedResponseBody(body *UpdateChannelCostStatusUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateCustomerConfigDataResponseBody runs the validations defined on
// UpdateCustomerConfigDataResponseBody
func ValidateUpdateCustomerConfigDataResponseBody(body *UpdateCustomerConfigDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
