// Code generated by goa v3.6.2, DO NOT EDIT.
//
// quote HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	quote "goa/gen/quote"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "quote" service "get" endpoint HTTP
// response body.
type GetResponseBody []*QuoteResponse

// GetUnauthorizedResponseBody is the type of the "quote" service "get"
// endpoint HTTP response body for the "Unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// QuoteResponse is used to define fields on response body types.
type QuoteResponse struct {
	// Channel Display Name
	ChannelName *string `form:"channel_name,omitempty" json:"channel_name,omitempty" xml:"channel_name,omitempty"`
	// Channel ID
	ChannelID *int32 `form:"channel_id,omitempty" json:"channel_id,omitempty" xml:"channel_id,omitempty"`
	// Channel type
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Min Normal Days
	MinNormalDays *int32 `form:"min_normal_days,omitempty" json:"min_normal_days,omitempty" xml:"min_normal_days,omitempty"`
	// Max Normal Days
	MaxNormalDays *int32 `form:"max_normal_days,omitempty" json:"max_normal_days,omitempty" xml:"max_normal_days,omitempty"`
	// Total cost (decimal(15,2))
	TotalCost *float64 `form:"total_cost,omitempty" json:"total_cost,omitempty" xml:"total_cost,omitempty"`
	Currency  *string  `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// weight(unit g)
	Weight *int `form:"weight,omitempty" json:"weight,omitempty" xml:"weight,omitempty"`
}

// NewGetQuoteOK builds a "quote" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetQuoteOK(body []*QuoteResponse) []*quote.Quote {
	v := make([]*quote.Quote, len(body))
	for i, val := range body {
		v[i] = unmarshalQuoteResponseToQuoteQuote(val)
	}

	return v
}

// NewGetUnauthorized builds a quote service get endpoint Unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_Unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateQuoteResponse runs the validations defined on QuoteResponse
func ValidateQuoteResponse(body *QuoteResponse) (err error) {
	if body.ChannelName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("channel_name", "body"))
	}
	if body.ChannelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("channel_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.MinNormalDays == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_normal_days", "body"))
	}
	if body.MaxNormalDays == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("max_normal_days", "body"))
	}
	if body.TotalCost == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_cost", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency", "body"))
	}
	if body.Weight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("weight", "body"))
	}
	return
}
