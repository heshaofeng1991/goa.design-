// Code generated by goa v3.6.2, DO NOT EDIT.
//
// quote HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	quote "goa/gen/quote"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildUpdateChannelCostStatusRequest instantiates a HTTP request object with
// method and path set to call the "quote" service "UpdateChannelCostStatus"
// endpoint
func (c *Client) BuildUpdateChannelCostStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateChannelCostStatusQuotePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("quote", "UpdateChannelCostStatus", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateChannelCostStatusRequest returns an encoder for requests sent to
// the quote UpdateChannelCostStatus server.
func EncodeUpdateChannelCostStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*quote.UpdateChannelCostStatusReq)
		if !ok {
			return goahttp.ErrInvalidType("quote", "UpdateChannelCostStatus", "*quote.UpdateChannelCostStatusReq", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateChannelCostStatusRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("quote", "UpdateChannelCostStatus", err)
		}
		return nil
	}
}

// DecodeUpdateChannelCostStatusResponse returns a decoder for responses
// returned by the quote UpdateChannelCostStatus endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeUpdateChannelCostStatusResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateChannelCostStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateChannelCostStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("quote", "UpdateChannelCostStatus", err)
			}
			err = ValidateUpdateChannelCostStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("quote", "UpdateChannelCostStatus", err)
			}
			res := NewUpdateChannelCostStatusRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateChannelCostStatusUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("quote", "UpdateChannelCostStatus", err)
			}
			err = ValidateUpdateChannelCostStatusUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("quote", "UpdateChannelCostStatus", err)
			}
			return nil, NewUpdateChannelCostStatusUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("quote", "UpdateChannelCostStatus", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUpdateCustomerConfigDataResponseBodyToQuoteUpdateCustomerConfigData
// builds a value of type *quote.UpdateCustomerConfigData from a value of type
// *UpdateCustomerConfigDataResponseBody.
func unmarshalUpdateCustomerConfigDataResponseBodyToQuoteUpdateCustomerConfigData(v *UpdateCustomerConfigDataResponseBody) *quote.UpdateCustomerConfigData {
	if v == nil {
		return nil
	}
	res := &quote.UpdateCustomerConfigData{
		Status: *v.Status,
	}

	return res
}
