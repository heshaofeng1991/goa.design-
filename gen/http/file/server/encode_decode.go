// Code generated by goa v3.6.2, DO NOT EDIT.
//
// file HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	file "goa/gen/file"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUploadImageResponse returns an encoder for responses returned by the
// file upload_image endpoint.
func EncodeUploadImageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*file.UploadURL)
		enc := encoder(ctx, w)
		body := NewUploadImageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadImageRequest returns a decoder for requests sent to the file
// upload_image endpoint.
func DecodeUploadImageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload *file.UploadFile
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// NewFileUploadImageDecoder returns a decoder to decode the multipart request
// for the "file" service "upload_image" endpoint.
func NewFileUploadImageDecoder(mux goahttp.Muxer, fileUploadImageDecoderFn FileUploadImageDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(**file.UploadFile)
			if err := fileUploadImageDecoderFn(mr, p); err != nil {
				return err
			}

			var (
				authorization *string
				token         *string
			)
			authorizationRaw := r.Header.Get("Authorization")
			if authorizationRaw != "" {
				authorization = &authorizationRaw
			}
			tokenRaw := r.Header.Get("Authorization")
			if tokenRaw != "" {
				token = &tokenRaw
			}
			(*p).Authorization = authorization
			(*p).Token = token
			return nil
		})
	}
}

// EncodeUploadImageError returns an encoder for errors returned by the
// upload_image file endpoint.
func EncodeUploadImageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUploadImageUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalFileUploadURLDataToUploadURLDataResponseBody builds a value of type
// *UploadURLDataResponseBody from a value of type *file.UploadURLData.
func marshalFileUploadURLDataToUploadURLDataResponseBody(v *file.UploadURLData) *UploadURLDataResponseBody {
	if v == nil {
		return nil
	}
	res := &UploadURLDataResponseBody{
		URL: v.URL,
	}

	return res
}
