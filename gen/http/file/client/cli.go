// Code generated by goa v3.6.2, DO NOT EDIT.
//
// file HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	file "goa/gen/file"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildUploadImagePayload builds the payload for the file upload_image
// endpoint from CLI flags.
func BuildUploadImagePayload(fileUploadImageBody string, fileUploadImageAuthorization string, fileUploadImageToken string) (*file.UploadFile, error) {
	var err error
	var body UploadImageRequestBody
	{
		err = json.Unmarshal([]byte(fileUploadImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file\": \"1.jpg\",\n      \"file_name\": \"xxx\"\n   }'")
		}
		if body.File == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
		}
		if len(body.File) > 864000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.file", body.File, len(body.File), 864000, false))
		}
		if utf8.RuneCountInString(body.FileName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.file_name", body.FileName, utf8.RuneCountInString(body.FileName), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if fileUploadImageAuthorization != "" {
			authorization = &fileUploadImageAuthorization
		}
	}
	var token *string
	{
		if fileUploadImageToken != "" {
			token = &fileUploadImageToken
		}
	}
	v := &file.UploadFile{
		File:     body.File,
		FileName: body.FileName,
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}
