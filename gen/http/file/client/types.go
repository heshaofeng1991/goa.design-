// Code generated by goa v3.6.2, DO NOT EDIT.
//
// file HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	file "goa/gen/file"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UploadImageRequestBody is the type of the "file" service "upload_image"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// file
	File []byte `form:"file" json:"file" xml:"file"`
	// file name
	FileName string `form:"file_name" json:"file_name" xml:"file_name"`
}

// UploadImageResponseBody is the type of the "file" service "upload_image"
// endpoint HTTP response body.
type UploadImageResponseBody struct {
	// image URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// UploadImageUnauthorizedResponseBody is the type of the "file" service
// "upload_image" endpoint HTTP response body for the "Unauthorized" error.
type UploadImageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewUploadImageRequestBody builds the HTTP request body from the payload of
// the "upload_image" endpoint of the "file" service.
func NewUploadImageRequestBody(p *file.ImageFile) *UploadImageRequestBody {
	body := &UploadImageRequestBody{
		File:     p.File,
		FileName: p.FileName,
	}
	return body
}

// NewUploadImageImageURLOK builds a "file" service "upload_image" endpoint
// result from a HTTP "OK" response.
func NewUploadImageImageURLOK(body *UploadImageResponseBody) *file.ImageURL {
	v := &file.ImageURL{
		URL: *body.URL,
	}

	return v
}

// NewUploadImageUnauthorized builds a file service upload_image endpoint
// Unauthorized error.
func NewUploadImageUnauthorized(body *UploadImageUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUploadImageResponseBody runs the validations defined on
// upload_image_response_body
func ValidateUploadImageResponseBody(body *UploadImageResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.URL != nil {
		if utf8.RuneCountInString(*body.URL) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.url", *body.URL, utf8.RuneCountInString(*body.URL), 300, false))
		}
	}
	return
}

// ValidateUploadImageUnauthorizedResponseBody runs the validations defined on
// upload_image_Unauthorized_response_body
func ValidateUploadImageUnauthorizedResponseBody(body *UploadImageUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
