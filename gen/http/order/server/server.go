// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP server
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	order "goa/gen/order"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the order service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	CreateInboundOrder  http.Handler
	UpdateInboundOrder  http.Handler
	CreateOutboundOrder http.Handler
	UpdateOutboundOrder http.Handler
	CreatePickupOrder   http.Handler
	GetInboundOrder     http.Handler
	GetOutboundOrder    http.Handler
	CORS                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the order service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *order.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateInboundOrder", "POST", "/inbound-orders"},
			{"UpdateInboundOrder", "PUT", "/inbound-orders"},
			{"CreateOutboundOrder", "POST", "/outbound-orders"},
			{"UpdateOutboundOrder", "PUT", "/outbound-orders"},
			{"CreatePickupOrder", "POST", "/pickup-orders"},
			{"GetInboundOrder", "GET", "/inbound-orders"},
			{"GetOutboundOrder", "GET", "/outbound-orders"},
			{"CORS", "OPTIONS", "/inbound-orders"},
			{"CORS", "OPTIONS", "/outbound-orders"},
			{"CORS", "OPTIONS", "/pickup-orders"},
		},
		CreateInboundOrder:  NewCreateInboundOrderHandler(e.CreateInboundOrder, mux, decoder, encoder, errhandler, formatter),
		UpdateInboundOrder:  NewUpdateInboundOrderHandler(e.UpdateInboundOrder, mux, decoder, encoder, errhandler, formatter),
		CreateOutboundOrder: NewCreateOutboundOrderHandler(e.CreateOutboundOrder, mux, decoder, encoder, errhandler, formatter),
		UpdateOutboundOrder: NewUpdateOutboundOrderHandler(e.UpdateOutboundOrder, mux, decoder, encoder, errhandler, formatter),
		CreatePickupOrder:   NewCreatePickupOrderHandler(e.CreatePickupOrder, mux, decoder, encoder, errhandler, formatter),
		GetInboundOrder:     NewGetInboundOrderHandler(e.GetInboundOrder, mux, decoder, encoder, errhandler, formatter),
		GetOutboundOrder:    NewGetOutboundOrderHandler(e.GetOutboundOrder, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "order" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateInboundOrder = m(s.CreateInboundOrder)
	s.UpdateInboundOrder = m(s.UpdateInboundOrder)
	s.CreateOutboundOrder = m(s.CreateOutboundOrder)
	s.UpdateOutboundOrder = m(s.UpdateOutboundOrder)
	s.CreatePickupOrder = m(s.CreatePickupOrder)
	s.GetInboundOrder = m(s.GetInboundOrder)
	s.GetOutboundOrder = m(s.GetOutboundOrder)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the order endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateInboundOrderHandler(mux, h.CreateInboundOrder)
	MountUpdateInboundOrderHandler(mux, h.UpdateInboundOrder)
	MountCreateOutboundOrderHandler(mux, h.CreateOutboundOrder)
	MountUpdateOutboundOrderHandler(mux, h.UpdateOutboundOrder)
	MountCreatePickupOrderHandler(mux, h.CreatePickupOrder)
	MountGetInboundOrderHandler(mux, h.GetInboundOrder)
	MountGetOutboundOrderHandler(mux, h.GetOutboundOrder)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the order endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateInboundOrderHandler configures the mux to serve the "order"
// service "create_inbound_order" endpoint.
func MountCreateInboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/inbound-orders", f)
}

// NewCreateInboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "create_inbound_order" endpoint.
func NewCreateInboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateInboundOrderRequest(mux, decoder)
		encodeResponse = EncodeCreateInboundOrderResponse(encoder)
		encodeError    = EncodeCreateInboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_inbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateInboundOrderHandler configures the mux to serve the "order"
// service "update_inbound_order" endpoint.
func MountUpdateInboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/inbound-orders", f)
}

// NewUpdateInboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "update_inbound_order" endpoint.
func NewUpdateInboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateInboundOrderRequest(mux, decoder)
		encodeResponse = EncodeUpdateInboundOrderResponse(encoder)
		encodeError    = EncodeUpdateInboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_inbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateOutboundOrderHandler configures the mux to serve the "order"
// service "create_outbound_order" endpoint.
func MountCreateOutboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/outbound-orders", f)
}

// NewCreateOutboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "create_outbound_order" endpoint.
func NewCreateOutboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateOutboundOrderRequest(mux, decoder)
		encodeResponse = EncodeCreateOutboundOrderResponse(encoder)
		encodeError    = EncodeCreateOutboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_outbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateOutboundOrderHandler configures the mux to serve the "order"
// service "update_outbound_order" endpoint.
func MountUpdateOutboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/outbound-orders", f)
}

// NewUpdateOutboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "update_outbound_order" endpoint.
func NewUpdateOutboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateOutboundOrderRequest(mux, decoder)
		encodeResponse = EncodeUpdateOutboundOrderResponse(encoder)
		encodeError    = EncodeUpdateOutboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_outbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreatePickupOrderHandler configures the mux to serve the "order"
// service "create_pickup_order" endpoint.
func MountCreatePickupOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/pickup-orders", f)
}

// NewCreatePickupOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "create_pickup_order" endpoint.
func NewCreatePickupOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePickupOrderRequest(mux, decoder)
		encodeResponse = EncodeCreatePickupOrderResponse(encoder)
		encodeError    = EncodeCreatePickupOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_pickup_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetInboundOrderHandler configures the mux to serve the "order" service
// "get_inbound_order" endpoint.
func MountGetInboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/inbound-orders", f)
}

// NewGetInboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "get_inbound_order" endpoint.
func NewGetInboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetInboundOrderRequest(mux, decoder)
		encodeResponse = EncodeGetInboundOrderResponse(encoder)
		encodeError    = EncodeGetInboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_inbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOutboundOrderHandler configures the mux to serve the "order" service
// "get_outbound_order" endpoint.
func MountGetOutboundOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/outbound-orders", f)
}

// NewGetOutboundOrderHandler creates a HTTP handler which loads the HTTP
// request and calls the "order" service "get_outbound_order" endpoint.
func NewGetOutboundOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOutboundOrderRequest(mux, decoder)
		encodeResponse = EncodeGetOutboundOrderResponse(encoder)
		encodeError    = EncodeGetOutboundOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_outbound_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service order.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleOrderOrigin(h)
	mux.Handle("OPTIONS", "/inbound-orders", h.ServeHTTP)
	mux.Handle("OPTIONS", "/outbound-orders", h.ServeHTTP)
	mux.Handle("OPTIONS", "/pickup-orders", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleOrderOrigin applies the CORS response headers corresponding to the
// origin for the service order.
func HandleOrderOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "Authorization")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
