// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	order "goa/gen/order"
	"io"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateInboundOrderResponse returns an encoder for responses returned
// by the order create_inbound_order endpoint.
func EncodeCreateInboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*order.InboundOrderRsp)
		enc := encoder(ctx, w)
		body := NewCreateInboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateInboundOrderRequest returns a decoder for requests sent to the
// order create_inbound_order endpoint.
func DecodeCreateInboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateInboundOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateInboundOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateInboundOrderInboundOrder(&body)

		return payload, nil
	}
}

// EncodeCreateInboundOrderError returns an encoder for errors returned by the
// create_inbound_order order endpoint.
func EncodeCreateInboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateInboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateInboundOrderResponse returns an encoder for responses returned
// by the order update_inbound_order endpoint.
func EncodeUpdateInboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*order.UpdateResponse)
		enc := encoder(ctx, w)
		body := NewUpdateInboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateInboundOrderRequest returns a decoder for requests sent to the
// order update_inbound_order endpoint.
func DecodeUpdateInboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateInboundOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateInboundOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateInboundOrderInboundOrder(&body)

		return payload, nil
	}
}

// EncodeUpdateInboundOrderError returns an encoder for errors returned by the
// update_inbound_order order endpoint.
func EncodeUpdateInboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateInboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateOutboundOrderResponse returns an encoder for responses returned
// by the order create_outbound_order endpoint.
func EncodeCreateOutboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*order.OutboundOrderRsp)
		enc := encoder(ctx, w)
		body := NewCreateOutboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateOutboundOrderRequest returns a decoder for requests sent to the
// order create_outbound_order endpoint.
func DecodeCreateOutboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateOutboundOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateOutboundOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateOutboundOrderOutboundOrder(&body)

		return payload, nil
	}
}

// EncodeCreateOutboundOrderError returns an encoder for errors returned by the
// create_outbound_order order endpoint.
func EncodeCreateOutboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOutboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateOutboundOrderResponse returns an encoder for responses returned
// by the order update_outbound_order endpoint.
func EncodeUpdateOutboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*order.UpdateResponse)
		enc := encoder(ctx, w)
		body := NewUpdateOutboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateOutboundOrderRequest returns a decoder for requests sent to the
// order update_outbound_order endpoint.
func DecodeUpdateOutboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateOutboundOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateOutboundOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateOutboundOrderOutboundOrder(&body)

		return payload, nil
	}
}

// EncodeUpdateOutboundOrderError returns an encoder for errors returned by the
// update_outbound_order order endpoint.
func EncodeUpdateOutboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateOutboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreatePickupOrderResponse returns an encoder for responses returned by
// the order create_pickup_order endpoint.
func EncodeCreatePickupOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*order.PickupOrderRsp)
		enc := encoder(ctx, w)
		body := NewCreatePickupOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePickupOrderRequest returns a decoder for requests sent to the
// order create_pickup_order endpoint.
func DecodeCreatePickupOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreatePickupOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePickupOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreatePickupOrderPickupOrder(&body)

		return payload, nil
	}
}

// EncodeCreatePickupOrderError returns an encoder for errors returned by the
// create_pickup_order order endpoint.
func EncodeCreatePickupOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreatePickupOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetInboundOrderResponse returns an encoder for responses returned by
// the order get_inbound_order endpoint.
func EncodeGetInboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*order.InboundOrderResponse)
		enc := encoder(ctx, w)
		body := NewGetInboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetInboundOrderRequest returns a decoder for requests sent to the
// order get_inbound_order endpoint.
func DecodeGetInboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			clientOrderID string
			err           error
		)
		clientOrderID = r.URL.Query().Get("client_order_id")
		if clientOrderID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("client_order_id", "query string"))
		}
		if utf8.RuneCountInString(clientOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("clientOrderID", clientOrderID, utf8.RuneCountInString(clientOrderID), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetInboundOrderGetOrder(clientOrderID)

		return payload, nil
	}
}

// EncodeGetInboundOrderError returns an encoder for errors returned by the
// get_inbound_order order endpoint.
func EncodeGetInboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetInboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOutboundOrderResponse returns an encoder for responses returned by
// the order get_outbound_order endpoint.
func EncodeGetOutboundOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*order.OrderRsp)
		enc := encoder(ctx, w)
		body := NewGetOutboundOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetOutboundOrderRequest returns a decoder for requests sent to the
// order get_outbound_order endpoint.
func DecodeGetOutboundOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			clientOrderID string
			err           error
		)
		clientOrderID = r.URL.Query().Get("client_order_id")
		if clientOrderID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("client_order_id", "query string"))
		}
		if utf8.RuneCountInString(clientOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("clientOrderID", clientOrderID, utf8.RuneCountInString(clientOrderID), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOutboundOrderGetOrder(clientOrderID)

		return payload, nil
	}
}

// EncodeGetOutboundOrderError returns an encoder for errors returned by the
// get_outbound_order order endpoint.
func EncodeGetOutboundOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetOutboundOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalItemRequestBodyToOrderItem builds a value of type *order.Item from
// a value of type *ItemRequestBody.
func unmarshalItemRequestBodyToOrderItem(v *ItemRequestBody) *order.Item {
	res := &order.Item{
		ProductName: *v.ProductName,
		ProductSku:  *v.ProductSku,
		Barcode:     *v.Barcode,
		Qty:         *v.Qty,
	}

	return res
}

// unmarshalShippingAddressRequestBodyToOrderShippingAddress builds a value of
// type *order.ShippingAddress from a value of type *ShippingAddressRequestBody.
func unmarshalShippingAddressRequestBodyToOrderShippingAddress(v *ShippingAddressRequestBody) *order.ShippingAddress {
	res := &order.ShippingAddress{
		FirstName:   *v.FirstName,
		LastName:    *v.LastName,
		PhoneNumber: *v.PhoneNumber,
		CountryName: *v.CountryName,
		CountryCode: *v.CountryCode,
		StateName:   *v.StateName,
		StateCode:   *v.StateCode,
		Address1:    *v.Address1,
		Address2:    *v.Address2,
		CityName:    *v.CityName,
		ZipCode:     *v.ZipCode,
		Name:        v.Name,
	}

	return res
}

// unmarshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem builds a value
// of type *order.OutboundOrderItem from a value of type
// *OutboundOrderItemRequestBody.
func unmarshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(v *OutboundOrderItemRequestBody) *order.OutboundOrderItem {
	res := &order.OutboundOrderItem{
		ProductName:        *v.ProductName,
		ProductSku:         *v.ProductSku,
		ProductPrice:       *v.ProductPrice,
		Qty:                *v.Qty,
		HsCode:             *v.HsCode,
		DeclaredCnName:     *v.DeclaredCnName,
		DeclaredEnName:     *v.DeclaredEnName,
		DeclaredValueInUsd: *v.DeclaredValueInUsd,
		ProductWeight:      *v.ProductWeight,
		ProductLength:      *v.ProductLength,
		ProductWidth:       *v.ProductWidth,
		ProductHeight:      *v.ProductHeight,
		Barcode:            *v.Barcode,
		DeclaredValueInEur: *v.DeclaredValueInEur,
	}
	res.ProductAttributes = make([]string, len(v.ProductAttributes))
	for i, val := range v.ProductAttributes {
		res.ProductAttributes[i] = val
	}

	return res
}

// marshalOrderInboundOrderResponseToInboundOrderResponseResponse builds a
// value of type *InboundOrderResponseResponse from a value of type
// *order.InboundOrderResponse.
func marshalOrderInboundOrderResponseToInboundOrderResponseResponse(v *order.InboundOrderResponse) *InboundOrderResponseResponse {
	res := &InboundOrderResponseResponse{
		ClientOrderID:   v.ClientOrderID,
		Status:          v.Status,
		PlatformOrderID: v.PlatformOrderID,
		TrackingNumber:  v.TrackingNumber,
		TrackingURL:     v.TrackingURL,
		Timestamp:       v.Timestamp,
	}
	if v.Items != nil {
		res.Items = make([]*ItemResponse, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = marshalOrderItemToItemResponse(val)
		}
	}

	return res
}

// marshalOrderItemToItemResponse builds a value of type *ItemResponse from a
// value of type *order.Item.
func marshalOrderItemToItemResponse(v *order.Item) *ItemResponse {
	res := &ItemResponse{
		ProductName: v.ProductName,
		ProductSku:  v.ProductSku,
		Barcode:     v.Barcode,
		Qty:         v.Qty,
	}

	return res
}

// marshalOrderOrderRspToOrderRspResponse builds a value of type
// *OrderRspResponse from a value of type *order.OrderRsp.
func marshalOrderOrderRspToOrderRspResponse(v *order.OrderRsp) *OrderRspResponse {
	res := &OrderRspResponse{
		ClientOrderID:   v.ClientOrderID,
		Status:          v.Status,
		PlatformOrderID: v.PlatformOrderID,
		TrackingNumber:  v.TrackingNumber,
		TrackingURL:     v.TrackingURL,
	}
	if v.Items != nil {
		res.Items = make([]*OutboundOrderItemResponse, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = marshalOrderOutboundOrderItemToOutboundOrderItemResponse(val)
		}
	}

	return res
}

// marshalOrderOutboundOrderItemToOutboundOrderItemResponse builds a value of
// type *OutboundOrderItemResponse from a value of type
// *order.OutboundOrderItem.
func marshalOrderOutboundOrderItemToOutboundOrderItemResponse(v *order.OutboundOrderItem) *OutboundOrderItemResponse {
	res := &OutboundOrderItemResponse{
		ProductName:        v.ProductName,
		ProductSku:         v.ProductSku,
		ProductPrice:       v.ProductPrice,
		Qty:                v.Qty,
		HsCode:             v.HsCode,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		ProductWeight:      v.ProductWeight,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		Barcode:            v.Barcode,
		DeclaredValueInEur: v.DeclaredValueInEur,
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}

	return res
}
