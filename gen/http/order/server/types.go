// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	order "goa/gen/order"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateInboundOrderRequestBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP request body.
type CreateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// warehouse id
	WarehouseID *int64 `form:"warehouse_id,omitempty" json:"warehouse_id,omitempty" xml:"warehouse_id,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// requested pickup at
	RequestedPickupAt *string `form:"requested_pickup_at,omitempty" json:"requested_pickup_at,omitempty" xml:"requested_pickup_at,omitempty"`
	// estimated arrival at
	EstimatedArrivalAt *string `form:"estimated_arrival_at,omitempty" json:"estimated_arrival_at,omitempty" xml:"estimated_arrival_at,omitempty"`
	// inbound order items
	Items []*ItemRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// delivery mode(1 direct，2 warehouse)
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// address
	Address *ShippingAddressRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// is pickup
	IsPickup *bool `form:"is_pickup,omitempty" json:"is_pickup,omitempty" xml:"is_pickup,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInboundOrderRequestBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP request body.
type UpdateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// warehouse id
	WarehouseID *int64 `form:"warehouse_id,omitempty" json:"warehouse_id,omitempty" xml:"warehouse_id,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// requested pickup at
	RequestedPickupAt *string `form:"requested_pickup_at,omitempty" json:"requested_pickup_at,omitempty" xml:"requested_pickup_at,omitempty"`
	// estimated arrival at
	EstimatedArrivalAt *string `form:"estimated_arrival_at,omitempty" json:"estimated_arrival_at,omitempty" xml:"estimated_arrival_at,omitempty"`
	// inbound order items
	Items []*ItemRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// delivery mode(1 direct，2 warehouse)
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// address
	Address *ShippingAddressRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// is pickup
	IsPickup *bool `form:"is_pickup,omitempty" json:"is_pickup,omitempty" xml:"is_pickup,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateOutboundOrderRequestBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP request body.
type CreateOutboundOrderRequestBody struct {
	// customer order id
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// total price
	TotalPrice *float64 `form:"total_price,omitempty" json:"total_price,omitempty" xml:"total_price,omitempty"`
	// currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// customer tariff number
	CustomerTariffNumber *string `form:"customer_tariff_number,omitempty" json:"customer_tariff_number,omitempty" xml:"customer_tariff_number,omitempty"`
	// customer tariff number of type
	CustomerTariffNumberType *int `form:"customer_tariff_number_type,omitempty" json:"customer_tariff_number_type,omitempty" xml:"customer_tariff_number_type,omitempty"`
	// enable prepay tariff
	EnablePrepayTariff *bool `form:"enable_prepay_tariff,omitempty" json:"enable_prepay_tariff,omitempty" xml:"enable_prepay_tariff,omitempty"`
	// shipping type(1 Economic, 2 Fastest, 3 Recommended)
	ShippingType *int `form:"shipping_type,omitempty" json:"shipping_type,omitempty" xml:"shipping_type,omitempty"`
	// receiver info
	ReceiverInfo *ShippingAddressRequestBody `form:"receiver_info,omitempty" json:"receiver_info,omitempty" xml:"receiver_info,omitempty"`
	// order items
	Items []*OutboundOrderItemRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// channel id
	ChannelID *int `form:"channel_id,omitempty" json:"channel_id,omitempty" xml:"channel_id,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// 入库单ID
	InboundOrderID *int64 `form:"inbound_order_id,omitempty" json:"inbound_order_id,omitempty" xml:"inbound_order_id,omitempty"`
	// delivery mode(1 direct，2 warehouse)
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// package id
	PackageID *int64 `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
}

// UpdateOutboundOrderRequestBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP request body.
type UpdateOutboundOrderRequestBody struct {
	// customer order id
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// total price
	TotalPrice *float64 `form:"total_price,omitempty" json:"total_price,omitempty" xml:"total_price,omitempty"`
	// currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty" xml:"currency,omitempty"`
	// customer tariff number
	CustomerTariffNumber *string `form:"customer_tariff_number,omitempty" json:"customer_tariff_number,omitempty" xml:"customer_tariff_number,omitempty"`
	// customer tariff number of type
	CustomerTariffNumberType *int `form:"customer_tariff_number_type,omitempty" json:"customer_tariff_number_type,omitempty" xml:"customer_tariff_number_type,omitempty"`
	// enable prepay tariff
	EnablePrepayTariff *bool `form:"enable_prepay_tariff,omitempty" json:"enable_prepay_tariff,omitempty" xml:"enable_prepay_tariff,omitempty"`
	// shipping type(1 Economic, 2 Fastest, 3 Recommended)
	ShippingType *int `form:"shipping_type,omitempty" json:"shipping_type,omitempty" xml:"shipping_type,omitempty"`
	// receiver info
	ReceiverInfo *ShippingAddressRequestBody `form:"receiver_info,omitempty" json:"receiver_info,omitempty" xml:"receiver_info,omitempty"`
	// order items
	Items []*OutboundOrderItemRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// channel id
	ChannelID *int `form:"channel_id,omitempty" json:"channel_id,omitempty" xml:"channel_id,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// 入库单ID
	InboundOrderID *int64 `form:"inbound_order_id,omitempty" json:"inbound_order_id,omitempty" xml:"inbound_order_id,omitempty"`
	// delivery mode(1 direct，2 warehouse)
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// package id
	PackageID *int64 `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
}

// CreatePickupOrderRequestBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP request body.
type CreatePickupOrderRequestBody struct {
	// shipping at
	RequestedPickupAt *string `form:"requested_pickup_at,omitempty" json:"requested_pickup_at,omitempty" xml:"requested_pickup_at,omitempty"`
	// inbound order items
	Items []*ItemRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// address
	Address *ShippingAddressRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// delivery mode(1 direct，2 warehouse)
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
}

// CreateInboundOrderResponseBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP response body.
type CreateInboundOrderResponseBody struct {
	// inbound order id
	InboundOrderID *int64 `form:"inbound_order_id,omitempty" json:"inbound_order_id,omitempty" xml:"inbound_order_id,omitempty"`
	// label url
	LabelURL *string `form:"label_url,omitempty" json:"label_url,omitempty" xml:"label_url,omitempty"`
}

// UpdateInboundOrderResponseBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP response body.
type UpdateInboundOrderResponseBody struct {
	// status
	Status int32 `form:"status" json:"status" xml:"status"`
}

// CreateOutboundOrderResponseBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP response body.
type CreateOutboundOrderResponseBody struct {
	// outbound order id
	OutboundOrderID *int64 `form:"outbound_order_id,omitempty" json:"outbound_order_id,omitempty" xml:"outbound_order_id,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
}

// UpdateOutboundOrderResponseBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP response body.
type UpdateOutboundOrderResponseBody struct {
	// status
	Status int32 `form:"status" json:"status" xml:"status"`
}

// CreatePickupOrderResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body.
type CreatePickupOrderResponseBody struct {
	// error message
	ErrorMsg string `form:"error_msg" json:"error_msg" xml:"error_msg"`
}

// GetInboundOrderResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body.
type GetInboundOrderResponseBody []*InboundOrderResponseResponse

// GetOutboundOrderResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body.
type GetOutboundOrderResponseBody []*OrderRspResponse

// CreateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePickupOrderUnauthorizedResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body for the "Unauthorized"
// error.
type CreatePickupOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body for the "Unauthorized" error.
type GetInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetOutboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body for the "Unauthorized"
// error.
type GetOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// InboundOrderResponseResponse is used to define fields on response body types.
type InboundOrderResponseResponse struct {
	// client order id
	ClientOrderID string `form:"client_order_id" json:"client_order_id" xml:"client_order_id"`
	// order status(1 准备揽件 2 运输中 3 已到库)
	Status int `form:"status" json:"status" xml:"status"`
	// platform order id
	PlatformOrderID int64 `form:"platform_order_id" json:"platform_order_id" xml:"platform_order_id"`
	// tracking number
	TrackingNumber string `form:"tracking_number" json:"tracking_number" xml:"tracking_number"`
	// tracking url
	TrackingURL string `form:"tracking_url" json:"tracking_url" xml:"tracking_url"`
	// items
	Items []*ItemResponse `form:"items" json:"items" xml:"items"`
	// timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// ItemResponse is used to define fields on response body types.
type ItemResponse struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// quality
	Qty int `form:"qty" json:"qty" xml:"qty"`
}

// OrderRspResponse is used to define fields on response body types.
type OrderRspResponse struct {
	// client order id
	ClientOrderID string `form:"client_order_id" json:"client_order_id" xml:"client_order_id"`
	// order status
	Status int `form:"status" json:"status" xml:"status"`
	// platform order id
	PlatformOrderID int64 `form:"platform_order_id" json:"platform_order_id" xml:"platform_order_id"`
	// tracking number
	TrackingNumber string `form:"tracking_number" json:"tracking_number" xml:"tracking_number"`
	// tracking url
	TrackingURL string `form:"tracking_url" json:"tracking_url" xml:"tracking_url"`
	// items
	Items []*OutboundOrderItemResponse `form:"items" json:"items" xml:"items"`
}

// OutboundOrderItemResponse is used to define fields on response body types.
type OutboundOrderItemResponse struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product SKU
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product price
	ProductPrice float64 `form:"product_price" json:"product_price" xml:"product_price"`
	// 产品数量
	Qty int `form:"qty" json:"qty" xml:"qty"`
	// hs code
	HsCode string `form:"hs_code" json:"hs_code" xml:"hs_code"`
	// declared cn name
	DeclaredCnName string `form:"declared_cn_name" json:"declared_cn_name" xml:"declared_cn_name"`
	// declared en name
	DeclaredEnName string `form:"declared_en_name" json:"declared_en_name" xml:"declared_en_name"`
	// declared value in usd
	DeclaredValueInUsd float64 `form:"declared_value_in_usd" json:"declared_value_in_usd" xml:"declared_value_in_usd"`
	// product weight
	ProductWeight float64 `form:"product_weight" json:"product_weight" xml:"product_weight"`
	// product length
	ProductLength int `form:"product_length" json:"product_length" xml:"product_length"`
	// product width
	ProductWidth int `form:"product_width" json:"product_width" xml:"product_width"`
	// product height
	ProductHeight int `form:"product_height" json:"product_height" xml:"product_height"`
	// product attributes
	ProductAttributes []string `form:"product_attributes" json:"product_attributes" xml:"product_attributes"`
	// 产品barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// declared value in eur（€）
	DeclaredValueInEur float64 `form:"declared_value_in_eur" json:"declared_value_in_eur" xml:"declared_value_in_eur"`
}

// ItemRequestBody is used to define fields on request body types.
type ItemRequestBody struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product sku
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
}

// ShippingAddressRequestBody is used to define fields on request body types.
type ShippingAddressRequestBody struct {
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Country Name
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Country code
	CountryCode *string `form:"country_code,omitempty" json:"country_code,omitempty" xml:"country_code,omitempty"`
	// State Name
	StateName *string `form:"state_name,omitempty" json:"state_name,omitempty" xml:"state_name,omitempty"`
	// State code
	StateCode *string `form:"state_code,omitempty" json:"state_code,omitempty" xml:"state_code,omitempty"`
	// Address Line 1
	Address1 *string `form:"address1,omitempty" json:"address1,omitempty" xml:"address1,omitempty"`
	// Address Line 2
	Address2 *string `form:"address2,omitempty" json:"address2,omitempty" xml:"address2,omitempty"`
	// City Name
	CityName *string `form:"city_name,omitempty" json:"city_name,omitempty" xml:"city_name,omitempty"`
	// ZIP code
	ZipCode *string `form:"zip_code,omitempty" json:"zip_code,omitempty" xml:"zip_code,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// OutboundOrderItemRequestBody is used to define fields on request body types.
type OutboundOrderItemRequestBody struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// product weight
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product length
	ProductLength *int `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// product width
	ProductWidth *int `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// product height
	ProductHeight *int `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// 产品barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
}

// NewCreateInboundOrderResponseBody builds the HTTP response body from the
// result of the "create_inbound_order" endpoint of the "order" service.
func NewCreateInboundOrderResponseBody(res *order.InboundOrderRsp) *CreateInboundOrderResponseBody {
	body := &CreateInboundOrderResponseBody{
		InboundOrderID: res.InboundOrderID,
		LabelURL:       res.LabelURL,
	}
	return body
}

// NewUpdateInboundOrderResponseBody builds the HTTP response body from the
// result of the "update_inbound_order" endpoint of the "order" service.
func NewUpdateInboundOrderResponseBody(res *order.UpdateResponse) *UpdateInboundOrderResponseBody {
	body := &UpdateInboundOrderResponseBody{
		Status: res.Status,
	}
	return body
}

// NewCreateOutboundOrderResponseBody builds the HTTP response body from the
// result of the "create_outbound_order" endpoint of the "order" service.
func NewCreateOutboundOrderResponseBody(res *order.OutboundOrderRsp) *CreateOutboundOrderResponseBody {
	body := &CreateOutboundOrderResponseBody{
		OutboundOrderID: res.OutboundOrderID,
		TrackingNumber:  res.TrackingNumber,
	}
	return body
}

// NewUpdateOutboundOrderResponseBody builds the HTTP response body from the
// result of the "update_outbound_order" endpoint of the "order" service.
func NewUpdateOutboundOrderResponseBody(res *order.UpdateResponse) *UpdateOutboundOrderResponseBody {
	body := &UpdateOutboundOrderResponseBody{
		Status: res.Status,
	}
	return body
}

// NewCreatePickupOrderResponseBody builds the HTTP response body from the
// result of the "create_pickup_order" endpoint of the "order" service.
func NewCreatePickupOrderResponseBody(res *order.PickupOrderRsp) *CreatePickupOrderResponseBody {
	body := &CreatePickupOrderResponseBody{
		ErrorMsg: res.ErrorMsg,
	}
	return body
}

// NewGetInboundOrderResponseBody builds the HTTP response body from the result
// of the "get_inbound_order" endpoint of the "order" service.
func NewGetInboundOrderResponseBody(res []*order.InboundOrderResponse) GetInboundOrderResponseBody {
	body := make([]*InboundOrderResponseResponse, len(res))
	for i, val := range res {
		body[i] = marshalOrderInboundOrderResponseToInboundOrderResponseResponse(val)
	}
	return body
}

// NewGetOutboundOrderResponseBody builds the HTTP response body from the
// result of the "get_outbound_order" endpoint of the "order" service.
func NewGetOutboundOrderResponseBody(res []*order.OrderRsp) GetOutboundOrderResponseBody {
	body := make([]*OrderRspResponse, len(res))
	for i, val := range res {
		body[i] = marshalOrderOrderRspToOrderRspResponse(val)
	}
	return body
}

// NewCreateInboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "create_inbound_order" endpoint of the "order"
// service.
func NewCreateInboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *CreateInboundOrderUnauthorizedResponseBody {
	body := &CreateInboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "update_inbound_order" endpoint of the "order"
// service.
func NewUpdateInboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *UpdateInboundOrderUnauthorizedResponseBody {
	body := &UpdateInboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOutboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "create_outbound_order" endpoint of the "order"
// service.
func NewCreateOutboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *CreateOutboundOrderUnauthorizedResponseBody {
	body := &CreateOutboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateOutboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "update_outbound_order" endpoint of the "order"
// service.
func NewUpdateOutboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *UpdateOutboundOrderUnauthorizedResponseBody {
	body := &UpdateOutboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePickupOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "create_pickup_order" endpoint of the "order" service.
func NewCreatePickupOrderUnauthorizedResponseBody(res *goa.ServiceError) *CreatePickupOrderUnauthorizedResponseBody {
	body := &CreatePickupOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_inbound_order" endpoint of the "order" service.
func NewGetInboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *GetInboundOrderUnauthorizedResponseBody {
	body := &GetInboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetOutboundOrderUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_outbound_order" endpoint of the "order" service.
func NewGetOutboundOrderUnauthorizedResponseBody(res *goa.ServiceError) *GetOutboundOrderUnauthorizedResponseBody {
	body := &GetOutboundOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInboundOrderInboundOrder builds a order service
// create_inbound_order endpoint payload.
func NewCreateInboundOrderInboundOrder(body *CreateInboundOrderRequestBody) *order.InboundOrder {
	v := &order.InboundOrder{
		CustomerOrderID:    *body.CustomerOrderID,
		WarehouseID:        *body.WarehouseID,
		CustomerCode:       *body.CustomerCode,
		TrackingNumber:     *body.TrackingNumber,
		RequestedPickupAt:  *body.RequestedPickupAt,
		EstimatedArrivalAt: *body.EstimatedArrivalAt,
		Type:               *body.Type,
		IsPickup:           *body.IsPickup,
		Description:        *body.Description,
		ID:                 body.ID,
	}
	v.Items = make([]*order.Item, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalItemRequestBodyToOrderItem(val)
	}
	v.Address = unmarshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)

	return v
}

// NewUpdateInboundOrderInboundOrder builds a order service
// update_inbound_order endpoint payload.
func NewUpdateInboundOrderInboundOrder(body *UpdateInboundOrderRequestBody) *order.InboundOrder {
	v := &order.InboundOrder{
		CustomerOrderID:    *body.CustomerOrderID,
		WarehouseID:        *body.WarehouseID,
		CustomerCode:       *body.CustomerCode,
		TrackingNumber:     *body.TrackingNumber,
		RequestedPickupAt:  *body.RequestedPickupAt,
		EstimatedArrivalAt: *body.EstimatedArrivalAt,
		Type:               *body.Type,
		IsPickup:           *body.IsPickup,
		Description:        *body.Description,
		ID:                 body.ID,
	}
	v.Items = make([]*order.Item, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalItemRequestBodyToOrderItem(val)
	}
	v.Address = unmarshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)

	return v
}

// NewCreateOutboundOrderOutboundOrder builds a order service
// create_outbound_order endpoint payload.
func NewCreateOutboundOrderOutboundOrder(body *CreateOutboundOrderRequestBody) *order.OutboundOrder {
	v := &order.OutboundOrder{
		CustomerOrderID:          *body.CustomerOrderID,
		CustomerCode:             *body.CustomerCode,
		TotalPrice:               *body.TotalPrice,
		Currency:                 *body.Currency,
		CustomerTariffNumber:     *body.CustomerTariffNumber,
		CustomerTariffNumberType: *body.CustomerTariffNumberType,
		EnablePrepayTariff:       *body.EnablePrepayTariff,
		ShippingType:             *body.ShippingType,
		ChannelID:                *body.ChannelID,
		Description:              *body.Description,
		InboundOrderID:           *body.InboundOrderID,
		Type:                     *body.Type,
		ID:                       body.ID,
		PackageID:                body.PackageID,
	}
	v.ReceiverInfo = unmarshalShippingAddressRequestBodyToOrderShippingAddress(body.ReceiverInfo)
	v.Items = make([]*order.OutboundOrderItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(val)
	}

	return v
}

// NewUpdateOutboundOrderOutboundOrder builds a order service
// update_outbound_order endpoint payload.
func NewUpdateOutboundOrderOutboundOrder(body *UpdateOutboundOrderRequestBody) *order.OutboundOrder {
	v := &order.OutboundOrder{
		CustomerOrderID:          *body.CustomerOrderID,
		CustomerCode:             *body.CustomerCode,
		TotalPrice:               *body.TotalPrice,
		Currency:                 *body.Currency,
		CustomerTariffNumber:     *body.CustomerTariffNumber,
		CustomerTariffNumberType: *body.CustomerTariffNumberType,
		EnablePrepayTariff:       *body.EnablePrepayTariff,
		ShippingType:             *body.ShippingType,
		ChannelID:                *body.ChannelID,
		Description:              *body.Description,
		InboundOrderID:           *body.InboundOrderID,
		Type:                     *body.Type,
		ID:                       body.ID,
		PackageID:                body.PackageID,
	}
	v.ReceiverInfo = unmarshalShippingAddressRequestBodyToOrderShippingAddress(body.ReceiverInfo)
	v.Items = make([]*order.OutboundOrderItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(val)
	}

	return v
}

// NewCreatePickupOrderPickupOrder builds a order service create_pickup_order
// endpoint payload.
func NewCreatePickupOrderPickupOrder(body *CreatePickupOrderRequestBody) *order.PickupOrder {
	v := &order.PickupOrder{
		RequestedPickupAt: *body.RequestedPickupAt,
		Type:              *body.Type,
		CustomerCode:      *body.CustomerCode,
	}
	v.Items = make([]*order.Item, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalItemRequestBodyToOrderItem(val)
	}
	v.Address = unmarshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)

	return v
}

// NewGetInboundOrderGetOrder builds a order service get_inbound_order endpoint
// payload.
func NewGetInboundOrderGetOrder(clientOrderID string) *order.GetOrder {
	v := &order.GetOrder{}
	v.ClientOrderID = clientOrderID

	return v
}

// NewGetOutboundOrderGetOrder builds a order service get_outbound_order
// endpoint payload.
func NewGetOutboundOrderGetOrder(clientOrderID string) *order.GetOrder {
	v := &order.GetOrder{}
	v.ClientOrderID = clientOrderID

	return v
}

// ValidateCreateInboundOrderRequestBody runs the validations defined on
// create_inbound_order_request_body
func ValidateCreateInboundOrderRequestBody(body *CreateInboundOrderRequestBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.WarehouseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("warehouse_id", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.RequestedPickupAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requested_pickup_at", "body"))
	}
	if body.EstimatedArrivalAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("estimated_arrival_at", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.IsPickup == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_pickup", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 1, true))
		}
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 50, false))
		}
	}
	if body.WarehouseID != nil {
		if *body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", *body.WarehouseID, 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.TrackingNumber != nil {
		if utf8.RuneCountInString(*body.TrackingNumber) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", *body.TrackingNumber, utf8.RuneCountInString(*body.TrackingNumber), 50, false))
		}
	}
	if body.RequestedPickupAt != nil {
		if utf8.RuneCountInString(*body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", *body.RequestedPickupAt, utf8.RuneCountInString(*body.RequestedPickupAt), 30, false))
		}
	}
	if body.EstimatedArrivalAt != nil {
		if utf8.RuneCountInString(*body.EstimatedArrivalAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", *body.EstimatedArrivalAt, utf8.RuneCountInString(*body.EstimatedArrivalAt), 30, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2}))
		}
	}
	if body.Address != nil {
		if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateInboundOrderRequestBody runs the validations defined on
// update_inbound_order_request_body
func ValidateUpdateInboundOrderRequestBody(body *UpdateInboundOrderRequestBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.WarehouseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("warehouse_id", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.RequestedPickupAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requested_pickup_at", "body"))
	}
	if body.EstimatedArrivalAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("estimated_arrival_at", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.IsPickup == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_pickup", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 1, true))
		}
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 50, false))
		}
	}
	if body.WarehouseID != nil {
		if *body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", *body.WarehouseID, 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.TrackingNumber != nil {
		if utf8.RuneCountInString(*body.TrackingNumber) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", *body.TrackingNumber, utf8.RuneCountInString(*body.TrackingNumber), 50, false))
		}
	}
	if body.RequestedPickupAt != nil {
		if utf8.RuneCountInString(*body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", *body.RequestedPickupAt, utf8.RuneCountInString(*body.RequestedPickupAt), 30, false))
		}
	}
	if body.EstimatedArrivalAt != nil {
		if utf8.RuneCountInString(*body.EstimatedArrivalAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", *body.EstimatedArrivalAt, utf8.RuneCountInString(*body.EstimatedArrivalAt), 30, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2}))
		}
	}
	if body.Address != nil {
		if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateOutboundOrderRequestBody runs the validations defined on
// create_outbound_order_request_body
func ValidateCreateOutboundOrderRequestBody(body *CreateOutboundOrderRequestBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.TotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_price", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency", "body"))
	}
	if body.CustomerTariffNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_tariff_number", "body"))
	}
	if body.CustomerTariffNumberType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_tariff_number_type", "body"))
	}
	if body.EnablePrepayTariff == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enable_prepay_tariff", "body"))
	}
	if body.ShippingType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("shipping_type", "body"))
	}
	if body.ReceiverInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("receiver_info", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.ChannelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("channel_id", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InboundOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inbound_order_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.ShippingType != nil {
		if !(*body.ShippingType == 1 || *body.ShippingType == 2 || *body.ShippingType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.shipping_type", *body.ShippingType, []interface{}{1, 2, 3}))
		}
	}
	if body.ReceiverInfo != nil {
		if err2 := ValidateShippingAddressRequestBody(body.ReceiverInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOutboundOrderItemRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2}))
		}
	}
	return
}

// ValidateUpdateOutboundOrderRequestBody runs the validations defined on
// update_outbound_order_request_body
func ValidateUpdateOutboundOrderRequestBody(body *UpdateOutboundOrderRequestBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.TotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_price", "body"))
	}
	if body.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency", "body"))
	}
	if body.CustomerTariffNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_tariff_number", "body"))
	}
	if body.CustomerTariffNumberType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_tariff_number_type", "body"))
	}
	if body.EnablePrepayTariff == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enable_prepay_tariff", "body"))
	}
	if body.ShippingType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("shipping_type", "body"))
	}
	if body.ReceiverInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("receiver_info", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.ChannelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("channel_id", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InboundOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inbound_order_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 1, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.ShippingType != nil {
		if !(*body.ShippingType == 1 || *body.ShippingType == 2 || *body.ShippingType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.shipping_type", *body.ShippingType, []interface{}{1, 2, 3}))
		}
	}
	if body.ReceiverInfo != nil {
		if err2 := ValidateShippingAddressRequestBody(body.ReceiverInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOutboundOrderItemRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2}))
		}
	}
	return
}

// ValidateCreatePickupOrderRequestBody runs the validations defined on
// create_pickup_order_request_body
func ValidateCreatePickupOrderRequestBody(body *CreatePickupOrderRequestBody) (err error) {
	if body.RequestedPickupAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requested_pickup_at", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.RequestedPickupAt != nil {
		if utf8.RuneCountInString(*body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", *body.RequestedPickupAt, utf8.RuneCountInString(*body.RequestedPickupAt), 30, false))
		}
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Address != nil {
		if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2}))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	return
}

// ValidateItemRequestBody runs the validations defined on ItemRequestBody
func ValidateItemRequestBody(body *ItemRequestBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 1, true))
		}
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 100, false))
		}
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 1, true))
		}
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 50, false))
		}
	}
	if body.Barcode != nil {
		if utf8.RuneCountInString(*body.Barcode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.barcode", *body.Barcode, utf8.RuneCountInString(*body.Barcode), 50, false))
		}
	}
	return
}

// ValidateShippingAddressRequestBody runs the validations defined on
// ShippingAddressRequestBody
func ValidateShippingAddressRequestBody(body *ShippingAddressRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone_number", "body"))
	}
	if body.CountryName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_name", "body"))
	}
	if body.CountryCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_code", "body"))
	}
	if body.StateName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state_name", "body"))
	}
	if body.StateCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state_code", "body"))
	}
	if body.Address1 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address1", "body"))
	}
	if body.Address2 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address2", "body"))
	}
	if body.CityName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("city_name", "body"))
	}
	if body.ZipCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("zip_code", "body"))
	}
	return
}

// ValidateOutboundOrderItemRequestBody runs the validations defined on
// OutboundOrderItemRequestBody
func ValidateOutboundOrderItemRequestBody(body *OutboundOrderItemRequestBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_price", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	if body.HsCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hs_code", "body"))
	}
	if body.DeclaredCnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_cn_name", "body"))
	}
	if body.DeclaredEnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_en_name", "body"))
	}
	if body.DeclaredValueInUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_usd", "body"))
	}
	if body.ProductWeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_weight", "body"))
	}
	if body.ProductLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_length", "body"))
	}
	if body.ProductWidth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_width", "body"))
	}
	if body.ProductHeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_height", "body"))
	}
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	if body.DeclaredValueInEur == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_eur", "body"))
	}
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	return
}
