// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	"fmt"
	order "goa/gen/order"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateInboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "create_inbound_order"
// endpoint
func (c *Client) BuildCreateInboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateInboundOrderOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "create_inbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateInboundOrderRequest returns an encoder for requests sent to the
// order create_inbound_order server.
func EncodeCreateInboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.InboundOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "create_inbound_order", "*order.InboundOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateInboundOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "create_inbound_order", err)
		}
		return nil
	}
}

// DecodeCreateInboundOrderResponse returns a decoder for responses returned by
// the order create_inbound_order endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateInboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateInboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateInboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_inbound_order", err)
			}
			err = ValidateCreateInboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_inbound_order", err)
			}
			res := NewCreateInboundOrderInboundOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateInboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_inbound_order", err)
			}
			err = ValidateCreateInboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_inbound_order", err)
			}
			return nil, NewCreateInboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "create_inbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateInboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "update_inbound_order"
// endpoint
func (c *Client) BuildUpdateInboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateInboundOrderOrderPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "update_inbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateInboundOrderRequest returns an encoder for requests sent to the
// order update_inbound_order server.
func EncodeUpdateInboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.InboundOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "update_inbound_order", "*order.InboundOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateInboundOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "update_inbound_order", err)
		}
		return nil
	}
}

// DecodeUpdateInboundOrderResponse returns a decoder for responses returned by
// the order update_inbound_order endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateInboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateInboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateInboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_inbound_order", err)
			}
			err = ValidateUpdateInboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_inbound_order", err)
			}
			res := NewUpdateInboundOrderUpdateResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateInboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_inbound_order", err)
			}
			err = ValidateUpdateInboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_inbound_order", err)
			}
			return nil, NewUpdateInboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "update_inbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildCreatePickupOrderRequest instantiates a HTTP request object with method
// and path set to call the "order" service "create_pickup_order" endpoint
func (c *Client) BuildCreatePickupOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePickupOrderOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "create_pickup_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePickupOrderRequest returns an encoder for requests sent to the
// order create_pickup_order server.
func EncodeCreatePickupOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.PickupOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "create_pickup_order", "*order.PickupOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreatePickupOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "create_pickup_order", err)
		}
		return nil
	}
}

// DecodeCreatePickupOrderResponse returns a decoder for responses returned by
// the order create_pickup_order endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreatePickupOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreatePickupOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreatePickupOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_pickup_order", err)
			}
			err = ValidateCreatePickupOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_pickup_order", err)
			}
			res := NewCreatePickupOrderPickupOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreatePickupOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_pickup_order", err)
			}
			err = ValidateCreatePickupOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_pickup_order", err)
			}
			return nil, NewCreatePickupOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "create_pickup_order", resp.StatusCode, string(body))
		}
	}
}

// BuildBatchQueryInboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "batch_query_inbound_order"
// endpoint
func (c *Client) BuildBatchQueryInboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchQueryInboundOrderOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "batch_query_inbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchQueryInboundOrderRequest returns an encoder for requests sent to
// the order batch_query_inbound_order server.
func EncodeBatchQueryInboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.GetOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "batch_query_inbound_order", "*order.GetOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		for _, value := range p.OrderNumbers {
			values.Add("order_numbers", value)
		}
		if p.Status != nil {
			values.Add("status", fmt.Sprintf("%v", *p.Status))
		}
		if p.Current != nil {
			values.Add("current", fmt.Sprintf("%v", *p.Current))
		}
		if p.PageSize != nil {
			values.Add("page_size", fmt.Sprintf("%v", *p.PageSize))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeBatchQueryInboundOrderResponse returns a decoder for responses
// returned by the order batch_query_inbound_order endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeBatchQueryInboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeBatchQueryInboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchQueryInboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_query_inbound_order", err)
			}
			err = ValidateBatchQueryInboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_query_inbound_order", err)
			}
			res := NewBatchQueryInboundOrderInboundOrderResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BatchQueryInboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_query_inbound_order", err)
			}
			err = ValidateBatchQueryInboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_query_inbound_order", err)
			}
			return nil, NewBatchQueryInboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "batch_query_inbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildGetInboundOrderRequest instantiates a HTTP request object with method
// and path set to call the "order" service "get_inbound_order" endpoint
func (c *Client) BuildGetInboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		orderNumber string
	)
	{
		p, ok := v.(*order.QueryOrder)
		if !ok {
			return nil, goahttp.ErrInvalidType("order", "get_inbound_order", "*order.QueryOrder", v)
		}
		orderNumber = p.OrderNumber
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInboundOrderOrderPath(orderNumber)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "get_inbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetInboundOrderRequest returns an encoder for requests sent to the
// order get_inbound_order server.
func EncodeGetInboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.QueryOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "get_inbound_order", "*order.QueryOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetInboundOrderResponse returns a decoder for responses returned by
// the order get_inbound_order endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetInboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetInboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetInboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_inbound_order", err)
			}
			err = ValidateGetInboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_inbound_order", err)
			}
			res := NewGetInboundOrderQueryInboundOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetInboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_inbound_order", err)
			}
			err = ValidateGetInboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_inbound_order", err)
			}
			return nil, NewGetInboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "get_inbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateOutboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "create_outbound_order"
// endpoint
func (c *Client) BuildCreateOutboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOutboundOrderOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "create_outbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateOutboundOrderRequest returns an encoder for requests sent to the
// order create_outbound_order server.
func EncodeCreateOutboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OutboundOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "create_outbound_order", "*order.OutboundOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateOutboundOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "create_outbound_order", err)
		}
		return nil
	}
}

// DecodeCreateOutboundOrderResponse returns a decoder for responses returned
// by the order create_outbound_order endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateOutboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateOutboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOutboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_outbound_order", err)
			}
			err = ValidateCreateOutboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_outbound_order", err)
			}
			res := NewCreateOutboundOrderOutboundOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateOutboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_outbound_order", err)
			}
			err = ValidateCreateOutboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_outbound_order", err)
			}
			return nil, NewCreateOutboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "create_outbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateOutboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "update_outbound_order"
// endpoint
func (c *Client) BuildUpdateOutboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int32
	)
	{
		p, ok := v.(*order.OutboundOrderUpdateRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("order", "update_outbound_order", "*order.OutboundOrderUpdateRequest", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateOutboundOrderOrderPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "update_outbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateOutboundOrderRequest returns an encoder for requests sent to the
// order update_outbound_order server.
func EncodeUpdateOutboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OutboundOrderUpdateRequest)
		if !ok {
			return goahttp.ErrInvalidType("order", "update_outbound_order", "*order.OutboundOrderUpdateRequest", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateOutboundOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "update_outbound_order", err)
		}
		return nil
	}
}

// DecodeUpdateOutboundOrderResponse returns a decoder for responses returned
// by the order update_outbound_order endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpdateOutboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateOutboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateOutboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_outbound_order", err)
			}
			err = ValidateUpdateOutboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_outbound_order", err)
			}
			res := NewUpdateOutboundOrderUpdateResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateOutboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_outbound_order", err)
			}
			err = ValidateUpdateOutboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_outbound_order", err)
			}
			return nil, NewUpdateOutboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "update_outbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildBatchUpdateOutboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service
// "batch_update_outbound_order" endpoint
func (c *Client) BuildBatchUpdateOutboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchUpdateOutboundOrderOrderPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "batch_update_outbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchUpdateOutboundOrderRequest returns an encoder for requests sent
// to the order batch_update_outbound_order server.
func EncodeBatchUpdateOutboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.BatchUpdateOrderRequest)
		if !ok {
			return goahttp.ErrInvalidType("order", "batch_update_outbound_order", "*order.BatchUpdateOrderRequest", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewBatchUpdateOutboundOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "batch_update_outbound_order", err)
		}
		return nil
	}
}

// DecodeBatchUpdateOutboundOrderResponse returns a decoder for responses
// returned by the order batch_update_outbound_order endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeBatchUpdateOutboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeBatchUpdateOutboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchUpdateOutboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_update_outbound_order", err)
			}
			err = ValidateBatchUpdateOutboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_update_outbound_order", err)
			}
			res := NewBatchUpdateOutboundOrderBatchUpdateOrderResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BatchUpdateOutboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_update_outbound_order", err)
			}
			err = ValidateBatchUpdateOutboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_update_outbound_order", err)
			}
			return nil, NewBatchUpdateOutboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "batch_update_outbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateOutboundOrderItemRequest instantiates a HTTP request object with
// method and path set to call the "order" service "create_outbound_order_item"
// endpoint
func (c *Client) BuildCreateOutboundOrderItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOutboundOrderItemOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "create_outbound_order_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateOutboundOrderItemRequest returns an encoder for requests sent to
// the order create_outbound_order_item server.
func EncodeCreateOutboundOrderItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OutboundOrderItemCreateRequest)
		if !ok {
			return goahttp.ErrInvalidType("order", "create_outbound_order_item", "*order.OutboundOrderItemCreateRequest", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateOutboundOrderItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "create_outbound_order_item", err)
		}
		return nil
	}
}

// DecodeCreateOutboundOrderItemResponse returns a decoder for responses
// returned by the order create_outbound_order_item endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeCreateOutboundOrderItemResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateOutboundOrderItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOutboundOrderItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_outbound_order_item", err)
			}
			err = ValidateCreateOutboundOrderItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_outbound_order_item", err)
			}
			res := NewCreateOutboundOrderItemBaseResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreateOutboundOrderItemUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_outbound_order_item", err)
			}
			err = ValidateCreateOutboundOrderItemUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_outbound_order_item", err)
			}
			return nil, NewCreateOutboundOrderItemUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "create_outbound_order_item", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateOutboundOrderItemRequest instantiates a HTTP request object with
// method and path set to call the "order" service "update_outbound_order_item"
// endpoint
func (c *Client) BuildUpdateOutboundOrderItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*order.OutboundOrderItemUpdateRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("order", "update_outbound_order_item", "*order.OutboundOrderItemUpdateRequest", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateOutboundOrderItemOrderPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "update_outbound_order_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateOutboundOrderItemRequest returns an encoder for requests sent to
// the order update_outbound_order_item server.
func EncodeUpdateOutboundOrderItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OutboundOrderItemUpdateRequest)
		if !ok {
			return goahttp.ErrInvalidType("order", "update_outbound_order_item", "*order.OutboundOrderItemUpdateRequest", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateOutboundOrderItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "update_outbound_order_item", err)
		}
		return nil
	}
}

// DecodeUpdateOutboundOrderItemResponse returns a decoder for responses
// returned by the order update_outbound_order_item endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeUpdateOutboundOrderItemResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateOutboundOrderItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateOutboundOrderItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_outbound_order_item", err)
			}
			err = ValidateUpdateOutboundOrderItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_outbound_order_item", err)
			}
			res := NewUpdateOutboundOrderItemBaseResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateOutboundOrderItemUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "update_outbound_order_item", err)
			}
			err = ValidateUpdateOutboundOrderItemUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "update_outbound_order_item", err)
			}
			return nil, NewUpdateOutboundOrderItemUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "update_outbound_order_item", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteOutboundOrderItemRequest instantiates a HTTP request object with
// method and path set to call the "order" service "delete_outbound_order_item"
// endpoint
func (c *Client) BuildDeleteOutboundOrderItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*order.DeleteOutboundItemRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("order", "delete_outbound_order_item", "*order.DeleteOutboundItemRequest", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteOutboundOrderItemOrderPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "delete_outbound_order_item", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteOutboundOrderItemRequest returns an encoder for requests sent to
// the order delete_outbound_order_item server.
func EncodeDeleteOutboundOrderItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.DeleteOutboundItemRequest)
		if !ok {
			return goahttp.ErrInvalidType("order", "delete_outbound_order_item", "*order.DeleteOutboundItemRequest", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteOutboundOrderItemResponse returns a decoder for responses
// returned by the order delete_outbound_order_item endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeDeleteOutboundOrderItemResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteOutboundOrderItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteOutboundOrderItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "delete_outbound_order_item", err)
			}
			err = ValidateDeleteOutboundOrderItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "delete_outbound_order_item", err)
			}
			res := NewDeleteOutboundOrderItemBaseResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DeleteOutboundOrderItemUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "delete_outbound_order_item", err)
			}
			err = ValidateDeleteOutboundOrderItemUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "delete_outbound_order_item", err)
			}
			return nil, NewDeleteOutboundOrderItemUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "delete_outbound_order_item", resp.StatusCode, string(body))
		}
	}
}

// BuildBatchQueryOutboundOrderRequest instantiates a HTTP request object with
// method and path set to call the "order" service "batch_query_outbound_order"
// endpoint
func (c *Client) BuildBatchQueryOutboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchQueryOutboundOrderOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "batch_query_outbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchQueryOutboundOrderRequest returns an encoder for requests sent to
// the order batch_query_outbound_order server.
func EncodeBatchQueryOutboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.GetOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "batch_query_outbound_order", "*order.GetOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		for _, value := range p.OrderNumbers {
			values.Add("order_numbers", value)
		}
		if p.Status != nil {
			values.Add("status", fmt.Sprintf("%v", *p.Status))
		}
		if p.Current != nil {
			values.Add("current", fmt.Sprintf("%v", *p.Current))
		}
		if p.PageSize != nil {
			values.Add("page_size", fmt.Sprintf("%v", *p.PageSize))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeBatchQueryOutboundOrderResponse returns a decoder for responses
// returned by the order batch_query_outbound_order endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeBatchQueryOutboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeBatchQueryOutboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchQueryOutboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_query_outbound_order", err)
			}
			err = ValidateBatchQueryOutboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_query_outbound_order", err)
			}
			res := NewBatchQueryOutboundOrderOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BatchQueryOutboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "batch_query_outbound_order", err)
			}
			err = ValidateBatchQueryOutboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "batch_query_outbound_order", err)
			}
			return nil, NewBatchQueryOutboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "batch_query_outbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOutboundOrderRequest instantiates a HTTP request object with method
// and path set to call the "order" service "get_outbound_order" endpoint
func (c *Client) BuildGetOutboundOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*order.QueryOutOrder)
		if !ok {
			return nil, goahttp.ErrInvalidType("order", "get_outbound_order", "*order.QueryOutOrder", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOutboundOrderOrderPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "get_outbound_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOutboundOrderRequest returns an encoder for requests sent to the
// order get_outbound_order server.
func EncodeGetOutboundOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.QueryOutOrder)
		if !ok {
			return goahttp.ErrInvalidType("order", "get_outbound_order", "*order.QueryOutOrder", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetOutboundOrderResponse returns a decoder for responses returned by
// the order get_outbound_order endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetOutboundOrderResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetOutboundOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOutboundOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order", err)
			}
			err = ValidateGetOutboundOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order", err)
			}
			res := NewGetOutboundOrderQueryOrderRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetOutboundOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order", err)
			}
			err = ValidateGetOutboundOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order", err)
			}
			return nil, NewGetOutboundOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "get_outbound_order", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOutboundOrderListFiltersRequest instantiates a HTTP request object
// with method and path set to call the "order" service
// "get_outbound_order_list_filters" endpoint
func (c *Client) BuildGetOutboundOrderListFiltersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOutboundOrderListFiltersOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "get_outbound_order_list_filters", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOutboundOrderListFiltersRequest returns an encoder for requests
// sent to the order get_outbound_order_list_filters server.
func EncodeGetOutboundOrderListFiltersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.AuthToken)
		if !ok {
			return goahttp.ErrInvalidType("order", "get_outbound_order_list_filters", "*order.AuthToken", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetOutboundOrderListFiltersResponse returns a decoder for responses
// returned by the order get_outbound_order_list_filters endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetOutboundOrderListFiltersResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetOutboundOrderListFiltersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOutboundOrderListFiltersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_list_filters", err)
			}
			err = ValidateGetOutboundOrderListFiltersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_list_filters", err)
			}
			res := NewGetOutboundOrderListFiltersOrderListFiltersOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetOutboundOrderListFiltersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_list_filters", err)
			}
			err = ValidateGetOutboundOrderListFiltersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_list_filters", err)
			}
			return nil, NewGetOutboundOrderListFiltersUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "get_outbound_order_list_filters", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOutboundOrderCountRequest instantiates a HTTP request object with
// method and path set to call the "order" service "get_outbound_order_count"
// endpoint
func (c *Client) BuildGetOutboundOrderCountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOutboundOrderCountOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "get_outbound_order_count", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOutboundOrderCountRequest returns an encoder for requests sent to
// the order get_outbound_order_count server.
func EncodeGetOutboundOrderCountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OrderQueryPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "get_outbound_order_count", "*order.OrderQueryPayload", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		for _, value := range p.ID {
			values.Add("id", value)
		}
		if p.PlatformOrderNo != nil {
			values.Add("platform_order_no", *p.PlatformOrderNo)
		}
		if p.ListingSku != nil {
			values.Add("listing_sku", *p.ListingSku)
		}
		if p.Sku != nil {
			values.Add("sku", *p.Sku)
		}
		if p.NssTrackingNumber != nil {
			values.Add("nss_tracking_number", *p.NssTrackingNumber)
		}
		if p.ShippingName != nil {
			values.Add("shipping_name", *p.ShippingName)
		}
		if p.Platform != nil {
			values.Add("platform", *p.Platform)
		}
		for _, value := range p.Status {
			values.Add("status", value)
		}
		if p.StoreID != nil {
			values.Add("store_id", *p.StoreID)
		}
		if p.WarehouseID != nil {
			values.Add("warehouse_id", *p.WarehouseID)
		}
		if p.CountryCode != nil {
			values.Add("country_code", *p.CountryCode)
		}
		if p.CreatedAtStart != nil {
			values.Add("created_at_start", *p.CreatedAtStart)
		}
		if p.CreatedAtEnd != nil {
			values.Add("created_at_end", *p.CreatedAtEnd)
		}
		if p.ShipDateStart != nil {
			values.Add("ship_date_start", *p.ShipDateStart)
		}
		if p.ShipDateEnd != nil {
			values.Add("ship_date_end", *p.ShipDateEnd)
		}
		if p.OfflineOrder != nil {
			values.Add("offline_order", *p.OfflineOrder)
		}
		if p.Page != nil {
			values.Add("page", *p.Page)
		}
		if p.PageSize != nil {
			values.Add("page_size", *p.PageSize)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetOutboundOrderCountResponse returns a decoder for responses returned
// by the order get_outbound_order_count endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetOutboundOrderCountResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetOutboundOrderCountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOutboundOrderCountResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_count", err)
			}
			err = ValidateGetOutboundOrderCountResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_count", err)
			}
			res := NewGetOutboundOrderCountOrderCountResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetOutboundOrderCountUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_count", err)
			}
			err = ValidateGetOutboundOrderCountUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_count", err)
			}
			return nil, NewGetOutboundOrderCountUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "get_outbound_order_count", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOutboundOrderListRequest instantiates a HTTP request object with
// method and path set to call the "order" service "get_outbound_order_list"
// endpoint
func (c *Client) BuildGetOutboundOrderListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOutboundOrderListOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "get_outbound_order_list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOutboundOrderListRequest returns an encoder for requests sent to
// the order get_outbound_order_list server.
func EncodeGetOutboundOrderListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OrderQueryPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "get_outbound_order_list", "*order.OrderQueryPayload", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		for _, value := range p.ID {
			values.Add("id", value)
		}
		if p.PlatformOrderNo != nil {
			values.Add("platform_order_no", *p.PlatformOrderNo)
		}
		if p.ListingSku != nil {
			values.Add("listing_sku", *p.ListingSku)
		}
		if p.Sku != nil {
			values.Add("sku", *p.Sku)
		}
		if p.NssTrackingNumber != nil {
			values.Add("nss_tracking_number", *p.NssTrackingNumber)
		}
		if p.ShippingName != nil {
			values.Add("shipping_name", *p.ShippingName)
		}
		if p.Platform != nil {
			values.Add("platform", *p.Platform)
		}
		for _, value := range p.Status {
			values.Add("status", value)
		}
		if p.StoreID != nil {
			values.Add("store_id", *p.StoreID)
		}
		if p.WarehouseID != nil {
			values.Add("warehouse_id", *p.WarehouseID)
		}
		if p.CountryCode != nil {
			values.Add("country_code", *p.CountryCode)
		}
		if p.CreatedAtStart != nil {
			values.Add("created_at_start", *p.CreatedAtStart)
		}
		if p.CreatedAtEnd != nil {
			values.Add("created_at_end", *p.CreatedAtEnd)
		}
		if p.ShipDateStart != nil {
			values.Add("ship_date_start", *p.ShipDateStart)
		}
		if p.ShipDateEnd != nil {
			values.Add("ship_date_end", *p.ShipDateEnd)
		}
		if p.OfflineOrder != nil {
			values.Add("offline_order", *p.OfflineOrder)
		}
		if p.Page != nil {
			values.Add("page", *p.Page)
		}
		if p.PageSize != nil {
			values.Add("page_size", *p.PageSize)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetOutboundOrderListResponse returns a decoder for responses returned
// by the order get_outbound_order_list endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetOutboundOrderListResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetOutboundOrderListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOutboundOrderListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_list", err)
			}
			err = ValidateGetOutboundOrderListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_list", err)
			}
			res := NewGetOutboundOrderListGetOrderListResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetOutboundOrderListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "get_outbound_order_list", err)
			}
			err = ValidateGetOutboundOrderListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "get_outbound_order_list", err)
			}
			return nil, NewGetOutboundOrderListUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "get_outbound_order_list", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadOutboundOrdersRequest instantiates a HTTP request object with
// method and path set to call the "order" service "upload_outbound_orders"
// endpoint
func (c *Client) BuildUploadOutboundOrdersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadOutboundOrdersOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "upload_outbound_orders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadOutboundOrdersRequest returns an encoder for requests sent to
// the order upload_outbound_orders server.
func EncodeUploadOutboundOrdersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.UploadOrdersPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "upload_outbound_orders", "*order.UploadOrdersPayload", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("order", "upload_outbound_orders", err)
		}
		return nil
	}
}

// NewOrderUploadOutboundOrdersEncoder returns an encoder to encode the
// multipart request for the "order" service "upload_outbound_orders" endpoint.
func NewOrderUploadOutboundOrdersEncoder(encoderFn OrderUploadOutboundOrdersEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.(*order.UploadOrdersPayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeUploadOutboundOrdersResponse returns a decoder for responses returned
// by the order upload_outbound_orders endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUploadOutboundOrdersResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUploadOutboundOrdersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadOutboundOrdersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "upload_outbound_orders", err)
			}
			err = ValidateUploadOutboundOrdersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "upload_outbound_orders", err)
			}
			res := NewUploadOutboundOrdersUploadOrdersResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UploadOutboundOrdersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "upload_outbound_orders", err)
			}
			err = ValidateUploadOutboundOrdersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "upload_outbound_orders", err)
			}
			return nil, NewUploadOutboundOrdersUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "upload_outbound_orders", resp.StatusCode, string(body))
		}
	}
}

// BuildExportOutboundOrdersRequest instantiates a HTTP request object with
// method and path set to call the "order" service "export_outbound_orders"
// endpoint
func (c *Client) BuildExportOutboundOrdersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ExportOutboundOrdersOrderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "export_outbound_orders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeExportOutboundOrdersRequest returns an encoder for requests sent to
// the order export_outbound_orders server.
func EncodeExportOutboundOrdersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.OrderQueryPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "export_outbound_orders", "*order.OrderQueryPayload", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		for _, value := range p.ID {
			values.Add("id", value)
		}
		if p.PlatformOrderNo != nil {
			values.Add("platform_order_no", *p.PlatformOrderNo)
		}
		if p.ListingSku != nil {
			values.Add("listing_sku", *p.ListingSku)
		}
		if p.Sku != nil {
			values.Add("sku", *p.Sku)
		}
		if p.NssTrackingNumber != nil {
			values.Add("nss_tracking_number", *p.NssTrackingNumber)
		}
		if p.ShippingName != nil {
			values.Add("shipping_name", *p.ShippingName)
		}
		if p.Platform != nil {
			values.Add("platform", *p.Platform)
		}
		for _, value := range p.Status {
			values.Add("status", value)
		}
		if p.StoreID != nil {
			values.Add("store_id", *p.StoreID)
		}
		if p.WarehouseID != nil {
			values.Add("warehouse_id", *p.WarehouseID)
		}
		if p.CountryCode != nil {
			values.Add("country_code", *p.CountryCode)
		}
		if p.CreatedAtStart != nil {
			values.Add("created_at_start", *p.CreatedAtStart)
		}
		if p.CreatedAtEnd != nil {
			values.Add("created_at_end", *p.CreatedAtEnd)
		}
		if p.ShipDateStart != nil {
			values.Add("ship_date_start", *p.ShipDateStart)
		}
		if p.ShipDateEnd != nil {
			values.Add("ship_date_end", *p.ShipDateEnd)
		}
		if p.OfflineOrder != nil {
			values.Add("offline_order", *p.OfflineOrder)
		}
		if p.Page != nil {
			values.Add("page", *p.Page)
		}
		if p.PageSize != nil {
			values.Add("page_size", *p.PageSize)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeExportOutboundOrdersResponse returns a decoder for responses returned
// by the order export_outbound_orders endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeExportOutboundOrdersResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeExportOutboundOrdersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				length int64
				err    error
			)
			{
				lengthRaw := resp.Header.Get("Content-Length")
				if lengthRaw == "" {
					return nil, goahttp.ErrValidationError("order", "export_outbound_orders", goa.MissingFieldError("Content-Length", "header"))
				}
				v, err2 := strconv.ParseInt(lengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("length", lengthRaw, "integer"))
				}
				length = v
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "export_outbound_orders", err)
			}
			res := NewExportOutboundOrdersExportOrderResultOK(length)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ExportOutboundOrdersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "export_outbound_orders", err)
			}
			err = ValidateExportOutboundOrdersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "export_outbound_orders", err)
			}
			return nil, NewExportOutboundOrdersUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body ExportOutboundOrdersInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "export_outbound_orders", err)
			}
			err = ValidateExportOutboundOrdersInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "export_outbound_orders", err)
			}
			return nil, NewExportOutboundOrdersInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "export_outbound_orders", resp.StatusCode, string(body))
		}
	}
}

// marshalOrderItemToItemRequestBody builds a value of type *ItemRequestBody
// from a value of type *order.Item.
func marshalOrderItemToItemRequestBody(v *order.Item) *ItemRequestBody {
	res := &ItemRequestBody{
		ProductName:    v.ProductName,
		ProductSku:     v.ProductSku,
		ProductBarcode: v.ProductBarcode,
		Qty:            v.Qty,
	}

	return res
}

// marshalOrderShippingAddressToShippingAddressRequestBody builds a value of
// type *ShippingAddressRequestBody from a value of type *order.ShippingAddress.
func marshalOrderShippingAddressToShippingAddressRequestBody(v *order.ShippingAddress) *ShippingAddressRequestBody {
	if v == nil {
		return nil
	}
	res := &ShippingAddressRequestBody{
		FirstName:         v.FirstName,
		LastName:          v.LastName,
		PhoneNumber:       v.PhoneNumber,
		CountryName:       v.CountryName,
		CountryCode:       v.CountryCode,
		StateName:         v.StateName,
		StateCode:         v.StateCode,
		Address1:          v.Address1,
		Address2:          v.Address2,
		CityName:          v.CityName,
		ZipCode:           v.ZipCode,
		Name:              v.Name,
		Company:           v.Company,
		Email:             v.Email,
		CertificateType:   v.CertificateType,
		CertificateCode:   v.CertificateCode,
		CertificatePeriod: v.CertificatePeriod,
	}

	return res
}

// marshalItemRequestBodyToOrderItem builds a value of type *order.Item from a
// value of type *ItemRequestBody.
func marshalItemRequestBodyToOrderItem(v *ItemRequestBody) *order.Item {
	res := &order.Item{
		ProductName:    v.ProductName,
		ProductSku:     v.ProductSku,
		ProductBarcode: v.ProductBarcode,
		Qty:            v.Qty,
	}

	return res
}

// marshalShippingAddressRequestBodyToOrderShippingAddress builds a value of
// type *order.ShippingAddress from a value of type *ShippingAddressRequestBody.
func marshalShippingAddressRequestBodyToOrderShippingAddress(v *ShippingAddressRequestBody) *order.ShippingAddress {
	if v == nil {
		return nil
	}
	res := &order.ShippingAddress{
		FirstName:         v.FirstName,
		LastName:          v.LastName,
		PhoneNumber:       v.PhoneNumber,
		CountryName:       v.CountryName,
		CountryCode:       v.CountryCode,
		StateName:         v.StateName,
		StateCode:         v.StateCode,
		Address1:          v.Address1,
		Address2:          v.Address2,
		CityName:          v.CityName,
		ZipCode:           v.ZipCode,
		Name:              v.Name,
		Company:           v.Company,
		Email:             v.Email,
		CertificateType:   v.CertificateType,
		CertificateCode:   v.CertificateCode,
		CertificatePeriod: v.CertificatePeriod,
	}

	return res
}

// unmarshalInboundOrderDataResponseBodyToOrderInboundOrderData builds a value
// of type *order.InboundOrderData from a value of type
// *InboundOrderDataResponseBody.
func unmarshalInboundOrderDataResponseBodyToOrderInboundOrderData(v *InboundOrderDataResponseBody) *order.InboundOrderData {
	if v == nil {
		return nil
	}
	res := &order.InboundOrderData{
		OrderNumber: *v.OrderNumber,
		LabelURL:    *v.LabelURL,
	}

	return res
}

// unmarshalUpdateResponseDataResponseBodyToOrderUpdateResponseData builds a
// value of type *order.UpdateResponseData from a value of type
// *UpdateResponseDataResponseBody.
func unmarshalUpdateResponseDataResponseBodyToOrderUpdateResponseData(v *UpdateResponseDataResponseBody) *order.UpdateResponseData {
	if v == nil {
		return nil
	}
	res := &order.UpdateResponseData{
		Status: *v.Status,
	}

	return res
}

// unmarshalInboundOrderInfoResponseBodyToOrderInboundOrderInfo builds a value
// of type *order.InboundOrderInfo from a value of type
// *InboundOrderInfoResponseBody.
func unmarshalInboundOrderInfoResponseBodyToOrderInboundOrderInfo(v *InboundOrderInfoResponseBody) *order.InboundOrderInfo {
	if v == nil {
		return nil
	}
	res := &order.InboundOrderInfo{}
	res.List = make([]*order.InboundOrderResponseData, len(v.List))
	for i, val := range v.List {
		res.List[i] = unmarshalInboundOrderResponseDataResponseBodyToOrderInboundOrderResponseData(val)
	}
	res.Meta = unmarshalMetaDataResponseBodyToOrderMetaData(v.Meta)

	return res
}

// unmarshalInboundOrderResponseDataResponseBodyToOrderInboundOrderResponseData
// builds a value of type *order.InboundOrderResponseData from a value of type
// *InboundOrderResponseDataResponseBody.
func unmarshalInboundOrderResponseDataResponseBodyToOrderInboundOrderResponseData(v *InboundOrderResponseDataResponseBody) *order.InboundOrderResponseData {
	res := &order.InboundOrderResponseData{
		CustomerOrderID: *v.CustomerOrderID,
		Status:          *v.Status,
		OrderNumber:     *v.OrderNumber,
		TrackingNumber:  *v.TrackingNumber,
		TrackingURL:     *v.TrackingURL,
		Timestamp:       *v.Timestamp,
		CarrierName:     *v.CarrierName,
	}
	res.Items = make([]*order.Item, len(v.Items))
	for i, val := range v.Items {
		res.Items[i] = unmarshalItemResponseBodyToOrderItem(val)
	}

	return res
}

// unmarshalItemResponseBodyToOrderItem builds a value of type *order.Item from
// a value of type *ItemResponseBody.
func unmarshalItemResponseBodyToOrderItem(v *ItemResponseBody) *order.Item {
	res := &order.Item{
		ProductName:    *v.ProductName,
		ProductSku:     *v.ProductSku,
		ProductBarcode: *v.ProductBarcode,
		Qty:            *v.Qty,
	}

	return res
}

// unmarshalMetaDataResponseBodyToOrderMetaData builds a value of type
// *order.MetaData from a value of type *MetaDataResponseBody.
func unmarshalMetaDataResponseBodyToOrderMetaData(v *MetaDataResponseBody) *order.MetaData {
	res := &order.MetaData{
		Current:  *v.Current,
		PageSize: *v.PageSize,
		Total:    *v.Total,
	}

	return res
}

// marshalOrderOutboundOrderItemToOutboundOrderItemRequestBody builds a value
// of type *OutboundOrderItemRequestBody from a value of type
// *order.OutboundOrderItem.
func marshalOrderOutboundOrderItemToOutboundOrderItemRequestBody(v *order.OutboundOrderItem) *OutboundOrderItemRequestBody {
	res := &OutboundOrderItemRequestBody{
		ProductName:        v.ProductName,
		ProductSku:         v.ProductSku,
		ProductPrice:       v.ProductPrice,
		Qty:                v.Qty,
		HsCode:             v.HsCode,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		ProductWeight:      v.ProductWeight,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		ProductBarcode:     v.ProductBarcode,
		DeclaredValueInEur: v.DeclaredValueInEur,
		RequiresShipping:   v.RequiresShipping,
		ExtOrderItemID:     v.ExtOrderItemID,
		ExtProductID:       v.ExtProductID,
		PlatformProductID:  v.PlatformProductID,
		Material:           v.Material,
		Purpose:            v.Purpose,
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}
	{
		var zero string
		if res.Material == zero {
			res.Material = ""
		}
	}
	{
		var zero string
		if res.Purpose == zero {
			res.Purpose = ""
		}
	}

	return res
}

// marshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem builds a value
// of type *order.OutboundOrderItem from a value of type
// *OutboundOrderItemRequestBody.
func marshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(v *OutboundOrderItemRequestBody) *order.OutboundOrderItem {
	res := &order.OutboundOrderItem{
		ProductName:        v.ProductName,
		ProductSku:         v.ProductSku,
		ProductPrice:       v.ProductPrice,
		Qty:                v.Qty,
		HsCode:             v.HsCode,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		ProductWeight:      v.ProductWeight,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		ProductBarcode:     v.ProductBarcode,
		DeclaredValueInEur: v.DeclaredValueInEur,
		RequiresShipping:   v.RequiresShipping,
		ExtOrderItemID:     v.ExtOrderItemID,
		ExtProductID:       v.ExtProductID,
		PlatformProductID:  v.PlatformProductID,
		Material:           v.Material,
		Purpose:            v.Purpose,
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}
	{
		var zero string
		if res.Material == zero {
			res.Material = ""
		}
	}
	{
		var zero string
		if res.Purpose == zero {
			res.Purpose = ""
		}
	}

	return res
}

// unmarshalOutboundOrderRspDataResponseBodyToOrderOutboundOrderRspData builds
// a value of type *order.OutboundOrderRspData from a value of type
// *OutboundOrderRspDataResponseBody.
func unmarshalOutboundOrderRspDataResponseBodyToOrderOutboundOrderRspData(v *OutboundOrderRspDataResponseBody) *order.OutboundOrderRspData {
	if v == nil {
		return nil
	}
	res := &order.OutboundOrderRspData{
		OrderNumber:    *v.OrderNumber,
		TrackingNumber: *v.TrackingNumber,
	}

	return res
}

// marshalOrderAddressToAddressRequestBody builds a value of type
// *AddressRequestBody from a value of type *order.Address.
func marshalOrderAddressToAddressRequestBody(v *order.Address) *AddressRequestBody {
	if v == nil {
		return nil
	}
	res := &AddressRequestBody{
		FirstName:         v.FirstName,
		LastName:          v.LastName,
		PhoneNumber:       v.PhoneNumber,
		CountryName:       v.CountryName,
		CountryCode:       v.CountryCode,
		StateName:         v.StateName,
		StateCode:         v.StateCode,
		Address1:          v.Address1,
		Address2:          v.Address2,
		CityName:          v.CityName,
		ZipCode:           v.ZipCode,
		Name:              v.Name,
		Company:           v.Company,
		Email:             v.Email,
		CertificateType:   v.CertificateType,
		CertificateCode:   v.CertificateCode,
		CertificatePeriod: v.CertificatePeriod,
	}

	return res
}

// marshalOrderOutboundOrderItemUpdateRequestToOutboundOrderItemUpdateRequestRequestBody
// builds a value of type *OutboundOrderItemUpdateRequestRequestBody from a
// value of type *order.OutboundOrderItemUpdateRequest.
func marshalOrderOutboundOrderItemUpdateRequestToOutboundOrderItemUpdateRequestRequestBody(v *order.OutboundOrderItemUpdateRequest) *OutboundOrderItemUpdateRequestRequestBody {
	if v == nil {
		return nil
	}
	res := &OutboundOrderItemUpdateRequestRequestBody{
		OutboundOrderID:    v.OutboundOrderID,
		ProductSku:         v.ProductSku,
		ExtOrderItemID:     v.ExtOrderItemID,
		ProductName:        v.ProductName,
		ProductPrice:       v.ProductPrice,
		Barcode:            v.Barcode,
		Qty:                v.Qty,
		HsCode:             v.HsCode,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		DeclaredValueInEur: v.DeclaredValueInEur,
		ProductWeight:      v.ProductWeight,
		CustomerCode:       v.CustomerCode,
		Material:           v.Material,
		Purpose:            v.Purpose,
		RequiresShipping:   v.RequiresShipping,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		ExtProductID:       v.ExtProductID,
		PlatformProductID:  v.PlatformProductID,
		ID:                 v.ID,
		Authorization:      v.Authorization,
		Token:              v.Token,
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}
	if v.Images != nil {
		res.Images = make([]string, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = val
		}
	}

	return res
}

// marshalAddressRequestBodyToOrderAddress builds a value of type
// *order.Address from a value of type *AddressRequestBody.
func marshalAddressRequestBodyToOrderAddress(v *AddressRequestBody) *order.Address {
	if v == nil {
		return nil
	}
	res := &order.Address{
		FirstName:         v.FirstName,
		LastName:          v.LastName,
		PhoneNumber:       v.PhoneNumber,
		CountryName:       v.CountryName,
		CountryCode:       v.CountryCode,
		StateName:         v.StateName,
		StateCode:         v.StateCode,
		Address1:          v.Address1,
		Address2:          v.Address2,
		CityName:          v.CityName,
		ZipCode:           v.ZipCode,
		Name:              v.Name,
		Company:           v.Company,
		Email:             v.Email,
		CertificateType:   v.CertificateType,
		CertificateCode:   v.CertificateCode,
		CertificatePeriod: v.CertificatePeriod,
	}

	return res
}

// marshalOutboundOrderItemUpdateRequestRequestBodyToOrderOutboundOrderItemUpdateRequest
// builds a value of type *order.OutboundOrderItemUpdateRequest from a value of
// type *OutboundOrderItemUpdateRequestRequestBody.
func marshalOutboundOrderItemUpdateRequestRequestBodyToOrderOutboundOrderItemUpdateRequest(v *OutboundOrderItemUpdateRequestRequestBody) *order.OutboundOrderItemUpdateRequest {
	if v == nil {
		return nil
	}
	res := &order.OutboundOrderItemUpdateRequest{
		OutboundOrderID:    v.OutboundOrderID,
		ProductSku:         v.ProductSku,
		ExtOrderItemID:     v.ExtOrderItemID,
		ProductName:        v.ProductName,
		ProductPrice:       v.ProductPrice,
		Barcode:            v.Barcode,
		Qty:                v.Qty,
		HsCode:             v.HsCode,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		DeclaredValueInEur: v.DeclaredValueInEur,
		ProductWeight:      v.ProductWeight,
		CustomerCode:       v.CustomerCode,
		Material:           v.Material,
		Purpose:            v.Purpose,
		RequiresShipping:   v.RequiresShipping,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		ExtProductID:       v.ExtProductID,
		PlatformProductID:  v.PlatformProductID,
		ID:                 v.ID,
		Authorization:      v.Authorization,
		Token:              v.Token,
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}
	if v.Images != nil {
		res.Images = make([]string, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = val
		}
	}

	return res
}

// marshalOrderOutboundOrderUpdateRequestToOutboundOrderUpdateRequestRequestBody
// builds a value of type *OutboundOrderUpdateRequestRequestBody from a value
// of type *order.OutboundOrderUpdateRequest.
func marshalOrderOutboundOrderUpdateRequestToOutboundOrderUpdateRequestRequestBody(v *order.OutboundOrderUpdateRequest) *OutboundOrderUpdateRequestRequestBody {
	if v == nil {
		return nil
	}
	res := &OutboundOrderUpdateRequestRequestBody{
		ID:                        v.ID,
		WarehouseID:               v.WarehouseID,
		Offline:                   v.Offline,
		EnablePrepayTariff:        v.EnablePrepayTariff,
		CustomerTariffNumberType:  v.CustomerTariffNumberType,
		CustomerTariffCountryCode: v.CustomerTariffCountryCode,
		CustomerTariffNumber:      v.CustomerTariffNumber,
		Description:               v.Description,
		Authorization:             v.Authorization,
		Token:                     v.Token,
	}
	if v.ReceiverInfo != nil {
		res.ReceiverInfo = marshalOrderAddressToAddressRequestBody(v.ReceiverInfo)
	}
	if v.Items != nil {
		res.Items = make([]*OutboundOrderItemUpdateRequestRequestBody, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = marshalOrderOutboundOrderItemUpdateRequestToOutboundOrderItemUpdateRequestRequestBody(val)
		}
	}

	return res
}

// marshalOutboundOrderUpdateRequestRequestBodyToOrderOutboundOrderUpdateRequest
// builds a value of type *order.OutboundOrderUpdateRequest from a value of
// type *OutboundOrderUpdateRequestRequestBody.
func marshalOutboundOrderUpdateRequestRequestBodyToOrderOutboundOrderUpdateRequest(v *OutboundOrderUpdateRequestRequestBody) *order.OutboundOrderUpdateRequest {
	if v == nil {
		return nil
	}
	res := &order.OutboundOrderUpdateRequest{
		ID:                        v.ID,
		WarehouseID:               v.WarehouseID,
		Offline:                   v.Offline,
		EnablePrepayTariff:        v.EnablePrepayTariff,
		CustomerTariffNumberType:  v.CustomerTariffNumberType,
		CustomerTariffCountryCode: v.CustomerTariffCountryCode,
		CustomerTariffNumber:      v.CustomerTariffNumber,
		Description:               v.Description,
		Authorization:             v.Authorization,
		Token:                     v.Token,
	}
	if v.ReceiverInfo != nil {
		res.ReceiverInfo = marshalAddressRequestBodyToOrderAddress(v.ReceiverInfo)
	}
	if v.Items != nil {
		res.Items = make([]*order.OutboundOrderItemUpdateRequest, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = marshalOutboundOrderItemUpdateRequestRequestBodyToOrderOutboundOrderItemUpdateRequest(val)
		}
	}

	return res
}

// unmarshalBatchUpdateResultResponseBodyToOrderBatchUpdateResult builds a
// value of type *order.BatchUpdateResult from a value of type
// *BatchUpdateResultResponseBody.
func unmarshalBatchUpdateResultResponseBodyToOrderBatchUpdateResult(v *BatchUpdateResultResponseBody) *order.BatchUpdateResult {
	if v == nil {
		return nil
	}
	res := &order.BatchUpdateResult{
		ID:      *v.ID,
		Success: *v.Success,
		Message: v.Message,
	}

	return res
}

// unmarshalOrderInfoResponseBodyToOrderOrderInfo builds a value of type
// *order.OrderInfo from a value of type *OrderInfoResponseBody.
func unmarshalOrderInfoResponseBodyToOrderOrderInfo(v *OrderInfoResponseBody) *order.OrderInfo {
	if v == nil {
		return nil
	}
	res := &order.OrderInfo{}
	res.List = make([]*order.OrderData, len(v.List))
	for i, val := range v.List {
		res.List[i] = unmarshalOrderDataResponseBodyToOrderOrderData(val)
	}
	res.Meta = unmarshalMetaDataResponseBodyToOrderMetaData(v.Meta)

	return res
}

// unmarshalOrderDataResponseBodyToOrderOrderData builds a value of type
// *order.OrderData from a value of type *OrderDataResponseBody.
func unmarshalOrderDataResponseBodyToOrderOrderData(v *OrderDataResponseBody) *order.OrderData {
	res := &order.OrderData{
		CustomerOrderID: *v.CustomerOrderID,
		Status:          *v.Status,
		OrderNumber:     *v.OrderNumber,
		TrackingNumber:  *v.TrackingNumber,
		TrackingURL:     *v.TrackingURL,
	}
	res.Items = make([]*order.OutboundOrderItem, len(v.Items))
	for i, val := range v.Items {
		res.Items[i] = unmarshalOutboundOrderItemResponseBodyToOrderOutboundOrderItem(val)
	}

	return res
}

// unmarshalOutboundOrderItemResponseBodyToOrderOutboundOrderItem builds a
// value of type *order.OutboundOrderItem from a value of type
// *OutboundOrderItemResponseBody.
func unmarshalOutboundOrderItemResponseBodyToOrderOutboundOrderItem(v *OutboundOrderItemResponseBody) *order.OutboundOrderItem {
	res := &order.OutboundOrderItem{
		ProductName:        *v.ProductName,
		ProductSku:         *v.ProductSku,
		ProductPrice:       *v.ProductPrice,
		Qty:                *v.Qty,
		HsCode:             *v.HsCode,
		DeclaredCnName:     *v.DeclaredCnName,
		DeclaredEnName:     *v.DeclaredEnName,
		DeclaredValueInUsd: *v.DeclaredValueInUsd,
		ProductWeight:      *v.ProductWeight,
		ProductLength:      *v.ProductLength,
		ProductWidth:       *v.ProductWidth,
		ProductHeight:      *v.ProductHeight,
		ProductBarcode:     *v.ProductBarcode,
		DeclaredValueInEur: *v.DeclaredValueInEur,
		RequiresShipping:   v.RequiresShipping,
		ExtOrderItemID:     v.ExtOrderItemID,
		ExtProductID:       v.ExtProductID,
		PlatformProductID:  v.PlatformProductID,
	}
	if v.Material != nil {
		res.Material = *v.Material
	}
	if v.Purpose != nil {
		res.Purpose = *v.Purpose
	}
	res.ProductAttributes = make([]string, len(v.ProductAttributes))
	for i, val := range v.ProductAttributes {
		res.ProductAttributes[i] = val
	}
	if v.Material == nil {
		res.Material = ""
	}
	if v.Purpose == nil {
		res.Purpose = ""
	}

	return res
}

// unmarshalOrderListFiltersResultDataResponseBodyToOrderOrderListFiltersResultData
// builds a value of type *order.OrderListFiltersResultData from a value of
// type *OrderListFiltersResultDataResponseBody.
func unmarshalOrderListFiltersResultDataResponseBodyToOrderOrderListFiltersResultData(v *OrderListFiltersResultDataResponseBody) *order.OrderListFiltersResultData {
	if v == nil {
		return nil
	}
	res := &order.OrderListFiltersResultData{}
	if v.KeywordsTypeList != nil {
		res.KeywordsTypeList = make([]*order.SelectOption, len(v.KeywordsTypeList))
		for i, val := range v.KeywordsTypeList {
			res.KeywordsTypeList[i] = unmarshalSelectOptionResponseBodyToOrderSelectOption(val)
		}
	}
	if v.PlatformList != nil {
		res.PlatformList = make([]*order.SelectOption, len(v.PlatformList))
		for i, val := range v.PlatformList {
			res.PlatformList[i] = unmarshalSelectOptionResponseBodyToOrderSelectOption(val)
		}
	}
	if v.StoreList != nil {
		res.StoreList = make([]*order.SelectOption, len(v.StoreList))
		for i, val := range v.StoreList {
			res.StoreList[i] = unmarshalSelectOptionResponseBodyToOrderSelectOption(val)
		}
	}
	if v.WarehouseList != nil {
		res.WarehouseList = make([]*order.SelectOption, len(v.WarehouseList))
		for i, val := range v.WarehouseList {
			res.WarehouseList[i] = unmarshalSelectOptionResponseBodyToOrderSelectOption(val)
		}
	}
	if v.CountryList != nil {
		res.CountryList = make([]*order.SelectOption, len(v.CountryList))
		for i, val := range v.CountryList {
			res.CountryList[i] = unmarshalSelectOptionResponseBodyToOrderSelectOption(val)
		}
	}

	return res
}

// unmarshalSelectOptionResponseBodyToOrderSelectOption builds a value of type
// *order.SelectOption from a value of type *SelectOptionResponseBody.
func unmarshalSelectOptionResponseBodyToOrderSelectOption(v *SelectOptionResponseBody) *order.SelectOption {
	if v == nil {
		return nil
	}
	res := &order.SelectOption{}
	if v.Value != nil {
		res.Value = *v.Value
	}
	if v.Label != nil {
		res.Label = *v.Label
	}
	if v.Value == nil {
		res.Value = ""
	}
	if v.Label == nil {
		res.Label = ""
	}

	return res
}

// unmarshalOrderCountDataResponseBodyToOrderOrderCountData builds a value of
// type *order.OrderCountData from a value of type *OrderCountDataResponseBody.
func unmarshalOrderCountDataResponseBodyToOrderOrderCountData(v *OrderCountDataResponseBody) *order.OrderCountData {
	if v == nil {
		return nil
	}
	res := &order.OrderCountData{
		Total:       v.Total,
		ReadyToShip: v.ReadyToShip,
		Pending:     v.Pending,
		Shipped:     v.Shipped,
		Cancelled:   v.Cancelled,
		Exception:   v.Exception,
	}

	return res
}

// unmarshalGetOrderListDataResponseBodyToOrderGetOrderListData builds a value
// of type *order.GetOrderListData from a value of type
// *GetOrderListDataResponseBody.
func unmarshalGetOrderListDataResponseBodyToOrderGetOrderListData(v *GetOrderListDataResponseBody) *order.GetOrderListData {
	if v == nil {
		return nil
	}
	res := &order.GetOrderListData{}
	if v.List != nil {
		res.List = make([]*order.ListItem, len(v.List))
		for i, val := range v.List {
			res.List[i] = unmarshalListItemResponseBodyToOrderListItem(val)
		}
	}
	if v.Mate != nil {
		res.Mate = unmarshalMetaDataResponseBodyToOrderMetaData(v.Mate)
	}

	return res
}

// unmarshalListItemResponseBodyToOrderListItem builds a value of type
// *order.ListItem from a value of type *ListItemResponseBody.
func unmarshalListItemResponseBodyToOrderListItem(v *ListItemResponseBody) *order.ListItem {
	if v == nil {
		return nil
	}
	res := &order.ListItem{
		ID:                v.ID,
		PlatformOrderID:   v.PlatformOrderID,
		PlatformOrderNo:   v.PlatformOrderNo,
		Platform:          v.Platform,
		StoreID:           v.StoreID,
		StoreName:         v.StoreName,
		ChannelID:         v.ChannelID,
		ChannelName:       v.ChannelName,
		ChannelType:       v.ChannelType,
		ChannelTypeName:   v.ChannelTypeName,
		DeliveryCost:      v.DeliveryCost,
		NssTrackingNumber: v.NssTrackingNumber,
		WarehouseID:       v.WarehouseID,
		WarehouseName:     v.WarehouseName,
		Status:            v.Status,
		StatusName:        v.StatusName,
		CreatedAt:         v.CreatedAt,
		ShipDate:          v.ShipDate,
	}
	if v.ShippingInfo != nil {
		res.ShippingInfo = unmarshalOrderListItemShipInfoResponseBodyToOrderOrderListItemShipInfo(v.ShippingInfo)
	}
	if v.Items != nil {
		res.Items = make([]*order.OrderItem, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = unmarshalOrderItemResponseBodyToOrderOrderItem(val)
		}
	}
	if v.ChannelOptions != nil {
		res.ChannelOptions = make([]*order.ChannelOption, len(v.ChannelOptions))
		for i, val := range v.ChannelOptions {
			res.ChannelOptions[i] = unmarshalChannelOptionResponseBodyToOrderChannelOption(val)
		}
	}
	if v.HoldReasons != nil {
		res.HoldReasons = make([]*order.HoldReason, len(v.HoldReasons))
		for i, val := range v.HoldReasons {
			res.HoldReasons[i] = unmarshalHoldReasonResponseBodyToOrderHoldReason(val)
		}
	}

	return res
}

// unmarshalOrderListItemShipInfoResponseBodyToOrderOrderListItemShipInfo
// builds a value of type *order.OrderListItemShipInfo from a value of type
// *OrderListItemShipInfoResponseBody.
func unmarshalOrderListItemShipInfoResponseBodyToOrderOrderListItemShipInfo(v *OrderListItemShipInfoResponseBody) *order.OrderListItemShipInfo {
	if v == nil {
		return nil
	}
	res := &order.OrderListItemShipInfo{
		ShippingName:    v.ShippingName,
		ShippingCountry: v.ShippingCountry,
		ZipCode:         v.ZipCode,
	}

	return res
}

// unmarshalOrderItemResponseBodyToOrderOrderItem builds a value of type
// *order.OrderItem from a value of type *OrderItemResponseBody.
func unmarshalOrderItemResponseBodyToOrderOrderItem(v *OrderItemResponseBody) *order.OrderItem {
	if v == nil {
		return nil
	}
	res := &order.OrderItem{
		Sku: v.Sku,
		Qty: v.Qty,
	}

	return res
}

// unmarshalChannelOptionResponseBodyToOrderChannelOption builds a value of
// type *order.ChannelOption from a value of type *ChannelOptionResponseBody.
func unmarshalChannelOptionResponseBodyToOrderChannelOption(v *ChannelOptionResponseBody) *order.ChannelOption {
	if v == nil {
		return nil
	}
	res := &order.ChannelOption{
		ID:              v.ID,
		ChannelName:     v.ChannelName,
		ShippingCost:    v.ShippingCost,
		ChannelTypeName: v.ChannelTypeName,
		MinNormalDays:   v.MinNormalDays,
		MaxNormalDays:   v.MaxNormalDays,
		ChargeWeight:    v.ChargeWeight,
		FuelFee:         v.FuelFee,
		MiscFee:         v.MiscFee,
		ProcessingFee:   v.ProcessingFee,
		TotalFee:        v.TotalFee,
	}

	return res
}

// unmarshalHoldReasonResponseBodyToOrderHoldReason builds a value of type
// *order.HoldReason from a value of type *HoldReasonResponseBody.
func unmarshalHoldReasonResponseBodyToOrderHoldReason(v *HoldReasonResponseBody) *order.HoldReason {
	if v == nil {
		return nil
	}
	res := &order.HoldReason{
		Type:   v.Type,
		Reason: v.Reason,
	}

	return res
}

// unmarshalUploadOrdersDataResponseBodyToOrderUploadOrdersData builds a value
// of type *order.UploadOrdersData from a value of type
// *UploadOrdersDataResponseBody.
func unmarshalUploadOrdersDataResponseBodyToOrderUploadOrdersData(v *UploadOrdersDataResponseBody) *order.UploadOrdersData {
	if v == nil {
		return nil
	}
	res := &order.UploadOrdersData{
		TotalCount:   v.TotalCount,
		SuccessCount: v.SuccessCount,
		FailCount:    v.FailCount,
		ResultFile:   v.ResultFile,
	}

	return res
}
