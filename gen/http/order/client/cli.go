// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	order "goa/gen/order"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreateInboundOrderPayload builds the payload for the order
// create_inbound_order endpoint from CLI flags.
func BuildCreateInboundOrderPayload(orderCreateInboundOrderBody string, orderCreateInboundOrderAuthorization string, orderCreateInboundOrderToken string) (*order.InboundOrder, error) {
	var err error
	var body CreateInboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreateInboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"certificate_code\": \"3455233\",\n         \"certificate_period\": \"2028-01-01\",\n         \"certificate_type\": \"ID\",\n         \"city_name\": \"SZ\",\n         \"company\": \"China\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"email\": \"123@test.com\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"customer_order_id\": \"xxx1234\",\n      \"description\": \"description\",\n      \"estimated_arrival_at\": \"2021-01-12 09:34:09\",\n      \"id\": 1,\n      \"is_pickup\": true,\n      \"items\": [\n         {\n            \"product_barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"product_barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"tracking_number\": \"YT000001\",\n      \"type\": 1,\n      \"warehouse_id\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 100, false))
		}
		if body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", body.WarehouseID, 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if body.TrackingNumber != nil {
			if utf8.RuneCountInString(*body.TrackingNumber) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", *body.TrackingNumber, utf8.RuneCountInString(*body.TrackingNumber), 50, false))
			}
		}
		if body.RequestedPickupAt != nil {
			if utf8.RuneCountInString(*body.RequestedPickupAt) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", *body.RequestedPickupAt, utf8.RuneCountInString(*body.RequestedPickupAt), 30, false))
			}
		}
		if body.EstimatedArrivalAt != nil {
			if utf8.RuneCountInString(*body.EstimatedArrivalAt) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", *body.EstimatedArrivalAt, utf8.RuneCountInString(*body.EstimatedArrivalAt), 30, false))
			}
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if body.Address != nil {
			if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderCreateInboundOrderAuthorization != "" {
			authorization = &orderCreateInboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderCreateInboundOrderToken != "" {
			token = &orderCreateInboundOrderToken
		}
	}
	v := &order.InboundOrder{
		CustomerOrderID:    body.CustomerOrderID,
		WarehouseID:        body.WarehouseID,
		CustomerCode:       body.CustomerCode,
		TrackingNumber:     body.TrackingNumber,
		RequestedPickupAt:  body.RequestedPickupAt,
		EstimatedArrivalAt: body.EstimatedArrivalAt,
		Type:               body.Type,
		IsPickup:           body.IsPickup,
		Description:        body.Description,
		ID:                 body.ID,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildUpdateInboundOrderPayload builds the payload for the order
// update_inbound_order endpoint from CLI flags.
func BuildUpdateInboundOrderPayload(orderUpdateInboundOrderBody string, orderUpdateInboundOrderAuthorization string, orderUpdateInboundOrderToken string) (*order.InboundOrder, error) {
	var err error
	var body UpdateInboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderUpdateInboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"certificate_code\": \"3455233\",\n         \"certificate_period\": \"2028-01-01\",\n         \"certificate_type\": \"ID\",\n         \"city_name\": \"SZ\",\n         \"company\": \"China\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"email\": \"123@test.com\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"customer_order_id\": \"xxx1234\",\n      \"description\": \"description\",\n      \"estimated_arrival_at\": \"2021-01-12 09:34:09\",\n      \"id\": 1,\n      \"is_pickup\": true,\n      \"items\": [\n         {\n            \"product_barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"product_barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"tracking_number\": \"YT000001\",\n      \"type\": 1,\n      \"warehouse_id\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 100, false))
		}
		if body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", body.WarehouseID, 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if body.TrackingNumber != nil {
			if utf8.RuneCountInString(*body.TrackingNumber) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", *body.TrackingNumber, utf8.RuneCountInString(*body.TrackingNumber), 50, false))
			}
		}
		if body.RequestedPickupAt != nil {
			if utf8.RuneCountInString(*body.RequestedPickupAt) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", *body.RequestedPickupAt, utf8.RuneCountInString(*body.RequestedPickupAt), 30, false))
			}
		}
		if body.EstimatedArrivalAt != nil {
			if utf8.RuneCountInString(*body.EstimatedArrivalAt) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", *body.EstimatedArrivalAt, utf8.RuneCountInString(*body.EstimatedArrivalAt), 30, false))
			}
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if body.Address != nil {
			if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderUpdateInboundOrderAuthorization != "" {
			authorization = &orderUpdateInboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderUpdateInboundOrderToken != "" {
			token = &orderUpdateInboundOrderToken
		}
	}
	v := &order.InboundOrder{
		CustomerOrderID:    body.CustomerOrderID,
		WarehouseID:        body.WarehouseID,
		CustomerCode:       body.CustomerCode,
		TrackingNumber:     body.TrackingNumber,
		RequestedPickupAt:  body.RequestedPickupAt,
		EstimatedArrivalAt: body.EstimatedArrivalAt,
		Type:               body.Type,
		IsPickup:           body.IsPickup,
		Description:        body.Description,
		ID:                 body.ID,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildCreatePickupOrderPayload builds the payload for the order
// create_pickup_order endpoint from CLI flags.
func BuildCreatePickupOrderPayload(orderCreatePickupOrderBody string, orderCreatePickupOrderAuthorization string, orderCreatePickupOrderToken string) (*order.PickupOrder, error) {
	var err error
	var body CreatePickupOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreatePickupOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"certificate_code\": \"3455233\",\n         \"certificate_period\": \"2028-01-01\",\n         \"certificate_type\": \"ID\",\n         \"city_name\": \"SZ\",\n         \"company\": \"China\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"email\": \"123@test.com\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"items\": [\n         {\n            \"product_barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"type\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		if utf8.RuneCountInString(body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", body.RequestedPickupAt, utf8.RuneCountInString(body.RequestedPickupAt), 30, false))
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		if body.Address != nil {
			if err2 := ValidateShippingAddressRequestBody(body.Address); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderCreatePickupOrderAuthorization != "" {
			authorization = &orderCreatePickupOrderAuthorization
		}
	}
	var token *string
	{
		if orderCreatePickupOrderToken != "" {
			token = &orderCreatePickupOrderToken
		}
	}
	v := &order.PickupOrder{
		RequestedPickupAt: body.RequestedPickupAt,
		Type:              body.Type,
		CustomerCode:      body.CustomerCode,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildBatchQueryInboundOrderPayload builds the payload for the order
// batch_query_inbound_order endpoint from CLI flags.
func BuildBatchQueryInboundOrderPayload(orderBatchQueryInboundOrderOrderNumbers string, orderBatchQueryInboundOrderStatus string, orderBatchQueryInboundOrderCurrent string, orderBatchQueryInboundOrderPageSize string, orderBatchQueryInboundOrderAuthorization string, orderBatchQueryInboundOrderToken string) (*order.GetOrder, error) {
	var err error
	var orderNumbers []string
	{
		if orderBatchQueryInboundOrderOrderNumbers != "" {
			err = json.Unmarshal([]byte(orderBatchQueryInboundOrderOrderNumbers), &orderNumbers)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for orderNumbers, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"xxx1234\"\n   ]'")
			}
			if len(orderNumbers) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("orderNumbers", orderNumbers, len(orderNumbers), 50, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var status *int
	{
		if orderBatchQueryInboundOrderStatus != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryInboundOrderStatus, 10, 64)
			val := int(v)
			status = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for status, must be INT")
			}
			if status != nil {
				if *status < 0 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("status", *status, 0, true))
				}
			}
			if status != nil {
				if *status > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("status", *status, 100, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var current *int
	{
		if orderBatchQueryInboundOrderCurrent != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryInboundOrderCurrent, 10, 64)
			val := int(v)
			current = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for current, must be INT")
			}
			if current != nil {
				if *current < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("current", *current, 1, true))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageSize *int
	{
		if orderBatchQueryInboundOrderPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryInboundOrderPageSize, 10, 64)
			val := int(v)
			pageSize = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize != nil {
				if *pageSize < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", *pageSize, 1, true))
				}
			}
			if pageSize != nil {
				if *pageSize > 50 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", *pageSize, 50, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var authorization *string
	{
		if orderBatchQueryInboundOrderAuthorization != "" {
			authorization = &orderBatchQueryInboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderBatchQueryInboundOrderToken != "" {
			token = &orderBatchQueryInboundOrderToken
		}
	}
	v := &order.GetOrder{}
	v.OrderNumbers = orderNumbers
	v.Status = status
	v.Current = current
	v.PageSize = pageSize
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildGetInboundOrderPayload builds the payload for the order
// get_inbound_order endpoint from CLI flags.
func BuildGetInboundOrderPayload(orderGetInboundOrderOrderNumber string, orderGetInboundOrderAuthorization string, orderGetInboundOrderToken string) (*order.QueryOrder, error) {
	var err error
	var orderNumber string
	{
		orderNumber = orderGetInboundOrderOrderNumber
		if utf8.RuneCountInString(orderNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orderNumber", orderNumber, utf8.RuneCountInString(orderNumber), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderGetInboundOrderAuthorization != "" {
			authorization = &orderGetInboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderGetInboundOrderToken != "" {
			token = &orderGetInboundOrderToken
		}
	}
	v := &order.QueryOrder{}
	v.OrderNumber = orderNumber
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildCreateOutboundOrderPayload builds the payload for the order
// create_outbound_order endpoint from CLI flags.
func BuildCreateOutboundOrderPayload(orderCreateOutboundOrderBody string, orderCreateOutboundOrderAuthorization string, orderCreateOutboundOrderToken string) (*order.OutboundOrder, error) {
	var err error
	var body CreateOutboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreateOutboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"channel_id\": 1,\n      \"country_code\": \"US\",\n      \"currency\": \"USD\",\n      \"customer_code\": \"YT\",\n      \"customer_order_id\": \"YT000001\",\n      \"customer_tariff_number\": \"xxx\",\n      \"description\": \"description\",\n      \"enable_prepay_tariff\": false,\n      \"estimated_weight\": 100,\n      \"id\": 1,\n      \"inbound_order_number\": \"246938764\",\n      \"items\": [\n         {\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"Nisi voluptate.\",\n            \"ext_product_id\": \"Saepe ipsum sint eos praesentium ut.\",\n            \"hs_code\": \"xxx\",\n            \"material\": \"\",\n            \"platform_product_id\": 1717737989,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_barcode\": \"xxx\",\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"\",\n            \"qty\": 1,\n            \"requires_shipping\": true\n         },\n         {\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"Nisi voluptate.\",\n            \"ext_product_id\": \"Saepe ipsum sint eos praesentium ut.\",\n            \"hs_code\": \"xxx\",\n            \"material\": \"\",\n            \"platform_product_id\": 1717737989,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_barcode\": \"xxx\",\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"\",\n            \"qty\": 1,\n            \"requires_shipping\": true\n         },\n         {\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"Nisi voluptate.\",\n            \"ext_product_id\": \"Saepe ipsum sint eos praesentium ut.\",\n            \"hs_code\": \"xxx\",\n            \"material\": \"\",\n            \"platform_product_id\": 1717737989,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_barcode\": \"xxx\",\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"\",\n            \"qty\": 1,\n            \"requires_shipping\": true\n         }\n      ],\n      \"package_id\": \"xxx\",\n      \"platform_created_at\": \"2022-03-10T06:35:33\",\n      \"platform_order_no\": \"00001\",\n      \"receiver_info\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"certificate_code\": \"3455233\",\n         \"certificate_period\": \"2028-01-01\",\n         \"certificate_type\": \"ID\",\n         \"city_name\": \"SZ\",\n         \"company\": \"China\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"email\": \"123@test.com\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"remark\": \"remark\",\n      \"request_shipping_at\": \"2022-03-10 06:35:33\",\n      \"shipping_type\": 1,\n      \"store_id\": 0,\n      \"total_price\": 980.67,\n      \"type\": 1,\n      \"vat_number\": \"var number\"\n   }'")
		}
		if body.ReceiverInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("receiver_info", "body"))
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if !(body.ShippingType == 1 || body.ShippingType == 2 || body.ShippingType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.shipping_type", body.ShippingType, []interface{}{1, 2, 3}))
		}
		if body.ReceiverInfo != nil {
			if err2 := ValidateShippingAddressRequestBody(body.ReceiverInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateOutboundOrderItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderCreateOutboundOrderAuthorization != "" {
			authorization = &orderCreateOutboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderCreateOutboundOrderToken != "" {
			token = &orderCreateOutboundOrderToken
		}
	}
	v := &order.OutboundOrder{
		CustomerOrderID:      body.CustomerOrderID,
		CustomerCode:         body.CustomerCode,
		TotalPrice:           body.TotalPrice,
		Currency:             body.Currency,
		CustomerTariffNumber: body.CustomerTariffNumber,
		CountryCode:          body.CountryCode,
		EnablePrepayTariff:   body.EnablePrepayTariff,
		ShippingType:         body.ShippingType,
		ChannelID:            body.ChannelID,
		Description:          body.Description,
		InboundOrderNumber:   body.InboundOrderNumber,
		Type:                 body.Type,
		ID:                   body.ID,
		PackageID:            body.PackageID,
		StoreID:              body.StoreID,
		EstimatedWeight:      body.EstimatedWeight,
		PlatformOrderNo:      body.PlatformOrderNo,
		PlatformCreatedAt:    body.PlatformCreatedAt,
		RequestShippingAt:    body.RequestShippingAt,
		Remark:               body.Remark,
		VatNumber:            body.VatNumber,
	}
	if body.ReceiverInfo != nil {
		v.ReceiverInfo = marshalShippingAddressRequestBodyToOrderShippingAddress(body.ReceiverInfo)
	}
	if body.Items != nil {
		v.Items = make([]*order.OutboundOrderItem, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(val)
		}
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildUpdateOutboundOrderPayload builds the payload for the order
// update_outbound_order endpoint from CLI flags.
func BuildUpdateOutboundOrderPayload(orderUpdateOutboundOrderBody string, orderUpdateOutboundOrderID string, orderUpdateOutboundOrderAuthorization string, orderUpdateOutboundOrderToken string) (*order.OutboundOrderUpdateRequest, error) {
	var err error
	var body UpdateOutboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderUpdateOutboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"customer_tariff_country_code\": \"US\",\n      \"customer_tariff_number\": \"xxx\",\n      \"customer_tariff_number_type\": 0,\n      \"description\": \"description\",\n      \"enable_prepay_tariff\": false,\n      \"items\": [\n         {\n            \"Authorization\": \"Eius accusantium possimus.\",\n            \"barcode\": \"xxx\",\n            \"customer_code\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 9.8,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"xxxx\",\n            \"ext_product_id\": \"xxxx\",\n            \"hs_code\": \"xxx\",\n            \"id\": 1,\n            \"images\": [\n               \"url1\",\n               \"url2\"\n            ],\n            \"material\": \"xxx\",\n            \"outbound_order_id\": 1,\n            \"platform_product_id\": 0,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"xxx\",\n            \"qty\": 1,\n            \"requires_shipping\": true,\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n         },\n         {\n            \"Authorization\": \"Eius accusantium possimus.\",\n            \"barcode\": \"xxx\",\n            \"customer_code\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 9.8,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"xxxx\",\n            \"ext_product_id\": \"xxxx\",\n            \"hs_code\": \"xxx\",\n            \"id\": 1,\n            \"images\": [\n               \"url1\",\n               \"url2\"\n            ],\n            \"material\": \"xxx\",\n            \"outbound_order_id\": 1,\n            \"platform_product_id\": 0,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"xxx\",\n            \"qty\": 1,\n            \"requires_shipping\": true,\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n         },\n         {\n            \"Authorization\": \"Eius accusantium possimus.\",\n            \"barcode\": \"xxx\",\n            \"customer_code\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 9.8,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"xxxx\",\n            \"ext_product_id\": \"xxxx\",\n            \"hs_code\": \"xxx\",\n            \"id\": 1,\n            \"images\": [\n               \"url1\",\n               \"url2\"\n            ],\n            \"material\": \"xxx\",\n            \"outbound_order_id\": 1,\n            \"platform_product_id\": 0,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"xxx\",\n            \"qty\": 1,\n            \"requires_shipping\": true,\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n         },\n         {\n            \"Authorization\": \"Eius accusantium possimus.\",\n            \"barcode\": \"xxx\",\n            \"customer_code\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 9.8,\n            \"declared_value_in_usd\": 10.07,\n            \"ext_order_item_id\": \"xxxx\",\n            \"ext_product_id\": \"xxxx\",\n            \"hs_code\": \"xxx\",\n            \"id\": 1,\n            \"images\": [\n               \"url1\",\n               \"url2\"\n            ],\n            \"material\": \"xxx\",\n            \"outbound_order_id\": 1,\n            \"platform_product_id\": 0,\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"purpose\": \"xxx\",\n            \"qty\": 1,\n            \"requires_shipping\": true,\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n         }\n      ],\n      \"offline\": true,\n      \"receiver_info\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"certificate_code\": \"3455233\",\n         \"certificate_period\": \"2028-01-01\",\n         \"certificate_type\": \"ID\",\n         \"city_name\": \"SZ\",\n         \"company\": \"China\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"email\": \"123@test.com\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"warehouse_id\": 1\n   }'")
		}
		if body.ReceiverInfo != nil {
			if err2 := ValidateAddressRequestBody(body.ReceiverInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateOutboundOrderItemUpdateRequestRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id int32
	{
		var v int64
		v, err = strconv.ParseInt(orderUpdateOutboundOrderID, 10, 32)
		id = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT32")
		}
	}
	var authorization *string
	{
		if orderUpdateOutboundOrderAuthorization != "" {
			authorization = &orderUpdateOutboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderUpdateOutboundOrderToken != "" {
			token = &orderUpdateOutboundOrderToken
		}
	}
	v := &order.OutboundOrderUpdateRequest{
		WarehouseID:               body.WarehouseID,
		Offline:                   body.Offline,
		EnablePrepayTariff:        body.EnablePrepayTariff,
		CustomerTariffNumberType:  body.CustomerTariffNumberType,
		CustomerTariffCountryCode: body.CustomerTariffCountryCode,
		CustomerTariffNumber:      body.CustomerTariffNumber,
		Description:               body.Description,
	}
	if body.ReceiverInfo != nil {
		v.ReceiverInfo = marshalAddressRequestBodyToOrderAddress(body.ReceiverInfo)
	}
	if body.Items != nil {
		v.Items = make([]*order.OutboundOrderItemUpdateRequest, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalOutboundOrderItemUpdateRequestRequestBodyToOrderOutboundOrderItemUpdateRequest(val)
		}
	}
	v.ID = id
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildBatchUpdateOutboundOrderPayload builds the payload for the order
// batch_update_outbound_order endpoint from CLI flags.
func BuildBatchUpdateOutboundOrderPayload(orderBatchUpdateOutboundOrderBody string, orderBatchUpdateOutboundOrderAuthorization string, orderBatchUpdateOutboundOrderToken string) (*order.BatchUpdateOrderRequest, error) {
	var err error
	var body BatchUpdateOutboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderBatchUpdateOutboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"orders\": [\n         {\n            \"Authorization\": \"Sunt tempora qui quo in ad in.\",\n            \"customer_tariff_country_code\": \"US\",\n            \"customer_tariff_number\": \"xxx\",\n            \"customer_tariff_number_type\": 0,\n            \"description\": \"description\",\n            \"enable_prepay_tariff\": false,\n            \"id\": 1,\n            \"items\": [\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               }\n            ],\n            \"offline\": true,\n            \"receiver_info\": {\n               \"address1\": \"address1\",\n               \"address2\": \"address2\",\n               \"certificate_code\": \"3455233\",\n               \"certificate_period\": \"2028-01-01\",\n               \"certificate_type\": \"ID\",\n               \"city_name\": \"SZ\",\n               \"company\": \"China\",\n               \"country_code\": \"US\",\n               \"country_name\": \"US\",\n               \"email\": \"123@test.com\",\n               \"first_name\": \"He\",\n               \"last_name\": \"John\",\n               \"name\": \"He\",\n               \"phone_number\": \"150xxxxxxxx\",\n               \"state_code\": \"S\",\n               \"state_name\": \"U\",\n               \"zip_code\": \"10016\"\n            },\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\",\n            \"warehouse_id\": 1\n         },\n         {\n            \"Authorization\": \"Sunt tempora qui quo in ad in.\",\n            \"customer_tariff_country_code\": \"US\",\n            \"customer_tariff_number\": \"xxx\",\n            \"customer_tariff_number_type\": 0,\n            \"description\": \"description\",\n            \"enable_prepay_tariff\": false,\n            \"id\": 1,\n            \"items\": [\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               },\n               {\n                  \"Authorization\": \"Eius accusantium possimus.\",\n                  \"barcode\": \"xxx\",\n                  \"customer_code\": \"xxx\",\n                  \"declared_cn_name\": \"NSS\",\n                  \"declared_en_name\": \"NSS\",\n                  \"declared_value_in_eur\": 9.8,\n                  \"declared_value_in_usd\": 10.07,\n                  \"ext_order_item_id\": \"xxxx\",\n                  \"ext_product_id\": \"xxxx\",\n                  \"hs_code\": \"xxx\",\n                  \"id\": 1,\n                  \"images\": [\n                     \"url1\",\n                     \"url2\"\n                  ],\n                  \"material\": \"xxx\",\n                  \"outbound_order_id\": 1,\n                  \"platform_product_id\": 0,\n                  \"product_attributes\": [\n                     \"battery\",\n                     \"cosmetic\",\n                     \"liquid\",\n                     \"magnetic\"\n                  ],\n                  \"product_height\": 10,\n                  \"product_length\": 10,\n                  \"product_name\": \"NSS mate40\",\n                  \"product_price\": 10.3,\n                  \"product_sku\": \"xxxx\",\n                  \"product_weight\": 10,\n                  \"product_width\": 10,\n                  \"purpose\": \"xxx\",\n                  \"qty\": 1,\n                  \"requires_shipping\": true,\n                  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n               }\n            ],\n            \"offline\": true,\n            \"receiver_info\": {\n               \"address1\": \"address1\",\n               \"address2\": \"address2\",\n               \"certificate_code\": \"3455233\",\n               \"certificate_period\": \"2028-01-01\",\n               \"certificate_type\": \"ID\",\n               \"city_name\": \"SZ\",\n               \"company\": \"China\",\n               \"country_code\": \"US\",\n               \"country_name\": \"US\",\n               \"email\": \"123@test.com\",\n               \"first_name\": \"He\",\n               \"last_name\": \"John\",\n               \"name\": \"He\",\n               \"phone_number\": \"150xxxxxxxx\",\n               \"state_code\": \"S\",\n               \"state_name\": \"U\",\n               \"zip_code\": \"10016\"\n            },\n            \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\",\n            \"warehouse_id\": 1\n         }\n      ]\n   }'")
		}
	}
	var authorization *string
	{
		if orderBatchUpdateOutboundOrderAuthorization != "" {
			authorization = &orderBatchUpdateOutboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderBatchUpdateOutboundOrderToken != "" {
			token = &orderBatchUpdateOutboundOrderToken
		}
	}
	v := &order.BatchUpdateOrderRequest{}
	if body.Orders != nil {
		v.Orders = make([]*order.OutboundOrderUpdateRequest, len(body.Orders))
		for i, val := range body.Orders {
			v.Orders[i] = marshalOutboundOrderUpdateRequestRequestBodyToOrderOutboundOrderUpdateRequest(val)
		}
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildCreateOutboundOrderItemPayload builds the payload for the order
// create_outbound_order_item endpoint from CLI flags.
func BuildCreateOutboundOrderItemPayload(orderCreateOutboundOrderItemBody string, orderCreateOutboundOrderItemAuthorization string, orderCreateOutboundOrderItemToken string) (*order.OutboundOrderItemCreateRequest, error) {
	var err error
	var body CreateOutboundOrderItemRequestBody
	{
		err = json.Unmarshal([]byte(orderCreateOutboundOrderItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"barcode\": \"xxx\",\n      \"customer_code\": \"xxx\",\n      \"declared_cn_name\": \"NSS\",\n      \"declared_en_name\": \"NSS\",\n      \"declared_value_in_eur\": 9.8,\n      \"declared_value_in_usd\": 10.07,\n      \"ext_order_item_id\": \"xxxx\",\n      \"hs_code\": \"xxx\",\n      \"images\": [\n         \"url1\",\n         \"url2\"\n      ],\n      \"material\": \"xxx\",\n      \"outbound_order_id\": 1,\n      \"product_attributes\": [\n         \"battery\",\n         \"cosmetic\",\n         \"liquid\",\n         \"magnetic\"\n      ],\n      \"product_height\": 10,\n      \"product_length\": 10,\n      \"product_name\": \"NSS mate40\",\n      \"product_price\": 10.3,\n      \"product_sku\": \"xxxx\",\n      \"product_weight\": 10,\n      \"product_width\": 10,\n      \"purpose\": \"xxx\",\n      \"qty\": 1,\n      \"requires_shipping\": true\n   }'")
		}
		if body.DeclaredValueInUsd != nil {
			if *body.DeclaredValueInUsd < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
			}
		}
		if body.DeclaredValueInEur != nil {
			if *body.DeclaredValueInEur < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderCreateOutboundOrderItemAuthorization != "" {
			authorization = &orderCreateOutboundOrderItemAuthorization
		}
	}
	var token *string
	{
		if orderCreateOutboundOrderItemToken != "" {
			token = &orderCreateOutboundOrderItemToken
		}
	}
	v := &order.OutboundOrderItemCreateRequest{
		OutboundOrderID:    body.OutboundOrderID,
		ProductSku:         body.ProductSku,
		ExtOrderItemID:     body.ExtOrderItemID,
		ProductName:        body.ProductName,
		ProductPrice:       body.ProductPrice,
		Barcode:            body.Barcode,
		Qty:                body.Qty,
		HsCode:             body.HsCode,
		DeclaredCnName:     body.DeclaredCnName,
		DeclaredEnName:     body.DeclaredEnName,
		DeclaredValueInUsd: body.DeclaredValueInUsd,
		DeclaredValueInEur: body.DeclaredValueInEur,
		ProductWeight:      body.ProductWeight,
		CustomerCode:       body.CustomerCode,
		Material:           body.Material,
		Purpose:            body.Purpose,
		RequiresShipping:   body.RequiresShipping,
		ProductLength:      body.ProductLength,
		ProductWidth:       body.ProductWidth,
		ProductHeight:      body.ProductHeight,
	}
	if body.ProductAttributes != nil {
		v.ProductAttributes = make([]string, len(body.ProductAttributes))
		for i, val := range body.ProductAttributes {
			v.ProductAttributes[i] = val
		}
	}
	if body.Images != nil {
		v.Images = make([]string, len(body.Images))
		for i, val := range body.Images {
			v.Images[i] = val
		}
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildUpdateOutboundOrderItemPayload builds the payload for the order
// update_outbound_order_item endpoint from CLI flags.
func BuildUpdateOutboundOrderItemPayload(orderUpdateOutboundOrderItemBody string, orderUpdateOutboundOrderItemID string, orderUpdateOutboundOrderItemAuthorization string, orderUpdateOutboundOrderItemToken string) (*order.OutboundOrderItemUpdateRequest, error) {
	var err error
	var body UpdateOutboundOrderItemRequestBody
	{
		err = json.Unmarshal([]byte(orderUpdateOutboundOrderItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"barcode\": \"xxx\",\n      \"customer_code\": \"xxx\",\n      \"declared_cn_name\": \"NSS\",\n      \"declared_en_name\": \"NSS\",\n      \"declared_value_in_eur\": 9.8,\n      \"declared_value_in_usd\": 10.07,\n      \"ext_order_item_id\": \"xxxx\",\n      \"ext_product_id\": \"xxxx\",\n      \"hs_code\": \"xxx\",\n      \"images\": [\n         \"url1\",\n         \"url2\"\n      ],\n      \"material\": \"xxx\",\n      \"outbound_order_id\": 1,\n      \"platform_product_id\": 0,\n      \"product_attributes\": [\n         \"battery\",\n         \"cosmetic\",\n         \"liquid\",\n         \"magnetic\"\n      ],\n      \"product_height\": 10,\n      \"product_length\": 10,\n      \"product_name\": \"NSS mate40\",\n      \"product_price\": 10.3,\n      \"product_sku\": \"xxxx\",\n      \"product_weight\": 10,\n      \"product_width\": 10,\n      \"purpose\": \"xxx\",\n      \"qty\": 1,\n      \"requires_shipping\": true\n   }'")
		}
	}
	var id int64
	{
		id, err = strconv.ParseInt(orderUpdateOutboundOrderItemID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT64")
		}
	}
	var authorization *string
	{
		if orderUpdateOutboundOrderItemAuthorization != "" {
			authorization = &orderUpdateOutboundOrderItemAuthorization
		}
	}
	var token *string
	{
		if orderUpdateOutboundOrderItemToken != "" {
			token = &orderUpdateOutboundOrderItemToken
		}
	}
	v := &order.OutboundOrderItemUpdateRequest{
		OutboundOrderID:    body.OutboundOrderID,
		ProductSku:         body.ProductSku,
		ExtOrderItemID:     body.ExtOrderItemID,
		ProductName:        body.ProductName,
		ProductPrice:       body.ProductPrice,
		Barcode:            body.Barcode,
		Qty:                body.Qty,
		HsCode:             body.HsCode,
		DeclaredCnName:     body.DeclaredCnName,
		DeclaredEnName:     body.DeclaredEnName,
		DeclaredValueInUsd: body.DeclaredValueInUsd,
		DeclaredValueInEur: body.DeclaredValueInEur,
		ProductWeight:      body.ProductWeight,
		CustomerCode:       body.CustomerCode,
		Material:           body.Material,
		Purpose:            body.Purpose,
		RequiresShipping:   body.RequiresShipping,
		ProductLength:      body.ProductLength,
		ProductWidth:       body.ProductWidth,
		ProductHeight:      body.ProductHeight,
		ExtProductID:       body.ExtProductID,
		PlatformProductID:  body.PlatformProductID,
	}
	if body.ProductAttributes != nil {
		v.ProductAttributes = make([]string, len(body.ProductAttributes))
		for i, val := range body.ProductAttributes {
			v.ProductAttributes[i] = val
		}
	}
	if body.Images != nil {
		v.Images = make([]string, len(body.Images))
		for i, val := range body.Images {
			v.Images[i] = val
		}
	}
	v.ID = &id
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildDeleteOutboundOrderItemPayload builds the payload for the order
// delete_outbound_order_item endpoint from CLI flags.
func BuildDeleteOutboundOrderItemPayload(orderDeleteOutboundOrderItemID string, orderDeleteOutboundOrderItemAuthorization string, orderDeleteOutboundOrderItemToken string) (*order.DeleteOutboundItemRequest, error) {
	var err error
	var id int64
	{
		id, err = strconv.ParseInt(orderDeleteOutboundOrderItemID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT64")
		}
	}
	var authorization *string
	{
		if orderDeleteOutboundOrderItemAuthorization != "" {
			authorization = &orderDeleteOutboundOrderItemAuthorization
		}
	}
	var token *string
	{
		if orderDeleteOutboundOrderItemToken != "" {
			token = &orderDeleteOutboundOrderItemToken
		}
	}
	v := &order.DeleteOutboundItemRequest{}
	v.ID = id
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildBatchQueryOutboundOrderPayload builds the payload for the order
// batch_query_outbound_order endpoint from CLI flags.
func BuildBatchQueryOutboundOrderPayload(orderBatchQueryOutboundOrderOrderNumbers string, orderBatchQueryOutboundOrderStatus string, orderBatchQueryOutboundOrderCurrent string, orderBatchQueryOutboundOrderPageSize string, orderBatchQueryOutboundOrderAuthorization string, orderBatchQueryOutboundOrderToken string) (*order.GetOrder, error) {
	var err error
	var orderNumbers []string
	{
		if orderBatchQueryOutboundOrderOrderNumbers != "" {
			err = json.Unmarshal([]byte(orderBatchQueryOutboundOrderOrderNumbers), &orderNumbers)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for orderNumbers, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"xxx1234\"\n   ]'")
			}
			if len(orderNumbers) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("orderNumbers", orderNumbers, len(orderNumbers), 50, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var status *int
	{
		if orderBatchQueryOutboundOrderStatus != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryOutboundOrderStatus, 10, 64)
			val := int(v)
			status = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for status, must be INT")
			}
			if status != nil {
				if *status < 0 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("status", *status, 0, true))
				}
			}
			if status != nil {
				if *status > 100 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("status", *status, 100, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var current *int
	{
		if orderBatchQueryOutboundOrderCurrent != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryOutboundOrderCurrent, 10, 64)
			val := int(v)
			current = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for current, must be INT")
			}
			if current != nil {
				if *current < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("current", *current, 1, true))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageSize *int
	{
		if orderBatchQueryOutboundOrderPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(orderBatchQueryOutboundOrderPageSize, 10, 64)
			val := int(v)
			pageSize = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize != nil {
				if *pageSize < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", *pageSize, 1, true))
				}
			}
			if pageSize != nil {
				if *pageSize > 50 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", *pageSize, 50, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var authorization *string
	{
		if orderBatchQueryOutboundOrderAuthorization != "" {
			authorization = &orderBatchQueryOutboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderBatchQueryOutboundOrderToken != "" {
			token = &orderBatchQueryOutboundOrderToken
		}
	}
	v := &order.GetOrder{}
	v.OrderNumbers = orderNumbers
	v.Status = status
	v.Current = current
	v.PageSize = pageSize
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildGetOutboundOrderPayload builds the payload for the order
// get_outbound_order endpoint from CLI flags.
func BuildGetOutboundOrderPayload(orderGetOutboundOrderID string, orderGetOutboundOrderAuthorization string, orderGetOutboundOrderToken string) (*order.QueryOutOrder, error) {
	var err error
	var id string
	{
		id = orderGetOutboundOrderID
		if utf8.RuneCountInString(id) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderGetOutboundOrderAuthorization != "" {
			authorization = &orderGetOutboundOrderAuthorization
		}
	}
	var token *string
	{
		if orderGetOutboundOrderToken != "" {
			token = &orderGetOutboundOrderToken
		}
	}
	v := &order.QueryOutOrder{}
	v.ID = id
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildGetOutboundOrderListFiltersPayload builds the payload for the order
// get_outbound_order_list_filters endpoint from CLI flags.
func BuildGetOutboundOrderListFiltersPayload(orderGetOutboundOrderListFiltersAuthorization string, orderGetOutboundOrderListFiltersToken string) (*order.AuthToken, error) {
	var authorization *string
	{
		if orderGetOutboundOrderListFiltersAuthorization != "" {
			authorization = &orderGetOutboundOrderListFiltersAuthorization
		}
	}
	var token *string
	{
		if orderGetOutboundOrderListFiltersToken != "" {
			token = &orderGetOutboundOrderListFiltersToken
		}
	}
	v := &order.AuthToken{}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildGetOutboundOrderCountPayload builds the payload for the order
// get_outbound_order_count endpoint from CLI flags.
func BuildGetOutboundOrderCountPayload(orderGetOutboundOrderCountID string, orderGetOutboundOrderCountPlatformOrderNo string, orderGetOutboundOrderCountListingSku string, orderGetOutboundOrderCountSku string, orderGetOutboundOrderCountNssTrackingNumber string, orderGetOutboundOrderCountShippingName string, orderGetOutboundOrderCountPlatform string, orderGetOutboundOrderCountStatus string, orderGetOutboundOrderCountStoreID string, orderGetOutboundOrderCountWarehouseID string, orderGetOutboundOrderCountCountryCode string, orderGetOutboundOrderCountCreatedAtStart string, orderGetOutboundOrderCountCreatedAtEnd string, orderGetOutboundOrderCountShipDateStart string, orderGetOutboundOrderCountShipDateEnd string, orderGetOutboundOrderCountOfflineOrder string, orderGetOutboundOrderCountPage string, orderGetOutboundOrderCountPageSize string, orderGetOutboundOrderCountAuthorization string, orderGetOutboundOrderCountToken string) (*order.OrderQueryPayload, error) {
	var err error
	var id []string
	{
		if orderGetOutboundOrderCountID != "" {
			err = json.Unmarshal([]byte(orderGetOutboundOrderCountID), &id)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for id, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var platformOrderNo *string
	{
		if orderGetOutboundOrderCountPlatformOrderNo != "" {
			platformOrderNo = &orderGetOutboundOrderCountPlatformOrderNo
		}
	}
	var listingSku *string
	{
		if orderGetOutboundOrderCountListingSku != "" {
			listingSku = &orderGetOutboundOrderCountListingSku
		}
	}
	var sku *string
	{
		if orderGetOutboundOrderCountSku != "" {
			sku = &orderGetOutboundOrderCountSku
		}
	}
	var nssTrackingNumber *string
	{
		if orderGetOutboundOrderCountNssTrackingNumber != "" {
			nssTrackingNumber = &orderGetOutboundOrderCountNssTrackingNumber
		}
	}
	var shippingName *string
	{
		if orderGetOutboundOrderCountShippingName != "" {
			shippingName = &orderGetOutboundOrderCountShippingName
		}
	}
	var platform *string
	{
		if orderGetOutboundOrderCountPlatform != "" {
			platform = &orderGetOutboundOrderCountPlatform
		}
	}
	var status []string
	{
		if orderGetOutboundOrderCountStatus != "" {
			err = json.Unmarshal([]byte(orderGetOutboundOrderCountStatus), &status)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for status, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var storeID *string
	{
		if orderGetOutboundOrderCountStoreID != "" {
			storeID = &orderGetOutboundOrderCountStoreID
		}
	}
	var warehouseID *string
	{
		if orderGetOutboundOrderCountWarehouseID != "" {
			warehouseID = &orderGetOutboundOrderCountWarehouseID
		}
	}
	var countryCode *string
	{
		if orderGetOutboundOrderCountCountryCode != "" {
			countryCode = &orderGetOutboundOrderCountCountryCode
		}
	}
	var createdAtStart *string
	{
		if orderGetOutboundOrderCountCreatedAtStart != "" {
			createdAtStart = &orderGetOutboundOrderCountCreatedAtStart
		}
	}
	var createdAtEnd *string
	{
		if orderGetOutboundOrderCountCreatedAtEnd != "" {
			createdAtEnd = &orderGetOutboundOrderCountCreatedAtEnd
		}
	}
	var shipDateStart *string
	{
		if orderGetOutboundOrderCountShipDateStart != "" {
			shipDateStart = &orderGetOutboundOrderCountShipDateStart
		}
	}
	var shipDateEnd *string
	{
		if orderGetOutboundOrderCountShipDateEnd != "" {
			shipDateEnd = &orderGetOutboundOrderCountShipDateEnd
		}
	}
	var offlineOrder *string
	{
		if orderGetOutboundOrderCountOfflineOrder != "" {
			offlineOrder = &orderGetOutboundOrderCountOfflineOrder
		}
	}
	var page *string
	{
		if orderGetOutboundOrderCountPage != "" {
			page = &orderGetOutboundOrderCountPage
		}
	}
	var pageSize *string
	{
		if orderGetOutboundOrderCountPageSize != "" {
			pageSize = &orderGetOutboundOrderCountPageSize
		}
	}
	var authorization *string
	{
		if orderGetOutboundOrderCountAuthorization != "" {
			authorization = &orderGetOutboundOrderCountAuthorization
		}
	}
	var token *string
	{
		if orderGetOutboundOrderCountToken != "" {
			token = &orderGetOutboundOrderCountToken
		}
	}
	v := &order.OrderQueryPayload{}
	v.ID = id
	v.PlatformOrderNo = platformOrderNo
	v.ListingSku = listingSku
	v.Sku = sku
	v.NssTrackingNumber = nssTrackingNumber
	v.ShippingName = shippingName
	v.Platform = platform
	v.Status = status
	v.StoreID = storeID
	v.WarehouseID = warehouseID
	v.CountryCode = countryCode
	v.CreatedAtStart = createdAtStart
	v.CreatedAtEnd = createdAtEnd
	v.ShipDateStart = shipDateStart
	v.ShipDateEnd = shipDateEnd
	v.OfflineOrder = offlineOrder
	v.Page = page
	v.PageSize = pageSize
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildGetOutboundOrderListPayload builds the payload for the order
// get_outbound_order_list endpoint from CLI flags.
func BuildGetOutboundOrderListPayload(orderGetOutboundOrderListID string, orderGetOutboundOrderListPlatformOrderNo string, orderGetOutboundOrderListListingSku string, orderGetOutboundOrderListSku string, orderGetOutboundOrderListNssTrackingNumber string, orderGetOutboundOrderListShippingName string, orderGetOutboundOrderListPlatform string, orderGetOutboundOrderListStatus string, orderGetOutboundOrderListStoreID string, orderGetOutboundOrderListWarehouseID string, orderGetOutboundOrderListCountryCode string, orderGetOutboundOrderListCreatedAtStart string, orderGetOutboundOrderListCreatedAtEnd string, orderGetOutboundOrderListShipDateStart string, orderGetOutboundOrderListShipDateEnd string, orderGetOutboundOrderListOfflineOrder string, orderGetOutboundOrderListPage string, orderGetOutboundOrderListPageSize string, orderGetOutboundOrderListAuthorization string, orderGetOutboundOrderListToken string) (*order.OrderQueryPayload, error) {
	var err error
	var id []string
	{
		if orderGetOutboundOrderListID != "" {
			err = json.Unmarshal([]byte(orderGetOutboundOrderListID), &id)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for id, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var platformOrderNo *string
	{
		if orderGetOutboundOrderListPlatformOrderNo != "" {
			platformOrderNo = &orderGetOutboundOrderListPlatformOrderNo
		}
	}
	var listingSku *string
	{
		if orderGetOutboundOrderListListingSku != "" {
			listingSku = &orderGetOutboundOrderListListingSku
		}
	}
	var sku *string
	{
		if orderGetOutboundOrderListSku != "" {
			sku = &orderGetOutboundOrderListSku
		}
	}
	var nssTrackingNumber *string
	{
		if orderGetOutboundOrderListNssTrackingNumber != "" {
			nssTrackingNumber = &orderGetOutboundOrderListNssTrackingNumber
		}
	}
	var shippingName *string
	{
		if orderGetOutboundOrderListShippingName != "" {
			shippingName = &orderGetOutboundOrderListShippingName
		}
	}
	var platform *string
	{
		if orderGetOutboundOrderListPlatform != "" {
			platform = &orderGetOutboundOrderListPlatform
		}
	}
	var status []string
	{
		if orderGetOutboundOrderListStatus != "" {
			err = json.Unmarshal([]byte(orderGetOutboundOrderListStatus), &status)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for status, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var storeID *string
	{
		if orderGetOutboundOrderListStoreID != "" {
			storeID = &orderGetOutboundOrderListStoreID
		}
	}
	var warehouseID *string
	{
		if orderGetOutboundOrderListWarehouseID != "" {
			warehouseID = &orderGetOutboundOrderListWarehouseID
		}
	}
	var countryCode *string
	{
		if orderGetOutboundOrderListCountryCode != "" {
			countryCode = &orderGetOutboundOrderListCountryCode
		}
	}
	var createdAtStart *string
	{
		if orderGetOutboundOrderListCreatedAtStart != "" {
			createdAtStart = &orderGetOutboundOrderListCreatedAtStart
		}
	}
	var createdAtEnd *string
	{
		if orderGetOutboundOrderListCreatedAtEnd != "" {
			createdAtEnd = &orderGetOutboundOrderListCreatedAtEnd
		}
	}
	var shipDateStart *string
	{
		if orderGetOutboundOrderListShipDateStart != "" {
			shipDateStart = &orderGetOutboundOrderListShipDateStart
		}
	}
	var shipDateEnd *string
	{
		if orderGetOutboundOrderListShipDateEnd != "" {
			shipDateEnd = &orderGetOutboundOrderListShipDateEnd
		}
	}
	var offlineOrder *string
	{
		if orderGetOutboundOrderListOfflineOrder != "" {
			offlineOrder = &orderGetOutboundOrderListOfflineOrder
		}
	}
	var page *string
	{
		if orderGetOutboundOrderListPage != "" {
			page = &orderGetOutboundOrderListPage
		}
	}
	var pageSize *string
	{
		if orderGetOutboundOrderListPageSize != "" {
			pageSize = &orderGetOutboundOrderListPageSize
		}
	}
	var authorization *string
	{
		if orderGetOutboundOrderListAuthorization != "" {
			authorization = &orderGetOutboundOrderListAuthorization
		}
	}
	var token *string
	{
		if orderGetOutboundOrderListToken != "" {
			token = &orderGetOutboundOrderListToken
		}
	}
	v := &order.OrderQueryPayload{}
	v.ID = id
	v.PlatformOrderNo = platformOrderNo
	v.ListingSku = listingSku
	v.Sku = sku
	v.NssTrackingNumber = nssTrackingNumber
	v.ShippingName = shippingName
	v.Platform = platform
	v.Status = status
	v.StoreID = storeID
	v.WarehouseID = warehouseID
	v.CountryCode = countryCode
	v.CreatedAtStart = createdAtStart
	v.CreatedAtEnd = createdAtEnd
	v.ShipDateStart = shipDateStart
	v.ShipDateEnd = shipDateEnd
	v.OfflineOrder = offlineOrder
	v.Page = page
	v.PageSize = pageSize
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildUploadOutboundOrdersPayload builds the payload for the order
// upload_outbound_orders endpoint from CLI flags.
func BuildUploadOutboundOrdersPayload(orderUploadOutboundOrdersBody string, orderUploadOutboundOrdersAuthorization string, orderUploadOutboundOrdersToken string) (*order.UploadOrdersPayload, error) {
	var err error
	var body UploadOutboundOrdersRequestBody
	{
		err = json.Unmarshal([]byte(orderUploadOutboundOrdersBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file\": \"order.xlsx\",\n      \"file_name\": \"xxx\"\n   }'")
		}
		if body.File == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
		}
		if len(body.File) > 864000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.file", body.File, len(body.File), 864000, false))
		}
		if utf8.RuneCountInString(body.FileName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.file_name", body.FileName, utf8.RuneCountInString(body.FileName), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if orderUploadOutboundOrdersAuthorization != "" {
			authorization = &orderUploadOutboundOrdersAuthorization
		}
	}
	var token *string
	{
		if orderUploadOutboundOrdersToken != "" {
			token = &orderUploadOutboundOrdersToken
		}
	}
	v := &order.UploadOrdersPayload{
		File:     body.File,
		FileName: body.FileName,
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildExportOutboundOrdersPayload builds the payload for the order
// export_outbound_orders endpoint from CLI flags.
func BuildExportOutboundOrdersPayload(orderExportOutboundOrdersID string, orderExportOutboundOrdersPlatformOrderNo string, orderExportOutboundOrdersListingSku string, orderExportOutboundOrdersSku string, orderExportOutboundOrdersNssTrackingNumber string, orderExportOutboundOrdersShippingName string, orderExportOutboundOrdersPlatform string, orderExportOutboundOrdersStatus string, orderExportOutboundOrdersStoreID string, orderExportOutboundOrdersWarehouseID string, orderExportOutboundOrdersCountryCode string, orderExportOutboundOrdersCreatedAtStart string, orderExportOutboundOrdersCreatedAtEnd string, orderExportOutboundOrdersShipDateStart string, orderExportOutboundOrdersShipDateEnd string, orderExportOutboundOrdersOfflineOrder string, orderExportOutboundOrdersPage string, orderExportOutboundOrdersPageSize string, orderExportOutboundOrdersAuthorization string, orderExportOutboundOrdersToken string) (*order.OrderQueryPayload, error) {
	var err error
	var id []string
	{
		if orderExportOutboundOrdersID != "" {
			err = json.Unmarshal([]byte(orderExportOutboundOrdersID), &id)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for id, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var platformOrderNo *string
	{
		if orderExportOutboundOrdersPlatformOrderNo != "" {
			platformOrderNo = &orderExportOutboundOrdersPlatformOrderNo
		}
	}
	var listingSku *string
	{
		if orderExportOutboundOrdersListingSku != "" {
			listingSku = &orderExportOutboundOrdersListingSku
		}
	}
	var sku *string
	{
		if orderExportOutboundOrdersSku != "" {
			sku = &orderExportOutboundOrdersSku
		}
	}
	var nssTrackingNumber *string
	{
		if orderExportOutboundOrdersNssTrackingNumber != "" {
			nssTrackingNumber = &orderExportOutboundOrdersNssTrackingNumber
		}
	}
	var shippingName *string
	{
		if orderExportOutboundOrdersShippingName != "" {
			shippingName = &orderExportOutboundOrdersShippingName
		}
	}
	var platform *string
	{
		if orderExportOutboundOrdersPlatform != "" {
			platform = &orderExportOutboundOrdersPlatform
		}
	}
	var status []string
	{
		if orderExportOutboundOrdersStatus != "" {
			err = json.Unmarshal([]byte(orderExportOutboundOrdersStatus), &status)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for status, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"1\",\n      \"2\"\n   ]'")
			}
		}
	}
	var storeID *string
	{
		if orderExportOutboundOrdersStoreID != "" {
			storeID = &orderExportOutboundOrdersStoreID
		}
	}
	var warehouseID *string
	{
		if orderExportOutboundOrdersWarehouseID != "" {
			warehouseID = &orderExportOutboundOrdersWarehouseID
		}
	}
	var countryCode *string
	{
		if orderExportOutboundOrdersCountryCode != "" {
			countryCode = &orderExportOutboundOrdersCountryCode
		}
	}
	var createdAtStart *string
	{
		if orderExportOutboundOrdersCreatedAtStart != "" {
			createdAtStart = &orderExportOutboundOrdersCreatedAtStart
		}
	}
	var createdAtEnd *string
	{
		if orderExportOutboundOrdersCreatedAtEnd != "" {
			createdAtEnd = &orderExportOutboundOrdersCreatedAtEnd
		}
	}
	var shipDateStart *string
	{
		if orderExportOutboundOrdersShipDateStart != "" {
			shipDateStart = &orderExportOutboundOrdersShipDateStart
		}
	}
	var shipDateEnd *string
	{
		if orderExportOutboundOrdersShipDateEnd != "" {
			shipDateEnd = &orderExportOutboundOrdersShipDateEnd
		}
	}
	var offlineOrder *string
	{
		if orderExportOutboundOrdersOfflineOrder != "" {
			offlineOrder = &orderExportOutboundOrdersOfflineOrder
		}
	}
	var page *string
	{
		if orderExportOutboundOrdersPage != "" {
			page = &orderExportOutboundOrdersPage
		}
	}
	var pageSize *string
	{
		if orderExportOutboundOrdersPageSize != "" {
			pageSize = &orderExportOutboundOrdersPageSize
		}
	}
	var authorization *string
	{
		if orderExportOutboundOrdersAuthorization != "" {
			authorization = &orderExportOutboundOrdersAuthorization
		}
	}
	var token *string
	{
		if orderExportOutboundOrdersToken != "" {
			token = &orderExportOutboundOrdersToken
		}
	}
	v := &order.OrderQueryPayload{}
	v.ID = id
	v.PlatformOrderNo = platformOrderNo
	v.ListingSku = listingSku
	v.Sku = sku
	v.NssTrackingNumber = nssTrackingNumber
	v.ShippingName = shippingName
	v.Platform = platform
	v.Status = status
	v.StoreID = storeID
	v.WarehouseID = warehouseID
	v.CountryCode = countryCode
	v.CreatedAtStart = createdAtStart
	v.CreatedAtEnd = createdAtEnd
	v.ShipDateStart = shipDateStart
	v.ShipDateEnd = shipDateEnd
	v.OfflineOrder = offlineOrder
	v.Page = page
	v.PageSize = pageSize
	v.Authorization = authorization
	v.Token = token

	return v, nil
}
