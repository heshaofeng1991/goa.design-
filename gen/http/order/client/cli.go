// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	order "goa/gen/order"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreateInboundOrderPayload builds the payload for the order
// create_inbound_order endpoint from CLI flags.
func BuildCreateInboundOrderPayload(orderCreateInboundOrderBody string) (*order.InboundOrder, error) {
	var err error
	var body CreateInboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreateInboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"city_name\": \"SZ\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"customer_order_id\": \"xxx1234\",\n      \"description\": \"description\",\n      \"estimated_arrival_at\": \"2021-01-12 09:34:09\",\n      \"id\": 1,\n      \"is_pickup\": true,\n      \"items\": [\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"tracking_number\": \"YT000001\",\n      \"type\": 1,\n      \"warehouse_id\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 50, false))
		}
		if body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", body.WarehouseID, 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if utf8.RuneCountInString(body.TrackingNumber) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", body.TrackingNumber, utf8.RuneCountInString(body.TrackingNumber), 50, false))
		}
		if utf8.RuneCountInString(body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", body.RequestedPickupAt, utf8.RuneCountInString(body.RequestedPickupAt), 30, false))
		}
		if utf8.RuneCountInString(body.EstimatedArrivalAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", body.EstimatedArrivalAt, utf8.RuneCountInString(body.EstimatedArrivalAt), 30, false))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.InboundOrder{
		CustomerOrderID:    body.CustomerOrderID,
		WarehouseID:        body.WarehouseID,
		CustomerCode:       body.CustomerCode,
		TrackingNumber:     body.TrackingNumber,
		RequestedPickupAt:  body.RequestedPickupAt,
		EstimatedArrivalAt: body.EstimatedArrivalAt,
		Type:               body.Type,
		IsPickup:           body.IsPickup,
		Description:        body.Description,
		ID:                 body.ID,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}

	return v, nil
}

// BuildUpdateInboundOrderPayload builds the payload for the order
// update_inbound_order endpoint from CLI flags.
func BuildUpdateInboundOrderPayload(orderUpdateInboundOrderBody string) (*order.InboundOrder, error) {
	var err error
	var body UpdateInboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderUpdateInboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"city_name\": \"SZ\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"customer_order_id\": \"xxx1234\",\n      \"description\": \"description\",\n      \"estimated_arrival_at\": \"2021-01-12 09:34:09\",\n      \"id\": 1,\n      \"is_pickup\": true,\n      \"items\": [\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"tracking_number\": \"YT000001\",\n      \"type\": 1,\n      \"warehouse_id\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", body.CustomerOrderID, utf8.RuneCountInString(body.CustomerOrderID), 50, false))
		}
		if body.WarehouseID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.warehouse_id", body.WarehouseID, 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if utf8.RuneCountInString(body.TrackingNumber) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tracking_number", body.TrackingNumber, utf8.RuneCountInString(body.TrackingNumber), 50, false))
		}
		if utf8.RuneCountInString(body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", body.RequestedPickupAt, utf8.RuneCountInString(body.RequestedPickupAt), 30, false))
		}
		if utf8.RuneCountInString(body.EstimatedArrivalAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.estimated_arrival_at", body.EstimatedArrivalAt, utf8.RuneCountInString(body.EstimatedArrivalAt), 30, false))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.InboundOrder{
		CustomerOrderID:    body.CustomerOrderID,
		WarehouseID:        body.WarehouseID,
		CustomerCode:       body.CustomerCode,
		TrackingNumber:     body.TrackingNumber,
		RequestedPickupAt:  body.RequestedPickupAt,
		EstimatedArrivalAt: body.EstimatedArrivalAt,
		Type:               body.Type,
		IsPickup:           body.IsPickup,
		Description:        body.Description,
		ID:                 body.ID,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}

	return v, nil
}

// BuildCreateOutboundOrderPayload builds the payload for the order
// create_outbound_order endpoint from CLI flags.
func BuildCreateOutboundOrderPayload(orderCreateOutboundOrderBody string) (*order.OutboundOrder, error) {
	var err error
	var body CreateOutboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreateOutboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"channel_id\": 1,\n      \"currency\": \"USD\",\n      \"customer_code\": \"YT\",\n      \"customer_order_id\": \"YT000001\",\n      \"customer_tariff_number\": \"xxx\",\n      \"customer_tariff_number_type\": 0,\n      \"description\": \"description\",\n      \"enable_prepay_tariff\": false,\n      \"id\": 1,\n      \"inbound_order_id\": 1,\n      \"items\": [\n         {\n            \"barcode\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"hs_code\": \"xxx\",\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"qty\": 1\n         },\n         {\n            \"barcode\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"hs_code\": \"xxx\",\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"qty\": 1\n         }\n      ],\n      \"package_id\": 1,\n      \"receiver_info\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"city_name\": \"SZ\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"shipping_type\": 1,\n      \"total_price\": 980.67,\n      \"type\": 1\n   }'")
		}
		if body.ReceiverInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("receiver_info", "body"))
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if !(body.ShippingType == 1 || body.ShippingType == 2 || body.ShippingType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.shipping_type", body.ShippingType, []interface{}{1, 2, 3}))
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateOutboundOrderItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.OutboundOrder{
		CustomerOrderID:          body.CustomerOrderID,
		CustomerCode:             body.CustomerCode,
		TotalPrice:               body.TotalPrice,
		Currency:                 body.Currency,
		CustomerTariffNumber:     body.CustomerTariffNumber,
		CustomerTariffNumberType: body.CustomerTariffNumberType,
		EnablePrepayTariff:       body.EnablePrepayTariff,
		ShippingType:             body.ShippingType,
		ChannelID:                body.ChannelID,
		Description:              body.Description,
		InboundOrderID:           body.InboundOrderID,
		Type:                     body.Type,
		ID:                       body.ID,
		PackageID:                body.PackageID,
	}
	if body.ReceiverInfo != nil {
		v.ReceiverInfo = marshalShippingAddressRequestBodyToOrderShippingAddress(body.ReceiverInfo)
	}
	if body.Items != nil {
		v.Items = make([]*order.OutboundOrderItem, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(val)
		}
	}

	return v, nil
}

// BuildUpdateOutboundOrderPayload builds the payload for the order
// update_outbound_order endpoint from CLI flags.
func BuildUpdateOutboundOrderPayload(orderUpdateOutboundOrderBody string) (*order.OutboundOrder, error) {
	var err error
	var body UpdateOutboundOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderUpdateOutboundOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"channel_id\": 1,\n      \"currency\": \"USD\",\n      \"customer_code\": \"YT\",\n      \"customer_order_id\": \"YT000001\",\n      \"customer_tariff_number\": \"xxx\",\n      \"customer_tariff_number_type\": 0,\n      \"description\": \"description\",\n      \"enable_prepay_tariff\": false,\n      \"id\": 1,\n      \"inbound_order_id\": 1,\n      \"items\": [\n         {\n            \"barcode\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"hs_code\": \"xxx\",\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"qty\": 1\n         },\n         {\n            \"barcode\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"hs_code\": \"xxx\",\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"qty\": 1\n         },\n         {\n            \"barcode\": \"xxx\",\n            \"declared_cn_name\": \"NSS\",\n            \"declared_en_name\": \"NSS\",\n            \"declared_value_in_eur\": 10.07,\n            \"declared_value_in_usd\": 10.07,\n            \"hs_code\": \"xxx\",\n            \"product_attributes\": [\n               \"battery\",\n               \"cosmetic\",\n               \"liquid\",\n               \"magnetic\"\n            ],\n            \"product_height\": 10,\n            \"product_length\": 10,\n            \"product_name\": \"NSS mate40\",\n            \"product_price\": 10.3,\n            \"product_sku\": \"xxxx\",\n            \"product_weight\": 10,\n            \"product_width\": 10,\n            \"qty\": 1\n         }\n      ],\n      \"package_id\": 1,\n      \"receiver_info\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"city_name\": \"SZ\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"shipping_type\": 1,\n      \"total_price\": 980.67,\n      \"type\": 1\n   }'")
		}
		if body.ReceiverInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("receiver_info", "body"))
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if utf8.RuneCountInString(body.CustomerCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 1, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if !(body.ShippingType == 1 || body.ShippingType == 2 || body.ShippingType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.shipping_type", body.ShippingType, []interface{}{1, 2, 3}))
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateOutboundOrderItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.OutboundOrder{
		CustomerOrderID:          body.CustomerOrderID,
		CustomerCode:             body.CustomerCode,
		TotalPrice:               body.TotalPrice,
		Currency:                 body.Currency,
		CustomerTariffNumber:     body.CustomerTariffNumber,
		CustomerTariffNumberType: body.CustomerTariffNumberType,
		EnablePrepayTariff:       body.EnablePrepayTariff,
		ShippingType:             body.ShippingType,
		ChannelID:                body.ChannelID,
		Description:              body.Description,
		InboundOrderID:           body.InboundOrderID,
		Type:                     body.Type,
		ID:                       body.ID,
		PackageID:                body.PackageID,
	}
	if body.ReceiverInfo != nil {
		v.ReceiverInfo = marshalShippingAddressRequestBodyToOrderShippingAddress(body.ReceiverInfo)
	}
	if body.Items != nil {
		v.Items = make([]*order.OutboundOrderItem, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalOutboundOrderItemRequestBodyToOrderOutboundOrderItem(val)
		}
	}

	return v, nil
}

// BuildCreatePickupOrderPayload builds the payload for the order
// create_pickup_order endpoint from CLI flags.
func BuildCreatePickupOrderPayload(orderCreatePickupOrderBody string) (*order.PickupOrder, error) {
	var err error
	var body CreatePickupOrderRequestBody
	{
		err = json.Unmarshal([]byte(orderCreatePickupOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address1\": \"address1\",\n         \"address2\": \"address2\",\n         \"city_name\": \"SZ\",\n         \"country_code\": \"US\",\n         \"country_name\": \"US\",\n         \"first_name\": \"He\",\n         \"last_name\": \"John\",\n         \"name\": \"He\",\n         \"phone_number\": \"150xxxxxxxx\",\n         \"state_code\": \"S\",\n         \"state_name\": \"U\",\n         \"zip_code\": \"10016\"\n      },\n      \"customer_code\": \"1013\",\n      \"items\": [\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         },\n         {\n            \"barcode\": \"YCrankshaft\",\n            \"product_name\": \"NSS Mate 40E\",\n            \"product_sku\": \"YCrankshaft\",\n            \"qty\": 3\n         }\n      ],\n      \"requested_pickup_at\": \"2021-01-12 09:34:09\",\n      \"type\": 1\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		if utf8.RuneCountInString(body.RequestedPickupAt) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.requested_pickup_at", body.RequestedPickupAt, utf8.RuneCountInString(body.RequestedPickupAt), 30, false))
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateItemRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if !(body.Type == 1 || body.Type == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2}))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.PickupOrder{
		RequestedPickupAt: body.RequestedPickupAt,
		Type:              body.Type,
		CustomerCode:      body.CustomerCode,
	}
	if body.Items != nil {
		v.Items = make([]*order.Item, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemRequestBodyToOrderItem(val)
		}
	}
	if body.Address != nil {
		v.Address = marshalShippingAddressRequestBodyToOrderShippingAddress(body.Address)
	}

	return v, nil
}

// BuildGetInboundOrderPayload builds the payload for the order
// get_inbound_order endpoint from CLI flags.
func BuildGetInboundOrderPayload(orderGetInboundOrderClientOrderID string) (*order.GetOrder, error) {
	var err error
	var clientOrderID string
	{
		clientOrderID = orderGetInboundOrderClientOrderID
		if utf8.RuneCountInString(clientOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("clientOrderID", clientOrderID, utf8.RuneCountInString(clientOrderID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.GetOrder{}
	v.ClientOrderID = clientOrderID

	return v, nil
}

// BuildGetOutboundOrderPayload builds the payload for the order
// get_outbound_order endpoint from CLI flags.
func BuildGetOutboundOrderPayload(orderGetOutboundOrderClientOrderID string) (*order.GetOrder, error) {
	var err error
	var clientOrderID string
	{
		clientOrderID = orderGetOutboundOrderClientOrderID
		if utf8.RuneCountInString(clientOrderID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("clientOrderID", clientOrderID, utf8.RuneCountInString(clientOrderID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &order.GetOrder{}
	v.ClientOrderID = clientOrderID

	return v, nil
}
