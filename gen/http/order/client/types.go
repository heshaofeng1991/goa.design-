// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	order "goa/gen/order"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateInboundOrderRequestBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP request body.
type CreateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// warehouse id
	WarehouseID int64 `form:"warehouse_id" json:"warehouse_id" xml:"warehouse_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// tracking number
	TrackingNumber string `form:"tracking_number" json:"tracking_number" xml:"tracking_number"`
	// requested pickup at
	RequestedPickupAt string `form:"requested_pickup_at" json:"requested_pickup_at" xml:"requested_pickup_at"`
	// estimated arrival at
	EstimatedArrivalAt string `form:"estimated_arrival_at" json:"estimated_arrival_at" xml:"estimated_arrival_at"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// address
	Address *ShippingAddressRequestBody `form:"address" json:"address" xml:"address"`
	// is pickup
	IsPickup bool `form:"is_pickup" json:"is_pickup" xml:"is_pickup"`
	// description
	Description string `form:"description" json:"description" xml:"description"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInboundOrderRequestBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP request body.
type UpdateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// warehouse id
	WarehouseID int64 `form:"warehouse_id" json:"warehouse_id" xml:"warehouse_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// tracking number
	TrackingNumber string `form:"tracking_number" json:"tracking_number" xml:"tracking_number"`
	// requested pickup at
	RequestedPickupAt string `form:"requested_pickup_at" json:"requested_pickup_at" xml:"requested_pickup_at"`
	// estimated arrival at
	EstimatedArrivalAt string `form:"estimated_arrival_at" json:"estimated_arrival_at" xml:"estimated_arrival_at"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// address
	Address *ShippingAddressRequestBody `form:"address" json:"address" xml:"address"`
	// is pickup
	IsPickup bool `form:"is_pickup" json:"is_pickup" xml:"is_pickup"`
	// description
	Description string `form:"description" json:"description" xml:"description"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateOutboundOrderRequestBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP request body.
type CreateOutboundOrderRequestBody struct {
	// customer order id
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// total price
	TotalPrice float64 `form:"total_price" json:"total_price" xml:"total_price"`
	// currency
	Currency string `form:"currency" json:"currency" xml:"currency"`
	// customer tariff number
	CustomerTariffNumber string `form:"customer_tariff_number" json:"customer_tariff_number" xml:"customer_tariff_number"`
	// customer tariff number of type
	CustomerTariffNumberType int `form:"customer_tariff_number_type" json:"customer_tariff_number_type" xml:"customer_tariff_number_type"`
	// enable prepay tariff
	EnablePrepayTariff bool `form:"enable_prepay_tariff" json:"enable_prepay_tariff" xml:"enable_prepay_tariff"`
	// shipping type(1 Economic, 2 Fastest, 3 Recommended)
	ShippingType int `form:"shipping_type" json:"shipping_type" xml:"shipping_type"`
	// receiver info
	ReceiverInfo *ShippingAddressRequestBody `form:"receiver_info" json:"receiver_info" xml:"receiver_info"`
	// order items
	Items []*OutboundOrderItemRequestBody `form:"items" json:"items" xml:"items"`
	// channel id
	ChannelID int `form:"channel_id" json:"channel_id" xml:"channel_id"`
	// description
	Description string `form:"description" json:"description" xml:"description"`
	// 入库单ID
	InboundOrderID int64 `form:"inbound_order_id" json:"inbound_order_id" xml:"inbound_order_id"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// package id
	PackageID *int64 `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
}

// UpdateOutboundOrderRequestBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP request body.
type UpdateOutboundOrderRequestBody struct {
	// customer order id
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// total price
	TotalPrice float64 `form:"total_price" json:"total_price" xml:"total_price"`
	// currency
	Currency string `form:"currency" json:"currency" xml:"currency"`
	// customer tariff number
	CustomerTariffNumber string `form:"customer_tariff_number" json:"customer_tariff_number" xml:"customer_tariff_number"`
	// customer tariff number of type
	CustomerTariffNumberType int `form:"customer_tariff_number_type" json:"customer_tariff_number_type" xml:"customer_tariff_number_type"`
	// enable prepay tariff
	EnablePrepayTariff bool `form:"enable_prepay_tariff" json:"enable_prepay_tariff" xml:"enable_prepay_tariff"`
	// shipping type(1 Economic, 2 Fastest, 3 Recommended)
	ShippingType int `form:"shipping_type" json:"shipping_type" xml:"shipping_type"`
	// receiver info
	ReceiverInfo *ShippingAddressRequestBody `form:"receiver_info" json:"receiver_info" xml:"receiver_info"`
	// order items
	Items []*OutboundOrderItemRequestBody `form:"items" json:"items" xml:"items"`
	// channel id
	ChannelID int `form:"channel_id" json:"channel_id" xml:"channel_id"`
	// description
	Description string `form:"description" json:"description" xml:"description"`
	// 入库单ID
	InboundOrderID int64 `form:"inbound_order_id" json:"inbound_order_id" xml:"inbound_order_id"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// package id
	PackageID *int64 `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
}

// CreatePickupOrderRequestBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP request body.
type CreatePickupOrderRequestBody struct {
	// shipping at
	RequestedPickupAt string `form:"requested_pickup_at" json:"requested_pickup_at" xml:"requested_pickup_at"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// address
	Address *ShippingAddressRequestBody `form:"address" json:"address" xml:"address"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
}

// CreateInboundOrderResponseBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP response body.
type CreateInboundOrderResponseBody struct {
	// inbound order id
	InboundOrderID *int64 `form:"inbound_order_id,omitempty" json:"inbound_order_id,omitempty" xml:"inbound_order_id,omitempty"`
	// label url
	LabelURL *string `form:"label_url,omitempty" json:"label_url,omitempty" xml:"label_url,omitempty"`
}

// UpdateInboundOrderResponseBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP response body.
type UpdateInboundOrderResponseBody struct {
	// status
	Status *int32 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// CreateOutboundOrderResponseBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP response body.
type CreateOutboundOrderResponseBody struct {
	// outbound order id
	OutboundOrderID *int64 `form:"outbound_order_id,omitempty" json:"outbound_order_id,omitempty" xml:"outbound_order_id,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
}

// UpdateOutboundOrderResponseBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP response body.
type UpdateOutboundOrderResponseBody struct {
	// status
	Status *int32 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// CreatePickupOrderResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body.
type CreatePickupOrderResponseBody struct {
	// error message
	ErrorMsg *string `form:"error_msg,omitempty" json:"error_msg,omitempty" xml:"error_msg,omitempty"`
}

// GetInboundOrderResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body.
type GetInboundOrderResponseBody []*InboundOrderResponseResponse

// GetOutboundOrderResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body.
type GetOutboundOrderResponseBody []*OrderRspResponse

// CreateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePickupOrderUnauthorizedResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body for the "Unauthorized"
// error.
type CreatePickupOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetInboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body for the "Unauthorized" error.
type GetInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOutboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body for the "Unauthorized"
// error.
type GetOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ItemRequestBody is used to define fields on request body types.
type ItemRequestBody struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// quality
	Qty int `form:"qty" json:"qty" xml:"qty"`
}

// ShippingAddressRequestBody is used to define fields on request body types.
type ShippingAddressRequestBody struct {
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Phone number
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// Country Name
	CountryName string `form:"country_name" json:"country_name" xml:"country_name"`
	// Country code
	CountryCode string `form:"country_code" json:"country_code" xml:"country_code"`
	// State Name
	StateName string `form:"state_name" json:"state_name" xml:"state_name"`
	// State code
	StateCode string `form:"state_code" json:"state_code" xml:"state_code"`
	// Address Line 1
	Address1 string `form:"address1" json:"address1" xml:"address1"`
	// Address Line 2
	Address2 string `form:"address2" json:"address2" xml:"address2"`
	// City Name
	CityName string `form:"city_name" json:"city_name" xml:"city_name"`
	// ZIP code
	ZipCode string `form:"zip_code" json:"zip_code" xml:"zip_code"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// OutboundOrderItemRequestBody is used to define fields on request body types.
type OutboundOrderItemRequestBody struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product SKU
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product price
	ProductPrice float64 `form:"product_price" json:"product_price" xml:"product_price"`
	// 产品数量
	Qty int `form:"qty" json:"qty" xml:"qty"`
	// hs code
	HsCode string `form:"hs_code" json:"hs_code" xml:"hs_code"`
	// declared cn name
	DeclaredCnName string `form:"declared_cn_name" json:"declared_cn_name" xml:"declared_cn_name"`
	// declared en name
	DeclaredEnName string `form:"declared_en_name" json:"declared_en_name" xml:"declared_en_name"`
	// declared value in usd
	DeclaredValueInUsd float64 `form:"declared_value_in_usd" json:"declared_value_in_usd" xml:"declared_value_in_usd"`
	// product weight
	ProductWeight float64 `form:"product_weight" json:"product_weight" xml:"product_weight"`
	// product length
	ProductLength int `form:"product_length" json:"product_length" xml:"product_length"`
	// product width
	ProductWidth int `form:"product_width" json:"product_width" xml:"product_width"`
	// product height
	ProductHeight int `form:"product_height" json:"product_height" xml:"product_height"`
	// product attributes
	ProductAttributes []string `form:"product_attributes" json:"product_attributes" xml:"product_attributes"`
	// 产品barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// declared value in eur（€）
	DeclaredValueInEur float64 `form:"declared_value_in_eur" json:"declared_value_in_eur" xml:"declared_value_in_eur"`
}

// InboundOrderResponseResponse is used to define fields on response body types.
type InboundOrderResponseResponse struct {
	// client order id
	ClientOrderID *string `form:"client_order_id,omitempty" json:"client_order_id,omitempty" xml:"client_order_id,omitempty"`
	// order status(1 准备揽件 2 运输中 3 已到库)
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// platform order id
	PlatformOrderID *int64 `form:"platform_order_id,omitempty" json:"platform_order_id,omitempty" xml:"platform_order_id,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// tracking url
	TrackingURL *string `form:"tracking_url,omitempty" json:"tracking_url,omitempty" xml:"tracking_url,omitempty"`
	// items
	Items []*ItemResponse `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// ItemResponse is used to define fields on response body types.
type ItemResponse struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product sku
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
}

// OrderRspResponse is used to define fields on response body types.
type OrderRspResponse struct {
	// client order id
	ClientOrderID *string `form:"client_order_id,omitempty" json:"client_order_id,omitempty" xml:"client_order_id,omitempty"`
	// order status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// platform order id
	PlatformOrderID *int64 `form:"platform_order_id,omitempty" json:"platform_order_id,omitempty" xml:"platform_order_id,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// tracking url
	TrackingURL *string `form:"tracking_url,omitempty" json:"tracking_url,omitempty" xml:"tracking_url,omitempty"`
	// items
	Items []*OutboundOrderItemResponse `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// OutboundOrderItemResponse is used to define fields on response body types.
type OutboundOrderItemResponse struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// product weight
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product length
	ProductLength *int `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// product width
	ProductWidth *int `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// product height
	ProductHeight *int `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// 产品barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
}

// NewCreateInboundOrderRequestBody builds the HTTP request body from the
// payload of the "create_inbound_order" endpoint of the "order" service.
func NewCreateInboundOrderRequestBody(p *order.InboundOrder) *CreateInboundOrderRequestBody {
	body := &CreateInboundOrderRequestBody{
		CustomerOrderID:    p.CustomerOrderID,
		WarehouseID:        p.WarehouseID,
		CustomerCode:       p.CustomerCode,
		TrackingNumber:     p.TrackingNumber,
		RequestedPickupAt:  p.RequestedPickupAt,
		EstimatedArrivalAt: p.EstimatedArrivalAt,
		Type:               p.Type,
		IsPickup:           p.IsPickup,
		Description:        p.Description,
		ID:                 p.ID,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewUpdateInboundOrderRequestBody builds the HTTP request body from the
// payload of the "update_inbound_order" endpoint of the "order" service.
func NewUpdateInboundOrderRequestBody(p *order.InboundOrder) *UpdateInboundOrderRequestBody {
	body := &UpdateInboundOrderRequestBody{
		CustomerOrderID:    p.CustomerOrderID,
		WarehouseID:        p.WarehouseID,
		CustomerCode:       p.CustomerCode,
		TrackingNumber:     p.TrackingNumber,
		RequestedPickupAt:  p.RequestedPickupAt,
		EstimatedArrivalAt: p.EstimatedArrivalAt,
		Type:               p.Type,
		IsPickup:           p.IsPickup,
		Description:        p.Description,
		ID:                 p.ID,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewCreateOutboundOrderRequestBody builds the HTTP request body from the
// payload of the "create_outbound_order" endpoint of the "order" service.
func NewCreateOutboundOrderRequestBody(p *order.OutboundOrder) *CreateOutboundOrderRequestBody {
	body := &CreateOutboundOrderRequestBody{
		CustomerOrderID:          p.CustomerOrderID,
		CustomerCode:             p.CustomerCode,
		TotalPrice:               p.TotalPrice,
		Currency:                 p.Currency,
		CustomerTariffNumber:     p.CustomerTariffNumber,
		CustomerTariffNumberType: p.CustomerTariffNumberType,
		EnablePrepayTariff:       p.EnablePrepayTariff,
		ShippingType:             p.ShippingType,
		ChannelID:                p.ChannelID,
		Description:              p.Description,
		InboundOrderID:           p.InboundOrderID,
		Type:                     p.Type,
		ID:                       p.ID,
		PackageID:                p.PackageID,
	}
	if p.ReceiverInfo != nil {
		body.ReceiverInfo = marshalOrderShippingAddressToShippingAddressRequestBody(p.ReceiverInfo)
	}
	if p.Items != nil {
		body.Items = make([]*OutboundOrderItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderOutboundOrderItemToOutboundOrderItemRequestBody(val)
		}
	}
	return body
}

// NewUpdateOutboundOrderRequestBody builds the HTTP request body from the
// payload of the "update_outbound_order" endpoint of the "order" service.
func NewUpdateOutboundOrderRequestBody(p *order.OutboundOrder) *UpdateOutboundOrderRequestBody {
	body := &UpdateOutboundOrderRequestBody{
		CustomerOrderID:          p.CustomerOrderID,
		CustomerCode:             p.CustomerCode,
		TotalPrice:               p.TotalPrice,
		Currency:                 p.Currency,
		CustomerTariffNumber:     p.CustomerTariffNumber,
		CustomerTariffNumberType: p.CustomerTariffNumberType,
		EnablePrepayTariff:       p.EnablePrepayTariff,
		ShippingType:             p.ShippingType,
		ChannelID:                p.ChannelID,
		Description:              p.Description,
		InboundOrderID:           p.InboundOrderID,
		Type:                     p.Type,
		ID:                       p.ID,
		PackageID:                p.PackageID,
	}
	if p.ReceiverInfo != nil {
		body.ReceiverInfo = marshalOrderShippingAddressToShippingAddressRequestBody(p.ReceiverInfo)
	}
	if p.Items != nil {
		body.Items = make([]*OutboundOrderItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderOutboundOrderItemToOutboundOrderItemRequestBody(val)
		}
	}
	return body
}

// NewCreatePickupOrderRequestBody builds the HTTP request body from the
// payload of the "create_pickup_order" endpoint of the "order" service.
func NewCreatePickupOrderRequestBody(p *order.PickupOrder) *CreatePickupOrderRequestBody {
	body := &CreatePickupOrderRequestBody{
		RequestedPickupAt: p.RequestedPickupAt,
		Type:              p.Type,
		CustomerCode:      p.CustomerCode,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewCreateInboundOrderInboundOrderRspOK builds a "order" service
// "create_inbound_order" endpoint result from a HTTP "OK" response.
func NewCreateInboundOrderInboundOrderRspOK(body *CreateInboundOrderResponseBody) *order.InboundOrderRsp {
	v := &order.InboundOrderRsp{
		InboundOrderID: body.InboundOrderID,
		LabelURL:       body.LabelURL,
	}

	return v
}

// NewCreateInboundOrderUnauthorized builds a order service
// create_inbound_order endpoint Unauthorized error.
func NewCreateInboundOrderUnauthorized(body *CreateInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateInboundOrderUpdateResponseOK builds a "order" service
// "update_inbound_order" endpoint result from a HTTP "OK" response.
func NewUpdateInboundOrderUpdateResponseOK(body *UpdateInboundOrderResponseBody) *order.UpdateResponse {
	v := &order.UpdateResponse{
		Status: *body.Status,
	}

	return v
}

// NewUpdateInboundOrderUnauthorized builds a order service
// update_inbound_order endpoint Unauthorized error.
func NewUpdateInboundOrderUnauthorized(body *UpdateInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOutboundOrderOutboundOrderRspOK builds a "order" service
// "create_outbound_order" endpoint result from a HTTP "OK" response.
func NewCreateOutboundOrderOutboundOrderRspOK(body *CreateOutboundOrderResponseBody) *order.OutboundOrderRsp {
	v := &order.OutboundOrderRsp{
		OutboundOrderID: body.OutboundOrderID,
		TrackingNumber:  body.TrackingNumber,
	}

	return v
}

// NewCreateOutboundOrderUnauthorized builds a order service
// create_outbound_order endpoint Unauthorized error.
func NewCreateOutboundOrderUnauthorized(body *CreateOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateOutboundOrderUpdateResponseOK builds a "order" service
// "update_outbound_order" endpoint result from a HTTP "OK" response.
func NewUpdateOutboundOrderUpdateResponseOK(body *UpdateOutboundOrderResponseBody) *order.UpdateResponse {
	v := &order.UpdateResponse{
		Status: *body.Status,
	}

	return v
}

// NewUpdateOutboundOrderUnauthorized builds a order service
// update_outbound_order endpoint Unauthorized error.
func NewUpdateOutboundOrderUnauthorized(body *UpdateOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePickupOrderPickupOrderRspOK builds a "order" service
// "create_pickup_order" endpoint result from a HTTP "OK" response.
func NewCreatePickupOrderPickupOrderRspOK(body *CreatePickupOrderResponseBody) *order.PickupOrderRsp {
	v := &order.PickupOrderRsp{
		ErrorMsg: *body.ErrorMsg,
	}

	return v
}

// NewCreatePickupOrderUnauthorized builds a order service create_pickup_order
// endpoint Unauthorized error.
func NewCreatePickupOrderUnauthorized(body *CreatePickupOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetInboundOrderInboundOrderResponseOK builds a "order" service
// "get_inbound_order" endpoint result from a HTTP "OK" response.
func NewGetInboundOrderInboundOrderResponseOK(body []*InboundOrderResponseResponse) []*order.InboundOrderResponse {
	v := make([]*order.InboundOrderResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalInboundOrderResponseResponseToOrderInboundOrderResponse(val)
	}

	return v
}

// NewGetInboundOrderUnauthorized builds a order service get_inbound_order
// endpoint Unauthorized error.
func NewGetInboundOrderUnauthorized(body *GetInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOutboundOrderOrderRspOK builds a "order" service "get_outbound_order"
// endpoint result from a HTTP "OK" response.
func NewGetOutboundOrderOrderRspOK(body []*OrderRspResponse) []*order.OrderRsp {
	v := make([]*order.OrderRsp, len(body))
	for i, val := range body {
		v[i] = unmarshalOrderRspResponseToOrderOrderRsp(val)
	}

	return v
}

// NewGetOutboundOrderUnauthorized builds a order service get_outbound_order
// endpoint Unauthorized error.
func NewGetOutboundOrderUnauthorized(body *GetOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUpdateInboundOrderResponseBody runs the validations defined on
// update_inbound_order_response_body
func ValidateUpdateInboundOrderResponseBody(body *UpdateInboundOrderResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == 0 || *body.Status == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateUpdateOutboundOrderResponseBody runs the validations defined on
// update_outbound_order_response_body
func ValidateUpdateOutboundOrderResponseBody(body *UpdateOutboundOrderResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == 0 || *body.Status == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateCreatePickupOrderResponseBody runs the validations defined on
// create_pickup_order_response_body
func ValidateCreatePickupOrderResponseBody(body *CreatePickupOrderResponseBody) (err error) {
	if body.ErrorMsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_msg", "body"))
	}
	return
}

// ValidateCreateInboundOrderUnauthorizedResponseBody runs the validations
// defined on create_inbound_order_Unauthorized_response_body
func ValidateCreateInboundOrderUnauthorizedResponseBody(body *CreateInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInboundOrderUnauthorizedResponseBody runs the validations
// defined on update_inbound_order_Unauthorized_response_body
func ValidateUpdateInboundOrderUnauthorizedResponseBody(body *UpdateInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOutboundOrderUnauthorizedResponseBody runs the validations
// defined on create_outbound_order_Unauthorized_response_body
func ValidateCreateOutboundOrderUnauthorizedResponseBody(body *CreateOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateOutboundOrderUnauthorizedResponseBody runs the validations
// defined on update_outbound_order_Unauthorized_response_body
func ValidateUpdateOutboundOrderUnauthorizedResponseBody(body *UpdateOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePickupOrderUnauthorizedResponseBody runs the validations
// defined on create_pickup_order_Unauthorized_response_body
func ValidateCreatePickupOrderUnauthorizedResponseBody(body *CreatePickupOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetInboundOrderUnauthorizedResponseBody runs the validations defined
// on get_inbound_order_Unauthorized_response_body
func ValidateGetInboundOrderUnauthorizedResponseBody(body *GetInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOutboundOrderUnauthorizedResponseBody runs the validations
// defined on get_outbound_order_Unauthorized_response_body
func ValidateGetOutboundOrderUnauthorizedResponseBody(body *GetOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateItemRequestBody runs the validations defined on ItemRequestBody
func ValidateItemRequestBody(body *ItemRequestBody) (err error) {
	if utf8.RuneCountInString(body.ProductName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", body.ProductName, utf8.RuneCountInString(body.ProductName), 1, true))
	}
	if utf8.RuneCountInString(body.ProductName) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", body.ProductName, utf8.RuneCountInString(body.ProductName), 100, false))
	}
	if utf8.RuneCountInString(body.ProductSku) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", body.ProductSku, utf8.RuneCountInString(body.ProductSku), 1, true))
	}
	if utf8.RuneCountInString(body.ProductSku) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", body.ProductSku, utf8.RuneCountInString(body.ProductSku), 50, false))
	}
	if utf8.RuneCountInString(body.Barcode) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.barcode", body.Barcode, utf8.RuneCountInString(body.Barcode), 50, false))
	}
	return
}

// ValidateOutboundOrderItemRequestBody runs the validations defined on
// OutboundOrderItemRequestBody
func ValidateOutboundOrderItemRequestBody(body *OutboundOrderItemRequestBody) (err error) {
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.DeclaredValueInUsd < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", body.DeclaredValueInUsd, 0, true))
	}
	if body.DeclaredValueInEur < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", body.DeclaredValueInEur, 0, true))
	}
	return
}

// ValidateInboundOrderResponseResponse runs the validations defined on
// InboundOrderResponseResponse
func ValidateInboundOrderResponseResponse(body *InboundOrderResponseResponse) (err error) {
	if body.ClientOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_order_id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.PlatformOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform_order_id", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.TrackingURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_url", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.ClientOrderID != nil {
		if utf8.RuneCountInString(*body.ClientOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.client_order_id", *body.ClientOrderID, utf8.RuneCountInString(*body.ClientOrderID), 50, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateItemResponse runs the validations defined on ItemResponse
func ValidateItemResponse(body *ItemResponse) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 1, true))
		}
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 100, false))
		}
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 1, true))
		}
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 50, false))
		}
	}
	if body.Barcode != nil {
		if utf8.RuneCountInString(*body.Barcode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.barcode", *body.Barcode, utf8.RuneCountInString(*body.Barcode), 50, false))
		}
	}
	return
}

// ValidateOrderRspResponse runs the validations defined on OrderRspResponse
func ValidateOrderRspResponse(body *OrderRspResponse) (err error) {
	if body.ClientOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_order_id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.PlatformOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform_order_id", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.TrackingURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_url", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.ClientOrderID != nil {
		if utf8.RuneCountInString(*body.ClientOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.client_order_id", *body.ClientOrderID, utf8.RuneCountInString(*body.ClientOrderID), 50, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOutboundOrderItemResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOutboundOrderItemResponse runs the validations defined on
// OutboundOrderItemResponse
func ValidateOutboundOrderItemResponse(body *OutboundOrderItemResponse) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_price", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	if body.HsCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hs_code", "body"))
	}
	if body.DeclaredCnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_cn_name", "body"))
	}
	if body.DeclaredEnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_en_name", "body"))
	}
	if body.DeclaredValueInUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_usd", "body"))
	}
	if body.ProductWeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_weight", "body"))
	}
	if body.ProductLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_length", "body"))
	}
	if body.ProductWidth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_width", "body"))
	}
	if body.ProductHeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_height", "body"))
	}
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	if body.DeclaredValueInEur == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_eur", "body"))
	}
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	return
}
