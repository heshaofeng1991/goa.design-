// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	order "goa/gen/order"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateInboundOrderRequestBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP request body.
type CreateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// warehouse id
	WarehouseID int64 `form:"warehouse_id" json:"warehouse_id" xml:"warehouse_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// requested pickup at
	RequestedPickupAt *string `form:"requested_pickup_at,omitempty" json:"requested_pickup_at,omitempty" xml:"requested_pickup_at,omitempty"`
	// estimated arrival at
	EstimatedArrivalAt *string `form:"estimated_arrival_at,omitempty" json:"estimated_arrival_at,omitempty" xml:"estimated_arrival_at,omitempty"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// delivery mode(1 direct，2 warehouse, 3 platform)
	Type int `form:"type" json:"type" xml:"type"`
	// address
	Address *ShippingAddressRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// is pickup
	IsPickup bool `form:"is_pickup" json:"is_pickup" xml:"is_pickup"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInboundOrderRequestBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP request body.
type UpdateInboundOrderRequestBody struct {
	// Customer Order ID
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// warehouse id
	WarehouseID int64 `form:"warehouse_id" json:"warehouse_id" xml:"warehouse_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// requested pickup at
	RequestedPickupAt *string `form:"requested_pickup_at,omitempty" json:"requested_pickup_at,omitempty" xml:"requested_pickup_at,omitempty"`
	// estimated arrival at
	EstimatedArrivalAt *string `form:"estimated_arrival_at,omitempty" json:"estimated_arrival_at,omitempty" xml:"estimated_arrival_at,omitempty"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// delivery mode(1 direct，2 warehouse, 3 platform)
	Type int `form:"type" json:"type" xml:"type"`
	// address
	Address *ShippingAddressRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// is pickup
	IsPickup bool `form:"is_pickup" json:"is_pickup" xml:"is_pickup"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// inbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePickupOrderRequestBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP request body.
type CreatePickupOrderRequestBody struct {
	// shipping at
	RequestedPickupAt string `form:"requested_pickup_at" json:"requested_pickup_at" xml:"requested_pickup_at"`
	// inbound order items
	Items []*ItemRequestBody `form:"items" json:"items" xml:"items"`
	// address
	Address *ShippingAddressRequestBody `form:"address" json:"address" xml:"address"`
	// delivery mode(1 direct，2 warehouse)
	Type int `form:"type" json:"type" xml:"type"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
}

// CreateOutboundOrderRequestBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP request body.
type CreateOutboundOrderRequestBody struct {
	// customer order id
	CustomerOrderID string `form:"customer_order_id" json:"customer_order_id" xml:"customer_order_id"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// total price
	TotalPrice float64 `form:"total_price" json:"total_price" xml:"total_price"`
	// currency
	Currency string `form:"currency" json:"currency" xml:"currency"`
	// customer tariff number
	CustomerTariffNumber *string `form:"customer_tariff_number,omitempty" json:"customer_tariff_number,omitempty" xml:"customer_tariff_number,omitempty"`
	// country code
	CountryCode *string `form:"country_code,omitempty" json:"country_code,omitempty" xml:"country_code,omitempty"`
	// enable prepay tariff
	EnablePrepayTariff bool `form:"enable_prepay_tariff" json:"enable_prepay_tariff" xml:"enable_prepay_tariff"`
	// shipping type(1 Economic, 2 Fastest, 3 Recommended)
	ShippingType int `form:"shipping_type" json:"shipping_type" xml:"shipping_type"`
	// receiver info
	ReceiverInfo *ShippingAddressRequestBody `form:"receiver_info" json:"receiver_info" xml:"receiver_info"`
	// order items
	Items []*OutboundOrderItemRequestBody `form:"items" json:"items" xml:"items"`
	// channel id
	ChannelID int `form:"channel_id" json:"channel_id" xml:"channel_id"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// inbound number
	InboundOrderNumber *string `form:"inbound_order_number,omitempty" json:"inbound_order_number,omitempty" xml:"inbound_order_number,omitempty"`
	// delivery mode(1 direct，2 warehouse, 3 platform)
	Type int `form:"type" json:"type" xml:"type"`
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// package id
	PackageID *string `form:"package_id,omitempty" json:"package_id,omitempty" xml:"package_id,omitempty"`
	// store id
	StoreID *int32 `form:"store_id,omitempty" json:"store_id,omitempty" xml:"store_id,omitempty"`
	// estimated weight
	EstimatedWeight *int64 `form:"estimated_weight,omitempty" json:"estimated_weight,omitempty" xml:"estimated_weight,omitempty"`
	// platform order no
	PlatformOrderNo *string `form:"platform_order_no,omitempty" json:"platform_order_no,omitempty" xml:"platform_order_no,omitempty"`
	// Platform created at
	PlatformCreatedAt *string `form:"platform_created_at,omitempty" json:"platform_created_at,omitempty" xml:"platform_created_at,omitempty"`
	// request shipping at
	RequestShippingAt *string `form:"request_shipping_at,omitempty" json:"request_shipping_at,omitempty" xml:"request_shipping_at,omitempty"`
	// remark
	Remark *string `form:"remark,omitempty" json:"remark,omitempty" xml:"remark,omitempty"`
	// var number
	VatNumber *string `form:"vat_number,omitempty" json:"vat_number,omitempty" xml:"vat_number,omitempty"`
}

// UpdateOutboundOrderRequestBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP request body.
type UpdateOutboundOrderRequestBody struct {
	// warehouse id
	WarehouseID *int `form:"warehouse_id,omitempty" json:"warehouse_id,omitempty" xml:"warehouse_id,omitempty"`
	// offline
	Offline *bool `form:"offline,omitempty" json:"offline,omitempty" xml:"offline,omitempty"`
	// enable prepay tariff
	EnablePrepayTariff *bool `form:"enable_prepay_tariff,omitempty" json:"enable_prepay_tariff,omitempty" xml:"enable_prepay_tariff,omitempty"`
	// customer tariff number of type
	CustomerTariffNumberType *int `form:"customer_tariff_number_type,omitempty" json:"customer_tariff_number_type,omitempty" xml:"customer_tariff_number_type,omitempty"`
	// customer tariff country code
	CustomerTariffCountryCode *string `form:"customer_tariff_country_code,omitempty" json:"customer_tariff_country_code,omitempty" xml:"customer_tariff_country_code,omitempty"`
	// customer tariff number
	CustomerTariffNumber *string `form:"customer_tariff_number,omitempty" json:"customer_tariff_number,omitempty" xml:"customer_tariff_number,omitempty"`
	// receiver info
	ReceiverInfo *AddressRequestBody `form:"receiver_info,omitempty" json:"receiver_info,omitempty" xml:"receiver_info,omitempty"`
	// order items
	Items []*OutboundOrderItemUpdateRequestRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// BatchUpdateOutboundOrderRequestBody is the type of the "order" service
// "batch_update_outbound_order" endpoint HTTP request body.
type BatchUpdateOutboundOrderRequestBody struct {
	// Update Order Data
	Orders []*OutboundOrderUpdateRequestRequestBody `form:"orders,omitempty" json:"orders,omitempty" xml:"orders,omitempty"`
}

// CreateOutboundOrderItemRequestBody is the type of the "order" service
// "create_outbound_order_item" endpoint HTTP request body.
type CreateOutboundOrderItemRequestBody struct {
	// outbound order id
	OutboundOrderID int64 `form:"outbound_order_id" json:"outbound_order_id" xml:"outbound_order_id"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// ext order item id
	ExtOrderItemID *string `form:"ext_order_item_id,omitempty" json:"ext_order_item_id,omitempty" xml:"ext_order_item_id,omitempty"`
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// declared value in eur
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// claim weight
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// images
	Images []string `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	// material
	Material *string `form:"material,omitempty" json:"material,omitempty" xml:"material,omitempty"`
	// purpose
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	// requires shipping
	RequiresShipping *bool `form:"requires_shipping,omitempty" json:"requires_shipping,omitempty" xml:"requires_shipping,omitempty"`
	// length
	ProductLength *float64 `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// width
	ProductWidth *float64 `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// height
	ProductHeight *float64 `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
}

// UpdateOutboundOrderItemRequestBody is the type of the "order" service
// "update_outbound_order_item" endpoint HTTP request body.
type UpdateOutboundOrderItemRequestBody struct {
	// outbound order id
	OutboundOrderID *int64 `form:"outbound_order_id,omitempty" json:"outbound_order_id,omitempty" xml:"outbound_order_id,omitempty"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// ext order item id
	ExtOrderItemID *string `form:"ext_order_item_id,omitempty" json:"ext_order_item_id,omitempty" xml:"ext_order_item_id,omitempty"`
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// declared value in eur
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// claim weight
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// images
	Images []string `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	// material
	Material *string `form:"material,omitempty" json:"material,omitempty" xml:"material,omitempty"`
	// purpose
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	// requires shipping
	RequiresShipping *bool `form:"requires_shipping,omitempty" json:"requires_shipping,omitempty" xml:"requires_shipping,omitempty"`
	// length
	ProductLength *float64 `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// width
	ProductWidth *float64 `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// height
	ProductHeight *float64 `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// ext order item id
	ExtProductID *string `form:"ext_product_id,omitempty" json:"ext_product_id,omitempty" xml:"ext_product_id,omitempty"`
	// ext order item id
	PlatformProductID *int32 `form:"platform_product_id,omitempty" json:"platform_product_id,omitempty" xml:"platform_product_id,omitempty"`
}

// UploadOutboundOrdersRequestBody is the type of the "order" service
// "upload_outbound_orders" endpoint HTTP request body.
type UploadOutboundOrdersRequestBody struct {
	// file
	File []byte `form:"file" json:"file" xml:"file"`
	// file name
	FileName string `form:"file_name" json:"file_name" xml:"file_name"`
}

// CreateInboundOrderResponseBody is the type of the "order" service
// "create_inbound_order" endpoint HTTP response body.
type CreateInboundOrderResponseBody struct {
	// data
	Data *InboundOrderDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateInboundOrderResponseBody is the type of the "order" service
// "update_inbound_order" endpoint HTTP response body.
type UpdateInboundOrderResponseBody struct {
	// data
	Data *UpdateResponseDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePickupOrderResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body.
type CreatePickupOrderResponseBody struct {
	// error message
	ErrorMsg *string `form:"error_msg,omitempty" json:"error_msg,omitempty" xml:"error_msg,omitempty"`
}

// BatchQueryInboundOrderResponseBody is the type of the "order" service
// "batch_query_inbound_order" endpoint HTTP response body.
type BatchQueryInboundOrderResponseBody struct {
	// data
	Data *InboundOrderInfoResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetInboundOrderResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body.
type GetInboundOrderResponseBody struct {
	// data
	Data *InboundOrderResponseDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateOutboundOrderResponseBody is the type of the "order" service
// "create_outbound_order" endpoint HTTP response body.
type CreateOutboundOrderResponseBody struct {
	// data
	Data *OutboundOrderRspDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateOutboundOrderResponseBody is the type of the "order" service
// "update_outbound_order" endpoint HTTP response body.
type UpdateOutboundOrderResponseBody struct {
	// data
	Data *UpdateResponseDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BatchUpdateOutboundOrderResponseBody is the type of the "order" service
// "batch_update_outbound_order" endpoint HTTP response body.
type BatchUpdateOutboundOrderResponseBody struct {
	// Data
	Data []*BatchUpdateResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateOutboundOrderItemResponseBody is the type of the "order" service
// "create_outbound_order_item" endpoint HTTP response body.
type CreateOutboundOrderItemResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateOutboundOrderItemResponseBody is the type of the "order" service
// "update_outbound_order_item" endpoint HTTP response body.
type UpdateOutboundOrderItemResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteOutboundOrderItemResponseBody is the type of the "order" service
// "delete_outbound_order_item" endpoint HTTP response body.
type DeleteOutboundOrderItemResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BatchQueryOutboundOrderResponseBody is the type of the "order" service
// "batch_query_outbound_order" endpoint HTTP response body.
type BatchQueryOutboundOrderResponseBody struct {
	// data
	Data *OrderInfoResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOutboundOrderResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body.
type GetOutboundOrderResponseBody struct {
	// data
	Data *OrderDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOutboundOrderListFiltersResponseBody is the type of the "order" service
// "get_outbound_order_list_filters" endpoint HTTP response body.
type GetOutboundOrderListFiltersResponseBody struct {
	// data
	Data *OrderListFiltersResultDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOutboundOrderCountResponseBody is the type of the "order" service
// "get_outbound_order_count" endpoint HTTP response body.
type GetOutboundOrderCountResponseBody struct {
	// Order Counts
	Data *OrderCountDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOutboundOrderListResponseBody is the type of the "order" service
// "get_outbound_order_list" endpoint HTTP response body.
type GetOutboundOrderListResponseBody struct {
	// Data
	Data *GetOrderListDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UploadOutboundOrdersResponseBody is the type of the "order" service
// "upload_outbound_orders" endpoint HTTP response body.
type UploadOutboundOrdersResponseBody struct {
	// Data
	Data *UploadOrdersDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePickupOrderUnauthorizedResponseBody is the type of the "order" service
// "create_pickup_order" endpoint HTTP response body for the "Unauthorized"
// error.
type CreatePickupOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchQueryInboundOrderUnauthorizedResponseBody is the type of the "order"
// service "batch_query_inbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type BatchQueryInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetInboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_inbound_order" endpoint HTTP response body for the "Unauthorized" error.
type GetInboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "create_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "update_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchUpdateOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "batch_update_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type BatchUpdateOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOutboundOrderItemUnauthorizedResponseBody is the type of the "order"
// service "create_outbound_order_item" endpoint HTTP response body for the
// "Unauthorized" error.
type CreateOutboundOrderItemUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateOutboundOrderItemUnauthorizedResponseBody is the type of the "order"
// service "update_outbound_order_item" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateOutboundOrderItemUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteOutboundOrderItemUnauthorizedResponseBody is the type of the "order"
// service "delete_outbound_order_item" endpoint HTTP response body for the
// "Unauthorized" error.
type DeleteOutboundOrderItemUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchQueryOutboundOrderUnauthorizedResponseBody is the type of the "order"
// service "batch_query_outbound_order" endpoint HTTP response body for the
// "Unauthorized" error.
type BatchQueryOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOutboundOrderUnauthorizedResponseBody is the type of the "order" service
// "get_outbound_order" endpoint HTTP response body for the "Unauthorized"
// error.
type GetOutboundOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOutboundOrderListFiltersUnauthorizedResponseBody is the type of the
// "order" service "get_outbound_order_list_filters" endpoint HTTP response
// body for the "Unauthorized" error.
type GetOutboundOrderListFiltersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOutboundOrderCountUnauthorizedResponseBody is the type of the "order"
// service "get_outbound_order_count" endpoint HTTP response body for the
// "Unauthorized" error.
type GetOutboundOrderCountUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOutboundOrderListUnauthorizedResponseBody is the type of the "order"
// service "get_outbound_order_list" endpoint HTTP response body for the
// "Unauthorized" error.
type GetOutboundOrderListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadOutboundOrdersUnauthorizedResponseBody is the type of the "order"
// service "upload_outbound_orders" endpoint HTTP response body for the
// "Unauthorized" error.
type UploadOutboundOrdersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ExportOutboundOrdersUnauthorizedResponseBody is the type of the "order"
// service "export_outbound_orders" endpoint HTTP response body for the
// "Unauthorized" error.
type ExportOutboundOrdersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ExportOutboundOrdersInternalErrorResponseBody is the type of the "order"
// service "export_outbound_orders" endpoint HTTP response body for the
// "internal_error" error.
type ExportOutboundOrdersInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ItemRequestBody is used to define fields on request body types.
type ItemRequestBody struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product barcode
	ProductBarcode string `form:"product_barcode" json:"product_barcode" xml:"product_barcode"`
	// product quality
	Qty int `form:"qty" json:"qty" xml:"qty"`
}

// ShippingAddressRequestBody is used to define fields on request body types.
type ShippingAddressRequestBody struct {
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Phone number
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// Country Name
	CountryName string `form:"country_name" json:"country_name" xml:"country_name"`
	// Country code
	CountryCode string `form:"country_code" json:"country_code" xml:"country_code"`
	// State Name
	StateName string `form:"state_name" json:"state_name" xml:"state_name"`
	// State code
	StateCode string `form:"state_code" json:"state_code" xml:"state_code"`
	// Address Line 1
	Address1 string `form:"address1" json:"address1" xml:"address1"`
	// Address Line 2
	Address2 string `form:"address2" json:"address2" xml:"address2"`
	// City Name
	CityName string `form:"city_name" json:"city_name" xml:"city_name"`
	// ZIP code
	ZipCode string `form:"zip_code" json:"zip_code" xml:"zip_code"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// company
	Company *string `form:"company,omitempty" json:"company,omitempty" xml:"company,omitempty"`
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// certificate type
	CertificateType *string `form:"certificate_type,omitempty" json:"certificate_type,omitempty" xml:"certificate_type,omitempty"`
	// certificate code
	CertificateCode *string `form:"certificate_code,omitempty" json:"certificate_code,omitempty" xml:"certificate_code,omitempty"`
	// certificate period
	CertificatePeriod *string `form:"certificate_period,omitempty" json:"certificate_period,omitempty" xml:"certificate_period,omitempty"`
}

// InboundOrderDataResponseBody is used to define fields on response body types.
type InboundOrderDataResponseBody struct {
	// inbound order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty" xml:"order_number,omitempty"`
	// label url
	LabelURL *string `form:"label_url,omitempty" json:"label_url,omitempty" xml:"label_url,omitempty"`
}

// UpdateResponseDataResponseBody is used to define fields on response body
// types.
type UpdateResponseDataResponseBody struct {
	// status
	Status *int32 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// InboundOrderInfoResponseBody is used to define fields on response body types.
type InboundOrderInfoResponseBody struct {
	// inbounds data
	List []*InboundOrderResponseDataResponseBody `form:"list,omitempty" json:"list,omitempty" xml:"list,omitempty"`
	// MetaData info
	Meta *MetaDataResponseBody `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// InboundOrderResponseDataResponseBody is used to define fields on response
// body types.
type InboundOrderResponseDataResponseBody struct {
	// customer order id
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// order status(1 初始状态 10 准备揽件 20 运输中 30 已到库)
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// inbound order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty" xml:"order_number,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// tracking url
	TrackingURL *string `form:"tracking_url,omitempty" json:"tracking_url,omitempty" xml:"tracking_url,omitempty"`
	// items
	Items []*ItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// carrier name
	CarrierName *string `form:"carrier_name,omitempty" json:"carrier_name,omitempty" xml:"carrier_name,omitempty"`
}

// ItemResponseBody is used to define fields on response body types.
type ItemResponseBody struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product sku
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product barcode
	ProductBarcode *string `form:"product_barcode,omitempty" json:"product_barcode,omitempty" xml:"product_barcode,omitempty"`
	// product quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
}

// MetaDataResponseBody is used to define fields on response body types.
type MetaDataResponseBody struct {
	// current
	Current *int `form:"current,omitempty" json:"current,omitempty" xml:"current,omitempty"`
	// page_size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// OutboundOrderItemRequestBody is used to define fields on request body types.
type OutboundOrderItemRequestBody struct {
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// product SKU
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product price
	ProductPrice float64 `form:"product_price" json:"product_price" xml:"product_price"`
	// 产品数量
	Qty int `form:"qty" json:"qty" xml:"qty"`
	// hs code
	HsCode string `form:"hs_code" json:"hs_code" xml:"hs_code"`
	// declared cn name
	DeclaredCnName string `form:"declared_cn_name" json:"declared_cn_name" xml:"declared_cn_name"`
	// declared en name
	DeclaredEnName string `form:"declared_en_name" json:"declared_en_name" xml:"declared_en_name"`
	// declared value in usd
	DeclaredValueInUsd float64 `form:"declared_value_in_usd" json:"declared_value_in_usd" xml:"declared_value_in_usd"`
	// product weight
	ProductWeight int `form:"product_weight" json:"product_weight" xml:"product_weight"`
	// product length
	ProductLength int `form:"product_length" json:"product_length" xml:"product_length"`
	// product width
	ProductWidth int `form:"product_width" json:"product_width" xml:"product_width"`
	// product height
	ProductHeight int `form:"product_height" json:"product_height" xml:"product_height"`
	// product attributes
	ProductAttributes []string `form:"product_attributes" json:"product_attributes" xml:"product_attributes"`
	// 产品barcode
	ProductBarcode string `form:"product_barcode" json:"product_barcode" xml:"product_barcode"`
	// declared value in eur（€）
	DeclaredValueInEur float64 `form:"declared_value_in_eur" json:"declared_value_in_eur" xml:"declared_value_in_eur"`
	// requires shipping
	RequiresShipping *bool `form:"requires_shipping,omitempty" json:"requires_shipping,omitempty" xml:"requires_shipping,omitempty"`
	// Ext. order item id
	ExtOrderItemID *string `form:"ext_order_item_id,omitempty" json:"ext_order_item_id,omitempty" xml:"ext_order_item_id,omitempty"`
	// Ext. order item id
	ExtProductID *string `form:"ext_product_id,omitempty" json:"ext_product_id,omitempty" xml:"ext_product_id,omitempty"`
	// Ext. order item id
	PlatformProductID *int32 `form:"platform_product_id,omitempty" json:"platform_product_id,omitempty" xml:"platform_product_id,omitempty"`
	// Material
	Material string `form:"material" json:"material" xml:"material"`
	// Purpose
	Purpose string `form:"purpose" json:"purpose" xml:"purpose"`
}

// OutboundOrderRspDataResponseBody is used to define fields on response body
// types.
type OutboundOrderRspDataResponseBody struct {
	// order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty" xml:"order_number,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
}

// AddressRequestBody is used to define fields on request body types.
type AddressRequestBody struct {
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Country Name
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Country code
	CountryCode *string `form:"country_code,omitempty" json:"country_code,omitempty" xml:"country_code,omitempty"`
	// State Name
	StateName *string `form:"state_name,omitempty" json:"state_name,omitempty" xml:"state_name,omitempty"`
	// State code
	StateCode *string `form:"state_code,omitempty" json:"state_code,omitempty" xml:"state_code,omitempty"`
	// Address Line 1
	Address1 *string `form:"address1,omitempty" json:"address1,omitempty" xml:"address1,omitempty"`
	// Address Line 2
	Address2 *string `form:"address2,omitempty" json:"address2,omitempty" xml:"address2,omitempty"`
	// City Name
	CityName *string `form:"city_name,omitempty" json:"city_name,omitempty" xml:"city_name,omitempty"`
	// ZIP code
	ZipCode *string `form:"zip_code,omitempty" json:"zip_code,omitempty" xml:"zip_code,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// company
	Company *string `form:"company,omitempty" json:"company,omitempty" xml:"company,omitempty"`
	// email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// certificate type
	CertificateType *string `form:"certificate_type,omitempty" json:"certificate_type,omitempty" xml:"certificate_type,omitempty"`
	// certificate code
	CertificateCode *string `form:"certificate_code,omitempty" json:"certificate_code,omitempty" xml:"certificate_code,omitempty"`
	// certificate period
	CertificatePeriod *string `form:"certificate_period,omitempty" json:"certificate_period,omitempty" xml:"certificate_period,omitempty"`
}

// OutboundOrderItemUpdateRequestRequestBody is used to define fields on
// request body types.
type OutboundOrderItemUpdateRequestRequestBody struct {
	// outbound order id
	OutboundOrderID *int64 `form:"outbound_order_id,omitempty" json:"outbound_order_id,omitempty" xml:"outbound_order_id,omitempty"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// ext order item id
	ExtOrderItemID *string `form:"ext_order_item_id,omitempty" json:"ext_order_item_id,omitempty" xml:"ext_order_item_id,omitempty"`
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// declared value in eur
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// claim weight
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// images
	Images []string `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	// material
	Material *string `form:"material,omitempty" json:"material,omitempty" xml:"material,omitempty"`
	// purpose
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
	// requires shipping
	RequiresShipping *bool `form:"requires_shipping,omitempty" json:"requires_shipping,omitempty" xml:"requires_shipping,omitempty"`
	// length
	ProductLength *float64 `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// width
	ProductWidth *float64 `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// height
	ProductHeight *float64 `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// ext order item id
	ExtProductID *string `form:"ext_product_id,omitempty" json:"ext_product_id,omitempty" xml:"ext_product_id,omitempty"`
	// ext order item id
	PlatformProductID *int32 `form:"platform_product_id,omitempty" json:"platform_product_id,omitempty" xml:"platform_product_id,omitempty"`
	// outbound order item id
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Authorization
	Authorization *string `form:"Authorization,omitempty" json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	// JWT used for authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// OutboundOrderUpdateRequestRequestBody is used to define fields on request
// body types.
type OutboundOrderUpdateRequestRequestBody struct {
	// outbound order id
	ID int32 `form:"id" json:"id" xml:"id"`
	// warehouse id
	WarehouseID *int `form:"warehouse_id,omitempty" json:"warehouse_id,omitempty" xml:"warehouse_id,omitempty"`
	// offline
	Offline *bool `form:"offline,omitempty" json:"offline,omitempty" xml:"offline,omitempty"`
	// enable prepay tariff
	EnablePrepayTariff *bool `form:"enable_prepay_tariff,omitempty" json:"enable_prepay_tariff,omitempty" xml:"enable_prepay_tariff,omitempty"`
	// customer tariff number of type
	CustomerTariffNumberType *int `form:"customer_tariff_number_type,omitempty" json:"customer_tariff_number_type,omitempty" xml:"customer_tariff_number_type,omitempty"`
	// customer tariff country code
	CustomerTariffCountryCode *string `form:"customer_tariff_country_code,omitempty" json:"customer_tariff_country_code,omitempty" xml:"customer_tariff_country_code,omitempty"`
	// customer tariff number
	CustomerTariffNumber *string `form:"customer_tariff_number,omitempty" json:"customer_tariff_number,omitempty" xml:"customer_tariff_number,omitempty"`
	// receiver info
	ReceiverInfo *AddressRequestBody `form:"receiver_info,omitempty" json:"receiver_info,omitempty" xml:"receiver_info,omitempty"`
	// order items
	Items []*OutboundOrderItemUpdateRequestRequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Authorization
	Authorization *string `form:"Authorization,omitempty" json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	// JWT used for authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// BatchUpdateResultResponseBody is used to define fields on response body
// types.
type BatchUpdateResultResponseBody struct {
	// outbound order id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// success
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// OrderInfoResponseBody is used to define fields on response body types.
type OrderInfoResponseBody struct {
	// outbounds data
	List []*OrderDataResponseBody `form:"list,omitempty" json:"list,omitempty" xml:"list,omitempty"`
	// MetaData info
	Meta *MetaDataResponseBody `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// OrderDataResponseBody is used to define fields on response body types.
type OrderDataResponseBody struct {
	// customer order id
	CustomerOrderID *string `form:"customer_order_id,omitempty" json:"customer_order_id,omitempty" xml:"customer_order_id,omitempty"`
	// order status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// outbound order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty" xml:"order_number,omitempty"`
	// tracking number
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// tracking url
	TrackingURL *string `form:"tracking_url,omitempty" json:"tracking_url,omitempty" xml:"tracking_url,omitempty"`
	// items
	Items []*OutboundOrderItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// OutboundOrderItemResponseBody is used to define fields on response body
// types.
type OutboundOrderItemResponseBody struct {
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// product SKU
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product price
	ProductPrice *float64 `form:"product_price,omitempty" json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 产品数量
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared value in usd
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// product weight
	ProductWeight *int `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product length
	ProductLength *int `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// product width
	ProductWidth *int `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// product height
	ProductHeight *int `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// 产品barcode
	ProductBarcode *string `form:"product_barcode,omitempty" json:"product_barcode,omitempty" xml:"product_barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// requires shipping
	RequiresShipping *bool `form:"requires_shipping,omitempty" json:"requires_shipping,omitempty" xml:"requires_shipping,omitempty"`
	// Ext. order item id
	ExtOrderItemID *string `form:"ext_order_item_id,omitempty" json:"ext_order_item_id,omitempty" xml:"ext_order_item_id,omitempty"`
	// Ext. order item id
	ExtProductID *string `form:"ext_product_id,omitempty" json:"ext_product_id,omitempty" xml:"ext_product_id,omitempty"`
	// Ext. order item id
	PlatformProductID *int32 `form:"platform_product_id,omitempty" json:"platform_product_id,omitempty" xml:"platform_product_id,omitempty"`
	// Material
	Material *string `form:"material,omitempty" json:"material,omitempty" xml:"material,omitempty"`
	// Purpose
	Purpose *string `form:"purpose,omitempty" json:"purpose,omitempty" xml:"purpose,omitempty"`
}

// OrderListFiltersResultDataResponseBody is used to define fields on response
// body types.
type OrderListFiltersResultDataResponseBody struct {
	// List of keywords types
	KeywordsTypeList []*SelectOptionResponseBody `form:"keywords_type_list,omitempty" json:"keywords_type_list,omitempty" xml:"keywords_type_list,omitempty"`
	// List of user's platforms
	PlatformList []*SelectOptionResponseBody `form:"platform_list,omitempty" json:"platform_list,omitempty" xml:"platform_list,omitempty"`
	// List of user's stores
	StoreList []*SelectOptionResponseBody `form:"store_list,omitempty" json:"store_list,omitempty" xml:"store_list,omitempty"`
	// List of user's warehouses
	WarehouseList []*SelectOptionResponseBody `form:"warehouse_list,omitempty" json:"warehouse_list,omitempty" xml:"warehouse_list,omitempty"`
	// List of user's countries
	CountryList []*SelectOptionResponseBody `form:"country_list,omitempty" json:"country_list,omitempty" xml:"country_list,omitempty"`
}

// SelectOptionResponseBody is used to define fields on response body types.
type SelectOptionResponseBody struct {
	// Value
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Label
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
}

// OrderCountDataResponseBody is used to define fields on response body types.
type OrderCountDataResponseBody struct {
	// Total
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Ready To Ship
	ReadyToShip *int `form:"ready_to_ship,omitempty" json:"ready_to_ship,omitempty" xml:"ready_to_ship,omitempty"`
	// Pending
	Pending *int `form:"pending,omitempty" json:"pending,omitempty" xml:"pending,omitempty"`
	// Shipped
	Shipped *int `form:"shipped,omitempty" json:"shipped,omitempty" xml:"shipped,omitempty"`
	// Cancelled
	Cancelled *int `form:"cancelled,omitempty" json:"cancelled,omitempty" xml:"cancelled,omitempty"`
	// Exception
	Exception *int `form:"exception,omitempty" json:"exception,omitempty" xml:"exception,omitempty"`
}

// GetOrderListDataResponseBody is used to define fields on response body types.
type GetOrderListDataResponseBody struct {
	// List
	List []*ListItemResponseBody `form:"list,omitempty" json:"list,omitempty" xml:"list,omitempty"`
	// meta
	Mate *MetaDataResponseBody `form:"mate,omitempty" json:"mate,omitempty" xml:"mate,omitempty"`
}

// ListItemResponseBody is used to define fields on response body types.
type ListItemResponseBody struct {
	// Order Id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Platform Order id
	PlatformOrderID *string `form:"platform_order_id,omitempty" json:"platform_order_id,omitempty" xml:"platform_order_id,omitempty"`
	// Platform Order No
	PlatformOrderNo *string `form:"platform_order_no,omitempty" json:"platform_order_no,omitempty" xml:"platform_order_no,omitempty"`
	// Platform
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// Store Id
	StoreID *int32 `form:"store_id,omitempty" json:"store_id,omitempty" xml:"store_id,omitempty"`
	// Store Name
	StoreName *string `form:"store_name,omitempty" json:"store_name,omitempty" xml:"store_name,omitempty"`
	// Shipping Info
	ShippingInfo *OrderListItemShipInfoResponseBody `form:"shipping_info,omitempty" json:"shipping_info,omitempty" xml:"shipping_info,omitempty"`
	// Channel Id
	ChannelID *int32 `form:"channel_id,omitempty" json:"channel_id,omitempty" xml:"channel_id,omitempty"`
	// Channel Name
	ChannelName *string `form:"channel_name,omitempty" json:"channel_name,omitempty" xml:"channel_name,omitempty"`
	// Channel Type
	ChannelType *int `form:"channel_type,omitempty" json:"channel_type,omitempty" xml:"channel_type,omitempty"`
	// Channel Type Name
	ChannelTypeName *string `form:"channel_type_name,omitempty" json:"channel_type_name,omitempty" xml:"channel_type_name,omitempty"`
	// Delivery Cost
	DeliveryCost *float64 `form:"delivery_cost,omitempty" json:"delivery_cost,omitempty" xml:"delivery_cost,omitempty"`
	// NSS Tracking Number
	NssTrackingNumber *string `form:"nss_tracking_number,omitempty" json:"nss_tracking_number,omitempty" xml:"nss_tracking_number,omitempty"`
	// Items
	Items []*OrderItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Warehouse Id
	WarehouseID *int32 `form:"warehouse_id,omitempty" json:"warehouse_id,omitempty" xml:"warehouse_id,omitempty"`
	// Warehouse Name
	WarehouseName *string `form:"warehouse_name,omitempty" json:"warehouse_name,omitempty" xml:"warehouse_name,omitempty"`
	// Status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Status Name
	StatusName *string `form:"status_name,omitempty" json:"status_name,omitempty" xml:"status_name,omitempty"`
	// Created At
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Ship Date
	ShipDate *string `form:"ship_date,omitempty" json:"ship_date,omitempty" xml:"ship_date,omitempty"`
	// Channel Options
	ChannelOptions []*ChannelOptionResponseBody `form:"channel_options,omitempty" json:"channel_options,omitempty" xml:"channel_options,omitempty"`
	// Hold Reasons
	HoldReasons []*HoldReasonResponseBody `form:"hold_reasons,omitempty" json:"hold_reasons,omitempty" xml:"hold_reasons,omitempty"`
}

// OrderListItemShipInfoResponseBody is used to define fields on response body
// types.
type OrderListItemShipInfoResponseBody struct {
	// Shipping Name
	ShippingName *string `form:"shipping_name,omitempty" json:"shipping_name,omitempty" xml:"shipping_name,omitempty"`
	// Shipping Country
	ShippingCountry *string `form:"shipping_country,omitempty" json:"shipping_country,omitempty" xml:"shipping_country,omitempty"`
	// Shipping Phone
	ZipCode *string `form:"zip_code,omitempty" json:"zip_code,omitempty" xml:"zip_code,omitempty"`
}

// OrderItemResponseBody is used to define fields on response body types.
type OrderItemResponseBody struct {
	// SKU
	Sku *string `form:"sku,omitempty" json:"sku,omitempty" xml:"sku,omitempty"`
	// Qty
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
}

// ChannelOptionResponseBody is used to define fields on response body types.
type ChannelOptionResponseBody struct {
	// Channel Cost Id
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Channel Name
	ChannelName *string `form:"channel_name,omitempty" json:"channel_name,omitempty" xml:"channel_name,omitempty"`
	// Shipping Cost
	ShippingCost *float64 `form:"shipping_cost,omitempty" json:"shipping_cost,omitempty" xml:"shipping_cost,omitempty"`
	// Channel Type Name
	ChannelTypeName *string `form:"channel_type_name,omitempty" json:"channel_type_name,omitempty" xml:"channel_type_name,omitempty"`
	// Min Normal Days
	MinNormalDays *int `form:"min_normal_days,omitempty" json:"min_normal_days,omitempty" xml:"min_normal_days,omitempty"`
	// Max Normal Days
	MaxNormalDays *int `form:"max_normal_days,omitempty" json:"max_normal_days,omitempty" xml:"max_normal_days,omitempty"`
	// Charge Weight
	ChargeWeight *int64 `form:"charge_weight,omitempty" json:"charge_weight,omitempty" xml:"charge_weight,omitempty"`
	// Fuel Fee
	FuelFee *float64 `form:"fuel_fee,omitempty" json:"fuel_fee,omitempty" xml:"fuel_fee,omitempty"`
	// Misc Fee
	MiscFee *float64 `form:"misc_fee,omitempty" json:"misc_fee,omitempty" xml:"misc_fee,omitempty"`
	// Processing Fee
	ProcessingFee *float64 `form:"processing_fee,omitempty" json:"processing_fee,omitempty" xml:"processing_fee,omitempty"`
	// Total Fee
	TotalFee *float64 `form:"total_fee,omitempty" json:"total_fee,omitempty" xml:"total_fee,omitempty"`
}

// HoldReasonResponseBody is used to define fields on response body types.
type HoldReasonResponseBody struct {
	// Hold Reason Type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hold Reason
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
}

// UploadOrdersDataResponseBody is used to define fields on response body types.
type UploadOrdersDataResponseBody struct {
	// Total Count
	TotalCount *int `form:"total_count,omitempty" json:"total_count,omitempty" xml:"total_count,omitempty"`
	// Success Count
	SuccessCount *int `form:"success_count,omitempty" json:"success_count,omitempty" xml:"success_count,omitempty"`
	// Fail Count
	FailCount *int `form:"fail_count,omitempty" json:"fail_count,omitempty" xml:"fail_count,omitempty"`
	// Result File
	ResultFile *string `form:"result_file,omitempty" json:"result_file,omitempty" xml:"result_file,omitempty"`
}

// NewCreateInboundOrderRequestBody builds the HTTP request body from the
// payload of the "create_inbound_order" endpoint of the "order" service.
func NewCreateInboundOrderRequestBody(p *order.InboundOrder) *CreateInboundOrderRequestBody {
	body := &CreateInboundOrderRequestBody{
		CustomerOrderID:    p.CustomerOrderID,
		WarehouseID:        p.WarehouseID,
		CustomerCode:       p.CustomerCode,
		TrackingNumber:     p.TrackingNumber,
		RequestedPickupAt:  p.RequestedPickupAt,
		EstimatedArrivalAt: p.EstimatedArrivalAt,
		Type:               p.Type,
		IsPickup:           p.IsPickup,
		Description:        p.Description,
		ID:                 p.ID,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewUpdateInboundOrderRequestBody builds the HTTP request body from the
// payload of the "update_inbound_order" endpoint of the "order" service.
func NewUpdateInboundOrderRequestBody(p *order.InboundOrder) *UpdateInboundOrderRequestBody {
	body := &UpdateInboundOrderRequestBody{
		CustomerOrderID:    p.CustomerOrderID,
		WarehouseID:        p.WarehouseID,
		CustomerCode:       p.CustomerCode,
		TrackingNumber:     p.TrackingNumber,
		RequestedPickupAt:  p.RequestedPickupAt,
		EstimatedArrivalAt: p.EstimatedArrivalAt,
		Type:               p.Type,
		IsPickup:           p.IsPickup,
		Description:        p.Description,
		ID:                 p.ID,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewCreatePickupOrderRequestBody builds the HTTP request body from the
// payload of the "create_pickup_order" endpoint of the "order" service.
func NewCreatePickupOrderRequestBody(p *order.PickupOrder) *CreatePickupOrderRequestBody {
	body := &CreatePickupOrderRequestBody{
		RequestedPickupAt: p.RequestedPickupAt,
		Type:              p.Type,
		CustomerCode:      p.CustomerCode,
	}
	if p.Items != nil {
		body.Items = make([]*ItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderItemToItemRequestBody(val)
		}
	}
	if p.Address != nil {
		body.Address = marshalOrderShippingAddressToShippingAddressRequestBody(p.Address)
	}
	return body
}

// NewCreateOutboundOrderRequestBody builds the HTTP request body from the
// payload of the "create_outbound_order" endpoint of the "order" service.
func NewCreateOutboundOrderRequestBody(p *order.OutboundOrder) *CreateOutboundOrderRequestBody {
	body := &CreateOutboundOrderRequestBody{
		CustomerOrderID:      p.CustomerOrderID,
		CustomerCode:         p.CustomerCode,
		TotalPrice:           p.TotalPrice,
		Currency:             p.Currency,
		CustomerTariffNumber: p.CustomerTariffNumber,
		CountryCode:          p.CountryCode,
		EnablePrepayTariff:   p.EnablePrepayTariff,
		ShippingType:         p.ShippingType,
		ChannelID:            p.ChannelID,
		Description:          p.Description,
		InboundOrderNumber:   p.InboundOrderNumber,
		Type:                 p.Type,
		ID:                   p.ID,
		PackageID:            p.PackageID,
		StoreID:              p.StoreID,
		EstimatedWeight:      p.EstimatedWeight,
		PlatformOrderNo:      p.PlatformOrderNo,
		PlatformCreatedAt:    p.PlatformCreatedAt,
		RequestShippingAt:    p.RequestShippingAt,
		Remark:               p.Remark,
		VatNumber:            p.VatNumber,
	}
	if p.ReceiverInfo != nil {
		body.ReceiverInfo = marshalOrderShippingAddressToShippingAddressRequestBody(p.ReceiverInfo)
	}
	if p.Items != nil {
		body.Items = make([]*OutboundOrderItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderOutboundOrderItemToOutboundOrderItemRequestBody(val)
		}
	}
	return body
}

// NewUpdateOutboundOrderRequestBody builds the HTTP request body from the
// payload of the "update_outbound_order" endpoint of the "order" service.
func NewUpdateOutboundOrderRequestBody(p *order.OutboundOrderUpdateRequest) *UpdateOutboundOrderRequestBody {
	body := &UpdateOutboundOrderRequestBody{
		WarehouseID:               p.WarehouseID,
		Offline:                   p.Offline,
		EnablePrepayTariff:        p.EnablePrepayTariff,
		CustomerTariffNumberType:  p.CustomerTariffNumberType,
		CustomerTariffCountryCode: p.CustomerTariffCountryCode,
		CustomerTariffNumber:      p.CustomerTariffNumber,
		Description:               p.Description,
	}
	if p.ReceiverInfo != nil {
		body.ReceiverInfo = marshalOrderAddressToAddressRequestBody(p.ReceiverInfo)
	}
	if p.Items != nil {
		body.Items = make([]*OutboundOrderItemUpdateRequestRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalOrderOutboundOrderItemUpdateRequestToOutboundOrderItemUpdateRequestRequestBody(val)
		}
	}
	return body
}

// NewBatchUpdateOutboundOrderRequestBody builds the HTTP request body from the
// payload of the "batch_update_outbound_order" endpoint of the "order" service.
func NewBatchUpdateOutboundOrderRequestBody(p *order.BatchUpdateOrderRequest) *BatchUpdateOutboundOrderRequestBody {
	body := &BatchUpdateOutboundOrderRequestBody{}
	if p.Orders != nil {
		body.Orders = make([]*OutboundOrderUpdateRequestRequestBody, len(p.Orders))
		for i, val := range p.Orders {
			body.Orders[i] = marshalOrderOutboundOrderUpdateRequestToOutboundOrderUpdateRequestRequestBody(val)
		}
	}
	return body
}

// NewCreateOutboundOrderItemRequestBody builds the HTTP request body from the
// payload of the "create_outbound_order_item" endpoint of the "order" service.
func NewCreateOutboundOrderItemRequestBody(p *order.OutboundOrderItemCreateRequest) *CreateOutboundOrderItemRequestBody {
	body := &CreateOutboundOrderItemRequestBody{
		OutboundOrderID:    p.OutboundOrderID,
		ProductSku:         p.ProductSku,
		ExtOrderItemID:     p.ExtOrderItemID,
		ProductName:        p.ProductName,
		ProductPrice:       p.ProductPrice,
		Barcode:            p.Barcode,
		Qty:                p.Qty,
		HsCode:             p.HsCode,
		DeclaredCnName:     p.DeclaredCnName,
		DeclaredEnName:     p.DeclaredEnName,
		DeclaredValueInUsd: p.DeclaredValueInUsd,
		DeclaredValueInEur: p.DeclaredValueInEur,
		ProductWeight:      p.ProductWeight,
		CustomerCode:       p.CustomerCode,
		Material:           p.Material,
		Purpose:            p.Purpose,
		RequiresShipping:   p.RequiresShipping,
		ProductLength:      p.ProductLength,
		ProductWidth:       p.ProductWidth,
		ProductHeight:      p.ProductHeight,
	}
	if p.ProductAttributes != nil {
		body.ProductAttributes = make([]string, len(p.ProductAttributes))
		for i, val := range p.ProductAttributes {
			body.ProductAttributes[i] = val
		}
	}
	if p.Images != nil {
		body.Images = make([]string, len(p.Images))
		for i, val := range p.Images {
			body.Images[i] = val
		}
	}
	return body
}

// NewUpdateOutboundOrderItemRequestBody builds the HTTP request body from the
// payload of the "update_outbound_order_item" endpoint of the "order" service.
func NewUpdateOutboundOrderItemRequestBody(p *order.OutboundOrderItemUpdateRequest) *UpdateOutboundOrderItemRequestBody {
	body := &UpdateOutboundOrderItemRequestBody{
		OutboundOrderID:    p.OutboundOrderID,
		ProductSku:         p.ProductSku,
		ExtOrderItemID:     p.ExtOrderItemID,
		ProductName:        p.ProductName,
		ProductPrice:       p.ProductPrice,
		Barcode:            p.Barcode,
		Qty:                p.Qty,
		HsCode:             p.HsCode,
		DeclaredCnName:     p.DeclaredCnName,
		DeclaredEnName:     p.DeclaredEnName,
		DeclaredValueInUsd: p.DeclaredValueInUsd,
		DeclaredValueInEur: p.DeclaredValueInEur,
		ProductWeight:      p.ProductWeight,
		CustomerCode:       p.CustomerCode,
		Material:           p.Material,
		Purpose:            p.Purpose,
		RequiresShipping:   p.RequiresShipping,
		ProductLength:      p.ProductLength,
		ProductWidth:       p.ProductWidth,
		ProductHeight:      p.ProductHeight,
		ExtProductID:       p.ExtProductID,
		PlatformProductID:  p.PlatformProductID,
	}
	if p.ProductAttributes != nil {
		body.ProductAttributes = make([]string, len(p.ProductAttributes))
		for i, val := range p.ProductAttributes {
			body.ProductAttributes[i] = val
		}
	}
	if p.Images != nil {
		body.Images = make([]string, len(p.Images))
		for i, val := range p.Images {
			body.Images[i] = val
		}
	}
	return body
}

// NewUploadOutboundOrdersRequestBody builds the HTTP request body from the
// payload of the "upload_outbound_orders" endpoint of the "order" service.
func NewUploadOutboundOrdersRequestBody(p *order.UploadOrdersPayload) *UploadOutboundOrdersRequestBody {
	body := &UploadOutboundOrdersRequestBody{
		File:     p.File,
		FileName: p.FileName,
	}
	return body
}

// NewCreateInboundOrderInboundOrderRspOK builds a "order" service
// "create_inbound_order" endpoint result from a HTTP "OK" response.
func NewCreateInboundOrderInboundOrderRspOK(body *CreateInboundOrderResponseBody) *order.InboundOrderRsp {
	v := &order.InboundOrderRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalInboundOrderDataResponseBodyToOrderInboundOrderData(body.Data)
	}

	return v
}

// NewCreateInboundOrderUnauthorized builds a order service
// create_inbound_order endpoint Unauthorized error.
func NewCreateInboundOrderUnauthorized(body *CreateInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateInboundOrderUpdateResponseOK builds a "order" service
// "update_inbound_order" endpoint result from a HTTP "OK" response.
func NewUpdateInboundOrderUpdateResponseOK(body *UpdateInboundOrderResponseBody) *order.UpdateResponse {
	v := &order.UpdateResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUpdateResponseDataResponseBodyToOrderUpdateResponseData(body.Data)
	}

	return v
}

// NewUpdateInboundOrderUnauthorized builds a order service
// update_inbound_order endpoint Unauthorized error.
func NewUpdateInboundOrderUnauthorized(body *UpdateInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePickupOrderPickupOrderRspOK builds a "order" service
// "create_pickup_order" endpoint result from a HTTP "OK" response.
func NewCreatePickupOrderPickupOrderRspOK(body *CreatePickupOrderResponseBody) *order.PickupOrderRsp {
	v := &order.PickupOrderRsp{
		ErrorMsg: *body.ErrorMsg,
	}

	return v
}

// NewCreatePickupOrderUnauthorized builds a order service create_pickup_order
// endpoint Unauthorized error.
func NewCreatePickupOrderUnauthorized(body *CreatePickupOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchQueryInboundOrderInboundOrderResponseOK builds a "order" service
// "batch_query_inbound_order" endpoint result from a HTTP "OK" response.
func NewBatchQueryInboundOrderInboundOrderResponseOK(body *BatchQueryInboundOrderResponseBody) *order.InboundOrderResponse {
	v := &order.InboundOrderResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalInboundOrderInfoResponseBodyToOrderInboundOrderInfo(body.Data)
	}

	return v
}

// NewBatchQueryInboundOrderUnauthorized builds a order service
// batch_query_inbound_order endpoint Unauthorized error.
func NewBatchQueryInboundOrderUnauthorized(body *BatchQueryInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetInboundOrderQueryInboundOrderRspOK builds a "order" service
// "get_inbound_order" endpoint result from a HTTP "OK" response.
func NewGetInboundOrderQueryInboundOrderRspOK(body *GetInboundOrderResponseBody) *order.QueryInboundOrderRsp {
	v := &order.QueryInboundOrderRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalInboundOrderResponseDataResponseBodyToOrderInboundOrderResponseData(body.Data)
	}

	return v
}

// NewGetInboundOrderUnauthorized builds a order service get_inbound_order
// endpoint Unauthorized error.
func NewGetInboundOrderUnauthorized(body *GetInboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOutboundOrderOutboundOrderRspOK builds a "order" service
// "create_outbound_order" endpoint result from a HTTP "OK" response.
func NewCreateOutboundOrderOutboundOrderRspOK(body *CreateOutboundOrderResponseBody) *order.OutboundOrderRsp {
	v := &order.OutboundOrderRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalOutboundOrderRspDataResponseBodyToOrderOutboundOrderRspData(body.Data)
	}

	return v
}

// NewCreateOutboundOrderUnauthorized builds a order service
// create_outbound_order endpoint Unauthorized error.
func NewCreateOutboundOrderUnauthorized(body *CreateOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateOutboundOrderUpdateResponseOK builds a "order" service
// "update_outbound_order" endpoint result from a HTTP "OK" response.
func NewUpdateOutboundOrderUpdateResponseOK(body *UpdateOutboundOrderResponseBody) *order.UpdateResponse {
	v := &order.UpdateResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUpdateResponseDataResponseBodyToOrderUpdateResponseData(body.Data)
	}

	return v
}

// NewUpdateOutboundOrderUnauthorized builds a order service
// update_outbound_order endpoint Unauthorized error.
func NewUpdateOutboundOrderUnauthorized(body *UpdateOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchUpdateOutboundOrderBatchUpdateOrderResponseOK builds a "order"
// service "batch_update_outbound_order" endpoint result from a HTTP "OK"
// response.
func NewBatchUpdateOutboundOrderBatchUpdateOrderResponseOK(body *BatchUpdateOutboundOrderResponseBody) *order.BatchUpdateOrderResponse {
	v := &order.BatchUpdateOrderResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = make([]*order.BatchUpdateResult, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalBatchUpdateResultResponseBodyToOrderBatchUpdateResult(val)
		}
	}

	return v
}

// NewBatchUpdateOutboundOrderUnauthorized builds a order service
// batch_update_outbound_order endpoint Unauthorized error.
func NewBatchUpdateOutboundOrderUnauthorized(body *BatchUpdateOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOutboundOrderItemBaseResponseOK builds a "order" service
// "create_outbound_order_item" endpoint result from a HTTP "OK" response.
func NewCreateOutboundOrderItemBaseResponseOK(body *CreateOutboundOrderItemResponseBody) *order.BaseResponse {
	v := &order.BaseResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateOutboundOrderItemUnauthorized builds a order service
// create_outbound_order_item endpoint Unauthorized error.
func NewCreateOutboundOrderItemUnauthorized(body *CreateOutboundOrderItemUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateOutboundOrderItemBaseResponseOK builds a "order" service
// "update_outbound_order_item" endpoint result from a HTTP "OK" response.
func NewUpdateOutboundOrderItemBaseResponseOK(body *UpdateOutboundOrderItemResponseBody) *order.BaseResponse {
	v := &order.BaseResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateOutboundOrderItemUnauthorized builds a order service
// update_outbound_order_item endpoint Unauthorized error.
func NewUpdateOutboundOrderItemUnauthorized(body *UpdateOutboundOrderItemUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteOutboundOrderItemBaseResponseOK builds a "order" service
// "delete_outbound_order_item" endpoint result from a HTTP "OK" response.
func NewDeleteOutboundOrderItemBaseResponseOK(body *DeleteOutboundOrderItemResponseBody) *order.BaseResponse {
	v := &order.BaseResponse{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteOutboundOrderItemUnauthorized builds a order service
// delete_outbound_order_item endpoint Unauthorized error.
func NewDeleteOutboundOrderItemUnauthorized(body *DeleteOutboundOrderItemUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchQueryOutboundOrderOrderRspOK builds a "order" service
// "batch_query_outbound_order" endpoint result from a HTTP "OK" response.
func NewBatchQueryOutboundOrderOrderRspOK(body *BatchQueryOutboundOrderResponseBody) *order.OrderRsp {
	v := &order.OrderRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalOrderInfoResponseBodyToOrderOrderInfo(body.Data)
	}

	return v
}

// NewBatchQueryOutboundOrderUnauthorized builds a order service
// batch_query_outbound_order endpoint Unauthorized error.
func NewBatchQueryOutboundOrderUnauthorized(body *BatchQueryOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOutboundOrderQueryOrderRspOK builds a "order" service
// "get_outbound_order" endpoint result from a HTTP "OK" response.
func NewGetOutboundOrderQueryOrderRspOK(body *GetOutboundOrderResponseBody) *order.QueryOrderRsp {
	v := &order.QueryOrderRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalOrderDataResponseBodyToOrderOrderData(body.Data)
	}

	return v
}

// NewGetOutboundOrderUnauthorized builds a order service get_outbound_order
// endpoint Unauthorized error.
func NewGetOutboundOrderUnauthorized(body *GetOutboundOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOutboundOrderListFiltersOrderListFiltersOK builds a "order" service
// "get_outbound_order_list_filters" endpoint result from a HTTP "OK" response.
func NewGetOutboundOrderListFiltersOrderListFiltersOK(body *GetOutboundOrderListFiltersResponseBody) *order.OrderListFilters {
	v := &order.OrderListFilters{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalOrderListFiltersResultDataResponseBodyToOrderOrderListFiltersResultData(body.Data)
	}

	return v
}

// NewGetOutboundOrderListFiltersUnauthorized builds a order service
// get_outbound_order_list_filters endpoint Unauthorized error.
func NewGetOutboundOrderListFiltersUnauthorized(body *GetOutboundOrderListFiltersUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOutboundOrderCountOrderCountResultOK builds a "order" service
// "get_outbound_order_count" endpoint result from a HTTP "OK" response.
func NewGetOutboundOrderCountOrderCountResultOK(body *GetOutboundOrderCountResponseBody) *order.OrderCountResult {
	v := &order.OrderCountResult{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalOrderCountDataResponseBodyToOrderOrderCountData(body.Data)
	}

	return v
}

// NewGetOutboundOrderCountUnauthorized builds a order service
// get_outbound_order_count endpoint Unauthorized error.
func NewGetOutboundOrderCountUnauthorized(body *GetOutboundOrderCountUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetOutboundOrderListGetOrderListResultOK builds a "order" service
// "get_outbound_order_list" endpoint result from a HTTP "OK" response.
func NewGetOutboundOrderListGetOrderListResultOK(body *GetOutboundOrderListResponseBody) *order.GetOrderListResult {
	v := &order.GetOrderListResult{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalGetOrderListDataResponseBodyToOrderGetOrderListData(body.Data)
	}

	return v
}

// NewGetOutboundOrderListUnauthorized builds a order service
// get_outbound_order_list endpoint Unauthorized error.
func NewGetOutboundOrderListUnauthorized(body *GetOutboundOrderListUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadOutboundOrdersUploadOrdersResultOK builds a "order" service
// "upload_outbound_orders" endpoint result from a HTTP "OK" response.
func NewUploadOutboundOrdersUploadOrdersResultOK(body *UploadOutboundOrdersResponseBody) *order.UploadOrdersResult {
	v := &order.UploadOrdersResult{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalUploadOrdersDataResponseBodyToOrderUploadOrdersData(body.Data)
	}

	return v
}

// NewUploadOutboundOrdersUnauthorized builds a order service
// upload_outbound_orders endpoint Unauthorized error.
func NewUploadOutboundOrdersUnauthorized(body *UploadOutboundOrdersUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewExportOutboundOrdersExportOrderResultOK builds a "order" service
// "export_outbound_orders" endpoint result from a HTTP "OK" response.
func NewExportOutboundOrdersExportOrderResultOK(length int64) *order.ExportOrderResult {
	v := &order.ExportOrderResult{}
	v.Length = length

	return v
}

// NewExportOutboundOrdersUnauthorized builds a order service
// export_outbound_orders endpoint Unauthorized error.
func NewExportOutboundOrdersUnauthorized(body *ExportOutboundOrdersUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewExportOutboundOrdersInternalError builds a order service
// export_outbound_orders endpoint internal_error error.
func NewExportOutboundOrdersInternalError(body *ExportOutboundOrdersInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateInboundOrderResponseBody runs the validations defined on
// create_inbound_order_response_body
func ValidateCreateInboundOrderResponseBody(body *CreateInboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateInboundOrderDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateInboundOrderResponseBody runs the validations defined on
// update_inbound_order_response_body
func ValidateUpdateInboundOrderResponseBody(body *UpdateInboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUpdateResponseDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePickupOrderResponseBody runs the validations defined on
// create_pickup_order_response_body
func ValidateCreatePickupOrderResponseBody(body *CreatePickupOrderResponseBody) (err error) {
	if body.ErrorMsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_msg", "body"))
	}
	return
}

// ValidateBatchQueryInboundOrderResponseBody runs the validations defined on
// batch_query_inbound_order_response_body
func ValidateBatchQueryInboundOrderResponseBody(body *BatchQueryInboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateInboundOrderInfoResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetInboundOrderResponseBody runs the validations defined on
// get_inbound_order_response_body
func ValidateGetInboundOrderResponseBody(body *GetInboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateInboundOrderResponseDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateOutboundOrderResponseBody runs the validations defined on
// create_outbound_order_response_body
func ValidateCreateOutboundOrderResponseBody(body *CreateOutboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateOutboundOrderRspDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateOutboundOrderResponseBody runs the validations defined on
// update_outbound_order_response_body
func ValidateUpdateOutboundOrderResponseBody(body *UpdateOutboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateUpdateResponseDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBatchUpdateOutboundOrderResponseBody runs the validations defined on
// batch_update_outbound_order_response_body
func ValidateBatchUpdateOutboundOrderResponseBody(body *BatchUpdateOutboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateBatchUpdateResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateOutboundOrderItemResponseBody runs the validations defined on
// create_outbound_order_item_response_body
func ValidateCreateOutboundOrderItemResponseBody(body *CreateOutboundOrderItemResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateOutboundOrderItemResponseBody runs the validations defined on
// update_outbound_order_item_response_body
func ValidateUpdateOutboundOrderItemResponseBody(body *UpdateOutboundOrderItemResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteOutboundOrderItemResponseBody runs the validations defined on
// delete_outbound_order_item_response_body
func ValidateDeleteOutboundOrderItemResponseBody(body *DeleteOutboundOrderItemResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateBatchQueryOutboundOrderResponseBody runs the validations defined on
// batch_query_outbound_order_response_body
func ValidateBatchQueryOutboundOrderResponseBody(body *BatchQueryOutboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateOrderInfoResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOutboundOrderResponseBody runs the validations defined on
// get_outbound_order_response_body
func ValidateGetOutboundOrderResponseBody(body *GetOutboundOrderResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateOrderDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOutboundOrderListFiltersResponseBody runs the validations defined
// on get_outbound_order_list_filters_response_body
func ValidateGetOutboundOrderListFiltersResponseBody(body *GetOutboundOrderListFiltersResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOutboundOrderCountResponseBody runs the validations defined on
// get_outbound_order_count_response_body
func ValidateGetOutboundOrderCountResponseBody(body *GetOutboundOrderCountResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOutboundOrderListResponseBody runs the validations defined on
// get_outbound_order_list_response_body
func ValidateGetOutboundOrderListResponseBody(body *GetOutboundOrderListResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateGetOrderListDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUploadOutboundOrdersResponseBody runs the validations defined on
// upload_outbound_orders_response_body
func ValidateUploadOutboundOrdersResponseBody(body *UploadOutboundOrdersResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInboundOrderUnauthorizedResponseBody runs the validations
// defined on create_inbound_order_Unauthorized_response_body
func ValidateCreateInboundOrderUnauthorizedResponseBody(body *CreateInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInboundOrderUnauthorizedResponseBody runs the validations
// defined on update_inbound_order_Unauthorized_response_body
func ValidateUpdateInboundOrderUnauthorizedResponseBody(body *UpdateInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePickupOrderUnauthorizedResponseBody runs the validations
// defined on create_pickup_order_Unauthorized_response_body
func ValidateCreatePickupOrderUnauthorizedResponseBody(body *CreatePickupOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchQueryInboundOrderUnauthorizedResponseBody runs the validations
// defined on batch_query_inbound_order_Unauthorized_response_body
func ValidateBatchQueryInboundOrderUnauthorizedResponseBody(body *BatchQueryInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetInboundOrderUnauthorizedResponseBody runs the validations defined
// on get_inbound_order_Unauthorized_response_body
func ValidateGetInboundOrderUnauthorizedResponseBody(body *GetInboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOutboundOrderUnauthorizedResponseBody runs the validations
// defined on create_outbound_order_Unauthorized_response_body
func ValidateCreateOutboundOrderUnauthorizedResponseBody(body *CreateOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateOutboundOrderUnauthorizedResponseBody runs the validations
// defined on update_outbound_order_Unauthorized_response_body
func ValidateUpdateOutboundOrderUnauthorizedResponseBody(body *UpdateOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchUpdateOutboundOrderUnauthorizedResponseBody runs the
// validations defined on batch_update_outbound_order_Unauthorized_response_body
func ValidateBatchUpdateOutboundOrderUnauthorizedResponseBody(body *BatchUpdateOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOutboundOrderItemUnauthorizedResponseBody runs the validations
// defined on create_outbound_order_item_Unauthorized_response_body
func ValidateCreateOutboundOrderItemUnauthorizedResponseBody(body *CreateOutboundOrderItemUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateOutboundOrderItemUnauthorizedResponseBody runs the validations
// defined on update_outbound_order_item_Unauthorized_response_body
func ValidateUpdateOutboundOrderItemUnauthorizedResponseBody(body *UpdateOutboundOrderItemUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteOutboundOrderItemUnauthorizedResponseBody runs the validations
// defined on delete_outbound_order_item_Unauthorized_response_body
func ValidateDeleteOutboundOrderItemUnauthorizedResponseBody(body *DeleteOutboundOrderItemUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchQueryOutboundOrderUnauthorizedResponseBody runs the validations
// defined on batch_query_outbound_order_Unauthorized_response_body
func ValidateBatchQueryOutboundOrderUnauthorizedResponseBody(body *BatchQueryOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOutboundOrderUnauthorizedResponseBody runs the validations
// defined on get_outbound_order_Unauthorized_response_body
func ValidateGetOutboundOrderUnauthorizedResponseBody(body *GetOutboundOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOutboundOrderListFiltersUnauthorizedResponseBody runs the
// validations defined on
// get_outbound_order_list_filters_Unauthorized_response_body
func ValidateGetOutboundOrderListFiltersUnauthorizedResponseBody(body *GetOutboundOrderListFiltersUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOutboundOrderCountUnauthorizedResponseBody runs the validations
// defined on get_outbound_order_count_Unauthorized_response_body
func ValidateGetOutboundOrderCountUnauthorizedResponseBody(body *GetOutboundOrderCountUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOutboundOrderListUnauthorizedResponseBody runs the validations
// defined on get_outbound_order_list_Unauthorized_response_body
func ValidateGetOutboundOrderListUnauthorizedResponseBody(body *GetOutboundOrderListUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadOutboundOrdersUnauthorizedResponseBody runs the validations
// defined on upload_outbound_orders_Unauthorized_response_body
func ValidateUploadOutboundOrdersUnauthorizedResponseBody(body *UploadOutboundOrdersUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateExportOutboundOrdersUnauthorizedResponseBody runs the validations
// defined on export_outbound_orders_Unauthorized_response_body
func ValidateExportOutboundOrdersUnauthorizedResponseBody(body *ExportOutboundOrdersUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateExportOutboundOrdersInternalErrorResponseBody runs the validations
// defined on export_outbound_orders_internal_error_response_body
func ValidateExportOutboundOrdersInternalErrorResponseBody(body *ExportOutboundOrdersInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShippingAddressRequestBody runs the validations defined on
// ShippingAddressRequestBody
func ValidateShippingAddressRequestBody(body *ShippingAddressRequestBody) (err error) {
	if body.CertificateType != nil {
		if !(*body.CertificateType == "ID" || *body.CertificateType == "PP") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.certificate_type", *body.CertificateType, []interface{}{"ID", "PP"}))
		}
	}
	return
}

// ValidateInboundOrderDataResponseBody runs the validations defined on
// InboundOrderDataResponseBody
func ValidateInboundOrderDataResponseBody(body *InboundOrderDataResponseBody) (err error) {
	if body.OrderNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_number", "body"))
	}
	if body.LabelURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label_url", "body"))
	}
	return
}

// ValidateUpdateResponseDataResponseBody runs the validations defined on
// UpdateResponseDataResponseBody
func ValidateUpdateResponseDataResponseBody(body *UpdateResponseDataResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == 0 || *body.Status == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateInboundOrderInfoResponseBody runs the validations defined on
// InboundOrderInfoResponseBody
func ValidateInboundOrderInfoResponseBody(body *InboundOrderInfoResponseBody) (err error) {
	if body.List == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	for _, e := range body.List {
		if e != nil {
			if err2 := ValidateInboundOrderResponseDataResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Meta != nil {
		if err2 := ValidateMetaDataResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateInboundOrderResponseDataResponseBody runs the validations defined on
// InboundOrderResponseDataResponseBody
func ValidateInboundOrderResponseDataResponseBody(body *InboundOrderResponseDataResponseBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.OrderNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_number", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.TrackingURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_url", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.CarrierName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("carrier_name", "body"))
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 50, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateItemResponseBody runs the validations defined on ItemResponseBody
func ValidateItemResponseBody(body *ItemResponseBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductBarcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_barcode", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	return
}

// ValidateMetaDataResponseBody runs the validations defined on
// MetaDataResponseBody
func ValidateMetaDataResponseBody(body *MetaDataResponseBody) (err error) {
	if body.Current == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current", "body"))
	}
	if body.PageSize == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page_size", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Current != nil {
		if *body.Current < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.current", *body.Current, 1, true))
		}
	}
	if body.PageSize != nil {
		if *body.PageSize < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.page_size", *body.PageSize, 1, true))
		}
	}
	return
}

// ValidateOutboundOrderItemRequestBody runs the validations defined on
// OutboundOrderItemRequestBody
func ValidateOutboundOrderItemRequestBody(body *OutboundOrderItemRequestBody) (err error) {
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.DeclaredValueInUsd < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", body.DeclaredValueInUsd, 0, true))
	}
	if body.DeclaredValueInEur < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", body.DeclaredValueInEur, 0, true))
	}
	return
}

// ValidateOutboundOrderRspDataResponseBody runs the validations defined on
// OutboundOrderRspDataResponseBody
func ValidateOutboundOrderRspDataResponseBody(body *OutboundOrderRspDataResponseBody) (err error) {
	if body.OrderNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_number", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	return
}

// ValidateAddressRequestBody runs the validations defined on AddressRequestBody
func ValidateAddressRequestBody(body *AddressRequestBody) (err error) {
	if body.CertificateType != nil {
		if !(*body.CertificateType == "ID" || *body.CertificateType == "PP") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.certificate_type", *body.CertificateType, []interface{}{"ID", "PP"}))
		}
	}
	return
}

// ValidateOutboundOrderItemUpdateRequestRequestBody runs the validations
// defined on OutboundOrderItemUpdateRequestRequestBody
func ValidateOutboundOrderItemUpdateRequestRequestBody(body *OutboundOrderItemUpdateRequestRequestBody) (err error) {
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	return
}

// ValidateOutboundOrderUpdateRequestRequestBody runs the validations defined
// on OutboundOrderUpdateRequestRequestBody
func ValidateOutboundOrderUpdateRequestRequestBody(body *OutboundOrderUpdateRequestRequestBody) (err error) {
	if body.ReceiverInfo != nil {
		if err2 := ValidateAddressRequestBody(body.ReceiverInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOutboundOrderItemUpdateRequestRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBatchUpdateResultResponseBody runs the validations defined on
// BatchUpdateResultResponseBody
func ValidateBatchUpdateResultResponseBody(body *BatchUpdateResultResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateOrderInfoResponseBody runs the validations defined on
// OrderInfoResponseBody
func ValidateOrderInfoResponseBody(body *OrderInfoResponseBody) (err error) {
	if body.List == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	for _, e := range body.List {
		if e != nil {
			if err2 := ValidateOrderDataResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Meta != nil {
		if err2 := ValidateMetaDataResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderDataResponseBody runs the validations defined on
// OrderDataResponseBody
func ValidateOrderDataResponseBody(body *OrderDataResponseBody) (err error) {
	if body.CustomerOrderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_order_id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.OrderNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order_number", "body"))
	}
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.TrackingURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_url", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.CustomerOrderID != nil {
		if utf8.RuneCountInString(*body.CustomerOrderID) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_order_id", *body.CustomerOrderID, utf8.RuneCountInString(*body.CustomerOrderID), 50, false))
		}
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOutboundOrderItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOutboundOrderItemResponseBody runs the validations defined on
// OutboundOrderItemResponseBody
func ValidateOutboundOrderItemResponseBody(body *OutboundOrderItemResponseBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_price", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	if body.HsCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hs_code", "body"))
	}
	if body.DeclaredCnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_cn_name", "body"))
	}
	if body.DeclaredEnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_en_name", "body"))
	}
	if body.DeclaredValueInUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_usd", "body"))
	}
	if body.ProductWeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_weight", "body"))
	}
	if body.ProductLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_length", "body"))
	}
	if body.ProductWidth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_width", "body"))
	}
	if body.ProductHeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_height", "body"))
	}
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.ProductBarcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_barcode", "body"))
	}
	if body.DeclaredValueInEur == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_eur", "body"))
	}
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	return
}

// ValidateGetOrderListDataResponseBody runs the validations defined on
// GetOrderListDataResponseBody
func ValidateGetOrderListDataResponseBody(body *GetOrderListDataResponseBody) (err error) {
	for _, e := range body.List {
		if e != nil {
			if err2 := ValidateListItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Mate != nil {
		if err2 := ValidateMetaDataResponseBody(body.Mate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListItemResponseBody runs the validations defined on List
// ItemResponseBody
func ValidateListItemResponseBody(body *ListItemResponseBody) (err error) {
	if body.ChannelType != nil {
		if !(*body.ChannelType == 1 || *body.ChannelType == 2 || *body.ChannelType == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.channel_type", *body.ChannelType, []interface{}{1, 2, 3}))
		}
	}
	return
}
