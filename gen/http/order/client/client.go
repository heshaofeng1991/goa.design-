// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order client HTTP transport
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the order service endpoint HTTP clients.
type Client struct {
	// CreateInboundOrder Doer is the HTTP client used to make requests to the
	// create_inbound_order endpoint.
	CreateInboundOrderDoer goahttp.Doer

	// UpdateInboundOrder Doer is the HTTP client used to make requests to the
	// update_inbound_order endpoint.
	UpdateInboundOrderDoer goahttp.Doer

	// CreateOutboundOrder Doer is the HTTP client used to make requests to the
	// create_outbound_order endpoint.
	CreateOutboundOrderDoer goahttp.Doer

	// UpdateOutboundOrder Doer is the HTTP client used to make requests to the
	// update_outbound_order endpoint.
	UpdateOutboundOrderDoer goahttp.Doer

	// CreatePickupOrder Doer is the HTTP client used to make requests to the
	// create_pickup_order endpoint.
	CreatePickupOrderDoer goahttp.Doer

	// GetInboundOrder Doer is the HTTP client used to make requests to the
	// get_inbound_order endpoint.
	GetInboundOrderDoer goahttp.Doer

	// GetOutboundOrder Doer is the HTTP client used to make requests to the
	// get_outbound_order endpoint.
	GetOutboundOrderDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the order service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateInboundOrderDoer:  doer,
		UpdateInboundOrderDoer:  doer,
		CreateOutboundOrderDoer: doer,
		UpdateOutboundOrderDoer: doer,
		CreatePickupOrderDoer:   doer,
		GetInboundOrderDoer:     doer,
		GetOutboundOrderDoer:    doer,
		CORSDoer:                doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// CreateInboundOrder returns an endpoint that makes HTTP requests to the order
// service create_inbound_order server.
func (c *Client) CreateInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateInboundOrderRequest(c.encoder)
		decodeResponse = DecodeCreateInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateInboundOrder returns an endpoint that makes HTTP requests to the order
// service update_inbound_order server.
func (c *Client) UpdateInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateInboundOrderRequest(c.encoder)
		decodeResponse = DecodeUpdateInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "update_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// CreateOutboundOrder returns an endpoint that makes HTTP requests to the
// order service create_outbound_order server.
func (c *Client) CreateOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeCreateOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateOutboundOrder returns an endpoint that makes HTTP requests to the
// order service update_outbound_order server.
func (c *Client) UpdateOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeUpdateOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "update_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePickupOrder returns an endpoint that makes HTTP requests to the order
// service create_pickup_order server.
func (c *Client) CreatePickupOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePickupOrderRequest(c.encoder)
		decodeResponse = DecodeCreatePickupOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePickupOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePickupOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_pickup_order", err)
		}
		return decodeResponse(resp)
	}
}

// GetInboundOrder returns an endpoint that makes HTTP requests to the order
// service get_inbound_order server.
func (c *Client) GetInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetInboundOrderRequest(c.encoder)
		decodeResponse = DecodeGetInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// GetOutboundOrder returns an endpoint that makes HTTP requests to the order
// service get_outbound_order server.
func (c *Client) GetOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeGetOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}
