// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order client HTTP transport
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"context"
	order "goa/gen/order"
	"mime/multipart"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the order service endpoint HTTP clients.
type Client struct {
	// CreateInboundOrder Doer is the HTTP client used to make requests to the
	// create_inbound_order endpoint.
	CreateInboundOrderDoer goahttp.Doer

	// UpdateInboundOrder Doer is the HTTP client used to make requests to the
	// update_inbound_order endpoint.
	UpdateInboundOrderDoer goahttp.Doer

	// CreatePickupOrder Doer is the HTTP client used to make requests to the
	// create_pickup_order endpoint.
	CreatePickupOrderDoer goahttp.Doer

	// BatchQueryInboundOrder Doer is the HTTP client used to make requests to the
	// batch_query_inbound_order endpoint.
	BatchQueryInboundOrderDoer goahttp.Doer

	// GetInboundOrder Doer is the HTTP client used to make requests to the
	// get_inbound_order endpoint.
	GetInboundOrderDoer goahttp.Doer

	// CreateOutboundOrder Doer is the HTTP client used to make requests to the
	// create_outbound_order endpoint.
	CreateOutboundOrderDoer goahttp.Doer

	// UpdateOutboundOrder Doer is the HTTP client used to make requests to the
	// update_outbound_order endpoint.
	UpdateOutboundOrderDoer goahttp.Doer

	// BatchUpdateOutboundOrder Doer is the HTTP client used to make requests to
	// the batch_update_outbound_order endpoint.
	BatchUpdateOutboundOrderDoer goahttp.Doer

	// CreateOutboundOrderItem Doer is the HTTP client used to make requests to the
	// create_outbound_order_item endpoint.
	CreateOutboundOrderItemDoer goahttp.Doer

	// UpdateOutboundOrderItem Doer is the HTTP client used to make requests to the
	// update_outbound_order_item endpoint.
	UpdateOutboundOrderItemDoer goahttp.Doer

	// DeleteOutboundOrderItem Doer is the HTTP client used to make requests to the
	// delete_outbound_order_item endpoint.
	DeleteOutboundOrderItemDoer goahttp.Doer

	// BatchQueryOutboundOrder Doer is the HTTP client used to make requests to the
	// batch_query_outbound_order endpoint.
	BatchQueryOutboundOrderDoer goahttp.Doer

	// GetOutboundOrder Doer is the HTTP client used to make requests to the
	// get_outbound_order endpoint.
	GetOutboundOrderDoer goahttp.Doer

	// GetOutboundOrderListFilters Doer is the HTTP client used to make requests to
	// the get_outbound_order_list_filters endpoint.
	GetOutboundOrderListFiltersDoer goahttp.Doer

	// GetOutboundOrderCount Doer is the HTTP client used to make requests to the
	// get_outbound_order_count endpoint.
	GetOutboundOrderCountDoer goahttp.Doer

	// GetOutboundOrderList Doer is the HTTP client used to make requests to the
	// get_outbound_order_list endpoint.
	GetOutboundOrderListDoer goahttp.Doer

	// UploadOutboundOrders Doer is the HTTP client used to make requests to the
	// upload_outbound_orders endpoint.
	UploadOutboundOrdersDoer goahttp.Doer

	// ExportOutboundOrders Doer is the HTTP client used to make requests to the
	// export_outbound_orders endpoint.
	ExportOutboundOrdersDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// OrderUploadOutboundOrdersEncoderFunc is the type to encode multipart request
// for the "order" service "upload_outbound_orders" endpoint.
type OrderUploadOutboundOrdersEncoderFunc func(*multipart.Writer, *order.UploadOrdersPayload) error

// NewClient instantiates HTTP clients for all the order service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateInboundOrderDoer:          doer,
		UpdateInboundOrderDoer:          doer,
		CreatePickupOrderDoer:           doer,
		BatchQueryInboundOrderDoer:      doer,
		GetInboundOrderDoer:             doer,
		CreateOutboundOrderDoer:         doer,
		UpdateOutboundOrderDoer:         doer,
		BatchUpdateOutboundOrderDoer:    doer,
		CreateOutboundOrderItemDoer:     doer,
		UpdateOutboundOrderItemDoer:     doer,
		DeleteOutboundOrderItemDoer:     doer,
		BatchQueryOutboundOrderDoer:     doer,
		GetOutboundOrderDoer:            doer,
		GetOutboundOrderListFiltersDoer: doer,
		GetOutboundOrderCountDoer:       doer,
		GetOutboundOrderListDoer:        doer,
		UploadOutboundOrdersDoer:        doer,
		ExportOutboundOrdersDoer:        doer,
		CORSDoer:                        doer,
		RestoreResponseBody:             restoreBody,
		scheme:                          scheme,
		host:                            host,
		decoder:                         dec,
		encoder:                         enc,
	}
}

// CreateInboundOrder returns an endpoint that makes HTTP requests to the order
// service create_inbound_order server.
func (c *Client) CreateInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateInboundOrderRequest(c.encoder)
		decodeResponse = DecodeCreateInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateInboundOrder returns an endpoint that makes HTTP requests to the order
// service update_inbound_order server.
func (c *Client) UpdateInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateInboundOrderRequest(c.encoder)
		decodeResponse = DecodeUpdateInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "update_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePickupOrder returns an endpoint that makes HTTP requests to the order
// service create_pickup_order server.
func (c *Client) CreatePickupOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePickupOrderRequest(c.encoder)
		decodeResponse = DecodeCreatePickupOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePickupOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePickupOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_pickup_order", err)
		}
		return decodeResponse(resp)
	}
}

// BatchQueryInboundOrder returns an endpoint that makes HTTP requests to the
// order service batch_query_inbound_order server.
func (c *Client) BatchQueryInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeBatchQueryInboundOrderRequest(c.encoder)
		decodeResponse = DecodeBatchQueryInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchQueryInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchQueryInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "batch_query_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// GetInboundOrder returns an endpoint that makes HTTP requests to the order
// service get_inbound_order server.
func (c *Client) GetInboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetInboundOrderRequest(c.encoder)
		decodeResponse = DecodeGetInboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetInboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetInboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_inbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// CreateOutboundOrder returns an endpoint that makes HTTP requests to the
// order service create_outbound_order server.
func (c *Client) CreateOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeCreateOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateOutboundOrder returns an endpoint that makes HTTP requests to the
// order service update_outbound_order server.
func (c *Client) UpdateOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeUpdateOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "update_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// BatchUpdateOutboundOrder returns an endpoint that makes HTTP requests to the
// order service batch_update_outbound_order server.
func (c *Client) BatchUpdateOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeBatchUpdateOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeBatchUpdateOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchUpdateOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchUpdateOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "batch_update_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// CreateOutboundOrderItem returns an endpoint that makes HTTP requests to the
// order service create_outbound_order_item server.
func (c *Client) CreateOutboundOrderItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateOutboundOrderItemRequest(c.encoder)
		decodeResponse = DecodeCreateOutboundOrderItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateOutboundOrderItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateOutboundOrderItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_outbound_order_item", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateOutboundOrderItem returns an endpoint that makes HTTP requests to the
// order service update_outbound_order_item server.
func (c *Client) UpdateOutboundOrderItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateOutboundOrderItemRequest(c.encoder)
		decodeResponse = DecodeUpdateOutboundOrderItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateOutboundOrderItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateOutboundOrderItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "update_outbound_order_item", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteOutboundOrderItem returns an endpoint that makes HTTP requests to the
// order service delete_outbound_order_item server.
func (c *Client) DeleteOutboundOrderItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteOutboundOrderItemRequest(c.encoder)
		decodeResponse = DecodeDeleteOutboundOrderItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteOutboundOrderItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteOutboundOrderItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "delete_outbound_order_item", err)
		}
		return decodeResponse(resp)
	}
}

// BatchQueryOutboundOrder returns an endpoint that makes HTTP requests to the
// order service batch_query_outbound_order server.
func (c *Client) BatchQueryOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeBatchQueryOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeBatchQueryOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchQueryOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchQueryOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "batch_query_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// GetOutboundOrder returns an endpoint that makes HTTP requests to the order
// service get_outbound_order server.
func (c *Client) GetOutboundOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOutboundOrderRequest(c.encoder)
		decodeResponse = DecodeGetOutboundOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOutboundOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOutboundOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_outbound_order", err)
		}
		return decodeResponse(resp)
	}
}

// GetOutboundOrderListFilters returns an endpoint that makes HTTP requests to
// the order service get_outbound_order_list_filters server.
func (c *Client) GetOutboundOrderListFilters() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOutboundOrderListFiltersRequest(c.encoder)
		decodeResponse = DecodeGetOutboundOrderListFiltersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOutboundOrderListFiltersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOutboundOrderListFiltersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_outbound_order_list_filters", err)
		}
		return decodeResponse(resp)
	}
}

// GetOutboundOrderCount returns an endpoint that makes HTTP requests to the
// order service get_outbound_order_count server.
func (c *Client) GetOutboundOrderCount() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOutboundOrderCountRequest(c.encoder)
		decodeResponse = DecodeGetOutboundOrderCountResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOutboundOrderCountRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOutboundOrderCountDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_outbound_order_count", err)
		}
		return decodeResponse(resp)
	}
}

// GetOutboundOrderList returns an endpoint that makes HTTP requests to the
// order service get_outbound_order_list server.
func (c *Client) GetOutboundOrderList() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOutboundOrderListRequest(c.encoder)
		decodeResponse = DecodeGetOutboundOrderListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOutboundOrderListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOutboundOrderListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "get_outbound_order_list", err)
		}
		return decodeResponse(resp)
	}
}

// UploadOutboundOrders returns an endpoint that makes HTTP requests to the
// order service upload_outbound_orders server.
func (c *Client) UploadOutboundOrders(orderUploadOutboundOrdersEncoderFn OrderUploadOutboundOrdersEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeUploadOutboundOrdersRequest(NewOrderUploadOutboundOrdersEncoder(orderUploadOutboundOrdersEncoderFn))
		decodeResponse = DecodeUploadOutboundOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUploadOutboundOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadOutboundOrdersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "upload_outbound_orders", err)
		}
		return decodeResponse(resp)
	}
}

// ExportOutboundOrders returns an endpoint that makes HTTP requests to the
// order service export_outbound_orders server.
func (c *Client) ExportOutboundOrders() goa.Endpoint {
	var (
		encodeRequest  = EncodeExportOutboundOrdersRequest(c.encoder)
		decodeResponse = DecodeExportOutboundOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildExportOutboundOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ExportOutboundOrdersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "export_outbound_orders", err)
		}
		res, err := decodeResponse(resp)
		if err != nil {
			resp.Body.Close()
			return nil, err
		}
		return &order.ExportOutboundOrdersResponseData{Result: res.(*order.ExportOrderResult), Body: resp.Body}, nil
	}
}
