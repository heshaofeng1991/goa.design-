// Code generated by goa v3.6.2, DO NOT EDIT.
//
// channel HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	channel "goa/gen/channel"
	"io"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUpdateChannelCostStatusResponse returns an encoder for responses
// returned by the channel UpdateChannelCostStatus endpoint.
func EncodeUpdateChannelCostStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*channel.UpdateChannelCostStatusRsp)
		enc := encoder(ctx, w)
		body := NewUpdateChannelCostStatusResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateChannelCostStatusRequest returns a decoder for requests sent to
// the channel UpdateChannelCostStatus endpoint.
func DecodeUpdateChannelCostStatusRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateChannelCostStatusRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateChannelCostStatusRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			authorization *string
			token         *string
		)
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewUpdateChannelCostStatusReq(&body, authorization, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateChannelCostStatusError returns an encoder for errors returned by
// the UpdateChannelCostStatus channel endpoint.
func EncodeUpdateChannelCostStatusError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateChannelCostStatusUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalChannelUpdateCustomerConfigDataToUpdateCustomerConfigDataResponseBody
// builds a value of type *UpdateCustomerConfigDataResponseBody from a value of
// type *channel.UpdateCustomerConfigData.
func marshalChannelUpdateCustomerConfigDataToUpdateCustomerConfigDataResponseBody(v *channel.UpdateCustomerConfigData) *UpdateCustomerConfigDataResponseBody {
	if v == nil {
		return nil
	}
	res := &UpdateCustomerConfigDataResponseBody{
		Status: v.Status,
	}

	return res
}
