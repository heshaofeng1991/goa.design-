// Code generated by goa v3.6.2, DO NOT EDIT.
//
// channel HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	channel "goa/gen/channel"

	goa "goa.design/goa/v3/pkg"
)

// UpdateChannelCostStatusRequestBody is the type of the "channel" service
// "UpdateChannelCostStatus" endpoint HTTP request body.
type UpdateChannelCostStatusRequestBody struct {
	// 渠道ID
	Ids []int64 `form:"ids,omitempty" json:"ids,omitempty" xml:"ids,omitempty"`
	// 排除国际二字码
	CountryCodes []string `form:"country_codes,omitempty" json:"country_codes,omitempty" xml:"country_codes,omitempty"`
	// 状态（0 不启用 1 启用）
	Status *bool `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// UpdateChannelCostStatusResponseBody is the type of the "channel" service
// "UpdateChannelCostStatus" endpoint HTTP response body.
type UpdateChannelCostStatusResponseBody struct {
	// data
	Data *UpdateCustomerConfigDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateChannelCostStatusUnauthorizedResponseBody is the type of the "channel"
// service "UpdateChannelCostStatus" endpoint HTTP response body for the
// "Unauthorized" error.
type UpdateChannelCostStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCustomerConfigDataResponseBody is used to define fields on response
// body types.
type UpdateCustomerConfigDataResponseBody struct {
	// 状态（0 更新成功 1 更新失败）
	Status int32 `form:"status" json:"status" xml:"status"`
}

// NewUpdateChannelCostStatusResponseBody builds the HTTP response body from
// the result of the "UpdateChannelCostStatus" endpoint of the "channel"
// service.
func NewUpdateChannelCostStatusResponseBody(res *channel.UpdateChannelCostStatusRsp) *UpdateChannelCostStatusResponseBody {
	body := &UpdateChannelCostStatusResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalChannelUpdateCustomerConfigDataToUpdateCustomerConfigDataResponseBody(res.Data)
	}
	return body
}

// NewUpdateChannelCostStatusUnauthorizedResponseBody builds the HTTP response
// body from the result of the "UpdateChannelCostStatus" endpoint of the
// "channel" service.
func NewUpdateChannelCostStatusUnauthorizedResponseBody(res *goa.ServiceError) *UpdateChannelCostStatusUnauthorizedResponseBody {
	body := &UpdateChannelCostStatusUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChannelCostStatusReq builds a channel service
// UpdateChannelCostStatus endpoint payload.
func NewUpdateChannelCostStatusReq(body *UpdateChannelCostStatusRequestBody, authorization *string, token *string) *channel.UpdateChannelCostStatusReq {
	v := &channel.UpdateChannelCostStatusReq{
		Status: *body.Status,
	}
	v.Ids = make([]int64, len(body.Ids))
	for i, val := range body.Ids {
		v.Ids[i] = val
	}
	v.CountryCodes = make([]string, len(body.CountryCodes))
	for i, val := range body.CountryCodes {
		v.CountryCodes[i] = val
	}
	v.Authorization = authorization
	v.Token = token

	return v
}

// ValidateUpdateChannelCostStatusRequestBody runs the validations defined on
// UpdateChannelCostStatusRequestBody
func ValidateUpdateChannelCostStatusRequestBody(body *UpdateChannelCostStatusRequestBody) (err error) {
	if body.Ids == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
	}
	if body.CountryCodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_codes", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == false || *body.Status == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{false, true}))
		}
	}
	return
}
