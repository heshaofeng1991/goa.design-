// Code generated by goa v3.6.2, DO NOT EDIT.
//
// channel HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	channel "goa/gen/channel"

	goa "goa.design/goa/v3/pkg"
)

// BuildUpdateChannelCostStatusPayload builds the payload for the channel
// UpdateChannelCostStatus endpoint from CLI flags.
func BuildUpdateChannelCostStatusPayload(channelUpdateChannelCostStatusBody string, channelUpdateChannelCostStatusAuthorization string, channelUpdateChannelCostStatusToken string) (*channel.UpdateChannelCostStatusReq, error) {
	var err error
	var body UpdateChannelCostStatusRequestBody
	{
		err = json.Unmarshal([]byte(channelUpdateChannelCostStatusBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"country_codes\": [\n         \"US\",\n         \"UK\"\n      ],\n      \"ids\": [\n         1,\n         2\n      ],\n      \"status\": true\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if body.CountryCodes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("country_codes", "body"))
		}
		if !(body.Status == false || body.Status == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []interface{}{false, true}))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if channelUpdateChannelCostStatusAuthorization != "" {
			authorization = &channelUpdateChannelCostStatusAuthorization
		}
	}
	var token *string
	{
		if channelUpdateChannelCostStatusToken != "" {
			token = &channelUpdateChannelCostStatusToken
		}
	}
	v := &channel.UpdateChannelCostStatusReq{
		Status: body.Status,
	}
	if body.Ids != nil {
		v.Ids = make([]int64, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	if body.CountryCodes != nil {
		v.CountryCodes = make([]string, len(body.CountryCodes))
		for i, val := range body.CountryCodes {
			v.CountryCodes[i] = val
		}
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}
