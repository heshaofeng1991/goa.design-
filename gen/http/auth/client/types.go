// Code generated by goa v3.6.2, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	auth "goa/gen/auth"

	goa "goa.design/goa/v3/pkg"
)

// GenerateTokenRequestBody is the type of the "auth" service "generate_token"
// endpoint HTTP request body.
type GenerateTokenRequestBody struct {
	// user_id
	ID int64 `form:"id" json:"id" xml:"id"`
	// tenantID
	TenantID int64 `form:"tenant_id" json:"tenant_id" xml:"tenant_id"`
}

// GenerateTokenResponseBody is the type of the "auth" service "generate_token"
// endpoint HTTP response body.
type GenerateTokenResponseBody struct {
	// data
	Data *GenerateTokenDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GenerateTokenUnauthorizedResponseBody is the type of the "auth" service
// "generate_token" endpoint HTTP response body for the "Unauthorized" error.
type GenerateTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenerateTokenDataResponseBody is used to define fields on response body
// types.
type GenerateTokenDataResponseBody struct {
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// NewGenerateTokenRequestBody builds the HTTP request body from the payload of
// the "generate_token" endpoint of the "auth" service.
func NewGenerateTokenRequestBody(p *auth.GenerateTokenReq) *GenerateTokenRequestBody {
	body := &GenerateTokenRequestBody{
		ID:       p.ID,
		TenantID: p.TenantID,
	}
	return body
}

// NewGenerateTokenRspOK builds a "auth" service "generate_token" endpoint
// result from a HTTP "OK" response.
func NewGenerateTokenRspOK(body *GenerateTokenResponseBody) *auth.GenerateTokenRsp {
	v := &auth.GenerateTokenRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalGenerateTokenDataResponseBodyToAuthGenerateTokenData(body.Data)
	}

	return v
}

// NewGenerateTokenUnauthorized builds a auth service generate_token endpoint
// Unauthorized error.
func NewGenerateTokenUnauthorized(body *GenerateTokenUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGenerateTokenResponseBody runs the validations defined on
// generate_token_response_body
func ValidateGenerateTokenResponseBody(body *GenerateTokenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateGenerateTokenDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGenerateTokenUnauthorizedResponseBody runs the validations defined
// on generate_token_Unauthorized_response_body
func ValidateGenerateTokenUnauthorizedResponseBody(body *GenerateTokenUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenerateTokenDataResponseBody runs the validations defined on
// GenerateTokenDataResponseBody
func ValidateGenerateTokenDataResponseBody(body *GenerateTokenDataResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}
