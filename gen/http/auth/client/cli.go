// Code generated by goa v3.6.2, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	auth "goa/gen/auth"

	goa "goa.design/goa/v3/pkg"
)

// BuildGenerateTokenPayload builds the payload for the auth generate_token
// endpoint from CLI flags.
func BuildGenerateTokenPayload(authGenerateTokenBody string) (*auth.GenerateTokenReq, error) {
	var err error
	var body GenerateTokenRequestBody
	{
		err = json.Unmarshal([]byte(authGenerateTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 1,\n      \"tenant_id\": 1\n   }'")
		}
		if body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", body.ID, 1, true))
		}
		if body.TenantID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.tenant_id", body.TenantID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &auth.GenerateTokenReq{
		ID:       body.ID,
		TenantID: body.TenantID,
	}

	return v, nil
}
