// Code generated by goa v3.6.2, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	auth "goa/gen/auth"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGenerateTokenRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "generate_token" endpoint
func (c *Client) BuildGenerateTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenerateTokenAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "generate_token", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGenerateTokenRequest returns an encoder for requests sent to the auth
// generate_token server.
func EncodeGenerateTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.GenerateTokenReq)
		if !ok {
			return goahttp.ErrInvalidType("auth", "generate_token", "*auth.GenerateTokenReq", v)
		}
		body := NewGenerateTokenRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "generate_token", err)
		}
		return nil
	}
}

// DecodeGenerateTokenResponse returns a decoder for responses returned by the
// auth generate_token endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGenerateTokenResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGenerateTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GenerateTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "generate_token", err)
			}
			err = ValidateGenerateTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "generate_token", err)
			}
			res := NewGenerateTokenRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GenerateTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "generate_token", err)
			}
			err = ValidateGenerateTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "generate_token", err)
			}
			return nil, NewGenerateTokenUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "generate_token", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGenerateTokenDataResponseBodyToAuthGenerateTokenData builds a value
// of type *auth.GenerateTokenData from a value of type
// *GenerateTokenDataResponseBody.
func unmarshalGenerateTokenDataResponseBodyToAuthGenerateTokenData(v *GenerateTokenDataResponseBody) *auth.GenerateTokenData {
	if v == nil {
		return nil
	}
	res := &auth.GenerateTokenData{
		Token: *v.Token,
	}

	return res
}
