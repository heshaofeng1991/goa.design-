// Code generated by goa v3.6.2, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	auth "goa/gen/auth"

	goa "goa.design/goa/v3/pkg"
)

// GenerateTokenRequestBody is the type of the "auth" service "generate_token"
// endpoint HTTP request body.
type GenerateTokenRequestBody struct {
	// user_id
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// tenantID
	TenantID *int64 `form:"tenant_id,omitempty" json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

// GenerateTokenResponseBody is the type of the "auth" service "generate_token"
// endpoint HTTP response body.
type GenerateTokenResponseBody struct {
	// data
	Data *GenerateTokenDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// GenerateTokenUnauthorizedResponseBody is the type of the "auth" service
// "generate_token" endpoint HTTP response body for the "Unauthorized" error.
type GenerateTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GenerateTokenDataResponseBody is used to define fields on response body
// types.
type GenerateTokenDataResponseBody struct {
	// token
	Token string `form:"token" json:"token" xml:"token"`
}

// NewGenerateTokenResponseBody builds the HTTP response body from the result
// of the "generate_token" endpoint of the "auth" service.
func NewGenerateTokenResponseBody(res *auth.GenerateTokenRsp) *GenerateTokenResponseBody {
	body := &GenerateTokenResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalAuthGenerateTokenDataToGenerateTokenDataResponseBody(res.Data)
	}
	return body
}

// NewGenerateTokenUnauthorizedResponseBody builds the HTTP response body from
// the result of the "generate_token" endpoint of the "auth" service.
func NewGenerateTokenUnauthorizedResponseBody(res *goa.ServiceError) *GenerateTokenUnauthorizedResponseBody {
	body := &GenerateTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGenerateTokenReq builds a auth service generate_token endpoint payload.
func NewGenerateTokenReq(body *GenerateTokenRequestBody) *auth.GenerateTokenReq {
	v := &auth.GenerateTokenReq{
		ID:       *body.ID,
		TenantID: *body.TenantID,
	}

	return v
}

// ValidateGenerateTokenRequestBody runs the validations defined on
// generate_token_request_body
func ValidateGenerateTokenRequestBody(body *GenerateTokenRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TenantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tenant_id", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.TenantID != nil {
		if *body.TenantID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.tenant_id", *body.TenantID, 1, true))
		}
	}
	return
}
