// Code generated by goa v3.6.2, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	auth "goa/gen/auth"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGenerateTokenResponse returns an encoder for responses returned by the
// auth generate_token endpoint.
func EncodeGenerateTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*auth.GenerateTokenRsp)
		enc := encoder(ctx, w)
		body := NewGenerateTokenResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGenerateTokenRequest returns a decoder for requests sent to the auth
// generate_token endpoint.
func DecodeGenerateTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GenerateTokenRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGenerateTokenRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGenerateTokenReq(&body)

		return payload, nil
	}
}

// EncodeGenerateTokenError returns an encoder for errors returned by the
// generate_token auth endpoint.
func EncodeGenerateTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGenerateTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalAuthGenerateTokenDataToGenerateTokenDataResponseBody builds a value
// of type *GenerateTokenDataResponseBody from a value of type
// *auth.GenerateTokenData.
func marshalAuthGenerateTokenDataToGenerateTokenDataResponseBody(v *auth.GenerateTokenData) *GenerateTokenDataResponseBody {
	if v == nil {
		return nil
	}
	res := &GenerateTokenDataResponseBody{
		Token: v.Token,
	}

	return res
}
