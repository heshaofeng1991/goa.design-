// Code generated by goa v3.6.2, DO NOT EDIT.
//
// integrations HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	integrations "goa/gen/integrations"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the integrations list endpoint from
// CLI flags.
func BuildListPayload(integrationsListAuthorization string, integrationsListToken string) (*integrations.AuthToken, error) {
	var authorization *string
	{
		if integrationsListAuthorization != "" {
			authorization = &integrationsListAuthorization
		}
	}
	var token *string
	{
		if integrationsListToken != "" {
			token = &integrationsListToken
		}
	}
	v := &integrations.AuthToken{}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}

// BuildAuthorizePayload builds the payload for the integrations authorize
// endpoint from CLI flags.
func BuildAuthorizePayload(integrationsAuthorizeBody string, integrationsAuthorizeAuthorization string, integrationsAuthorizeToken string) (*integrations.Authorize2, error) {
	var err error
	var body AuthorizeRequestBody
	{
		err = json.Unmarshal([]byte(integrationsAuthorizeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"host\": \"127.0.0.1\",\n      \"platform\": \"woocommerce\"\n   }'")
		}
		if utf8.RuneCountInString(body.Platform) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.platform", body.Platform, utf8.RuneCountInString(body.Platform), 50, false))
		}
		if utf8.RuneCountInString(body.Host) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.host", body.Host, utf8.RuneCountInString(body.Host), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var authorization *string
	{
		if integrationsAuthorizeAuthorization != "" {
			authorization = &integrationsAuthorizeAuthorization
		}
	}
	var token *string
	{
		if integrationsAuthorizeToken != "" {
			token = &integrationsAuthorizeToken
		}
	}
	v := &integrations.Authorize2{
		Platform: body.Platform,
		Host:     body.Host,
	}
	v.Authorization = authorization
	v.Token = token

	return v, nil
}
