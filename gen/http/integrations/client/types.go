// Code generated by goa v3.6.2, DO NOT EDIT.
//
// integrations HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	integrations "goa/gen/integrations"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AuthorizeRequestBody is the type of the "integrations" service "authorize"
// endpoint HTTP request body.
type AuthorizeRequestBody struct {
	// platform
	Platform string `form:"platform" json:"platform" xml:"platform"`
	// host
	Host string `form:"host" json:"host" xml:"host"`
}

// ListResponseBody is the type of the "integrations" service "list" endpoint
// HTTP response body.
type ListResponseBody struct {
	// data
	Data []*IntegrationResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AuthorizeResponseBody is the type of the "integrations" service "authorize"
// endpoint HTTP response body.
type AuthorizeResponseBody struct {
	// data
	Data *AuthorizePlatformRspDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "integrations" service
// "list" endpoint HTTP response body for the "Unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AuthorizeUnauthorizedResponseBody is the type of the "integrations" service
// "authorize" endpoint HTTP response body for the "Unauthorized" error.
type AuthorizeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IntegrationResponseBody is used to define fields on response body types.
type IntegrationResponseBody struct {
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// AuthorizePlatformRspDataResponseBody is used to define fields on response
// body types.
type AuthorizePlatformRspDataResponseBody struct {
	// redirect_url
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// NewAuthorizeRequestBody builds the HTTP request body from the payload of the
// "authorize" endpoint of the "integrations" service.
func NewAuthorizeRequestBody(p *integrations.Authorize2) *AuthorizeRequestBody {
	body := &AuthorizeRequestBody{
		Platform: p.Platform,
		Host:     p.Host,
	}
	return body
}

// NewListIntegrationListResultOK builds a "integrations" service "list"
// endpoint result from a HTTP "OK" response.
func NewListIntegrationListResultOK(body *ListResponseBody) *integrations.IntegrationListResult {
	v := &integrations.IntegrationListResult{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = make([]*integrations.Integration, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalIntegrationResponseBodyToIntegrationsIntegration(val)
		}
	}

	return v
}

// NewListUnauthorized builds a integrations service list endpoint Unauthorized
// error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAuthorizePlatformRspOK builds a "integrations" service "authorize"
// endpoint result from a HTTP "OK" response.
func NewAuthorizePlatformRspOK(body *AuthorizeResponseBody) *integrations.AuthorizePlatformRsp {
	v := &integrations.AuthorizePlatformRsp{
		Code:    *body.Code,
		Message: *body.Message,
	}
	if body.Data != nil {
		v.Data = unmarshalAuthorizePlatformRspDataResponseBodyToIntegrationsAuthorizePlatformRspData(body.Data)
	}

	return v
}

// NewAuthorizeUnauthorized builds a integrations service authorize endpoint
// Unauthorized error.
func NewAuthorizeUnauthorized(body *AuthorizeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateIntegrationResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAuthorizeResponseBody runs the validations defined on
// AuthorizeResponseBody
func ValidateAuthorizeResponseBody(body *AuthorizeResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateAuthorizePlatformRspDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_Unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAuthorizeUnauthorizedResponseBody runs the validations defined on
// authorize_Unauthorized_response_body
func ValidateAuthorizeUnauthorizedResponseBody(body *AuthorizeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateIntegrationResponseBody runs the validations defined on
// IntegrationResponseBody
func ValidateIntegrationResponseBody(body *IntegrationResponseBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	if body.Status != nil {
		if !(*body.Status == 0 || *body.Status == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateAuthorizePlatformRspDataResponseBody runs the validations defined on
// AuthorizePlatformRspDataResponseBody
func ValidateAuthorizePlatformRspDataResponseBody(body *AuthorizePlatformRspDataResponseBody) (err error) {
	if body.RedirectURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_url", "body"))
	}
	return
}
