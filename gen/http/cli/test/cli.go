// Code generated by goa v3.6.2, DO NOT EDIT.
//
// test HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package cli

import (
	"flag"
	"fmt"
	quotec "goa/gen/http/quote/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `quote update-channel-cost-status
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` quote update-channel-cost-status --body '{
      "country_codes": [
         "US",
         "UK"
      ],
      "ids": [
         1,
         2
      ],
      "status": true
   }' --authorization "Aut sed ducimus repudiandae sit explicabo asperiores." --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		quoteFlags = flag.NewFlagSet("quote", flag.ContinueOnError)

		quoteUpdateChannelCostStatusFlags             = flag.NewFlagSet("update-channel-cost-status", flag.ExitOnError)
		quoteUpdateChannelCostStatusBodyFlag          = quoteUpdateChannelCostStatusFlags.String("body", "REQUIRED", "")
		quoteUpdateChannelCostStatusAuthorizationFlag = quoteUpdateChannelCostStatusFlags.String("authorization", "", "")
		quoteUpdateChannelCostStatusTokenFlag         = quoteUpdateChannelCostStatusFlags.String("token", "", "")
	)
	quoteFlags.Usage = quoteUsage
	quoteUpdateChannelCostStatusFlags.Usage = quoteUpdateChannelCostStatusUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "quote":
			svcf = quoteFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "quote":
			switch epn {
			case "update-channel-cost-status":
				epf = quoteUpdateChannelCostStatusFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "quote":
			c := quotec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update-channel-cost-status":
				endpoint = c.UpdateChannelCostStatus()
				data, err = quotec.BuildUpdateChannelCostStatusPayload(*quoteUpdateChannelCostStatusBodyFlag, *quoteUpdateChannelCostStatusAuthorizationFlag, *quoteUpdateChannelCostStatusTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// quoteUsage displays the usage of the quote command and its subcommands.
func quoteUsage() {
	fmt.Fprintf(os.Stderr, `The quote service performs operations on quotation
Usage:
    %[1]s [globalflags] quote COMMAND [flags]

COMMAND:
    update-channel-cost-status: UpdateChannelCostStatus implements UpdateChannelCostStatus.

Additional help:
    %[1]s quote COMMAND --help
`, os.Args[0])
}
func quoteUpdateChannelCostStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] quote update-channel-cost-status -body JSON -authorization STRING -token STRING

UpdateChannelCostStatus implements UpdateChannelCostStatus.
    -body JSON: 
    -authorization STRING: 
    -token STRING: 

Example:
    %[1]s quote update-channel-cost-status --body '{
      "country_codes": [
         "US",
         "UK"
      ],
      "ids": [
         1,
         2
      ],
      "status": true
   }' --authorization "Aut sed ducimus repudiandae sit explicabo asperiores." --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}
