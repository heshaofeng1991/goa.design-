// Code generated by goa v3.6.2, DO NOT EDIT.
//
// oms HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package cli

import (
	"flag"
	"fmt"
	filec "goa/gen/http/file/client"
	healthyc "goa/gen/http/healthy/client"
	orderc "goa/gen/http/order/client"
	productc "goa/gen/http/product/client"
	quotec "goa/gen/http/quote/client"
	trackc "goa/gen/http/track/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `healthy get
quote get
track get
order (create-inbound-order|update-inbound-order|create-outbound-order|update-outbound-order|create-pickup-order|get-inbound-order|get-outbound-order)
product (batches-create-product|update-product|generate-barcode|generate-token)
file upload-image
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` healthy get` + "\n" +
		os.Args[0] + ` quote get --origin-country "CN" --dest-country "US" --dest-state "NY" --dest-zip-code "10016" --weight 3000 --length 100 --width 200 --height 300 --product-attributes '[
      "battery",
      "cosmetic",
      "liquid",
      "magnetic"
   ]' --factory "xxx" --date "2022-02-14"` + "\n" +
		os.Args[0] + ` track get --tracking-number "Nesciunt architecto quam." --type 1` + "\n" +
		os.Args[0] + ` order create-inbound-order --body '{
      "address": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "customer_code": "1013",
      "customer_order_id": "xxx1234",
      "description": "description",
      "estimated_arrival_at": "2021-01-12 09:34:09",
      "id": 1,
      "is_pickup": true,
      "items": [
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         }
      ],
      "requested_pickup_at": "2021-01-12 09:34:09",
      "tracking_number": "YT000001",
      "type": 1,
      "warehouse_id": 1
   }'` + "\n" +
		os.Args[0] + ` product batches-create-product --body '{
      "products": [
         {
            "barcode_service": false,
            "customer_code": "xxx",
            "declared_cn_name": "xxx",
            "declared_en_name": "xxx",
            "declared_value_in_eur": 50,
            "declared_value_in_usd": 50,
            "enabled_nss_barcode": false,
            "hs_code": "xxx",
            "id": 1,
            "product_attributes": [
               "liquid",
               "battery",
               "cosmetic",
               "magnetic"
            ],
            "product_barcode": "xxx",
            "product_height": 2,
            "product_image": [
               "url"
            ],
            "product_length": 1,
            "product_name": "xxx",
            "product_sku": "xxx",
            "product_weight": 10,
            "product_width": 1,
            "qty": 1
         }
      ]
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	fileUploadImageEncoderFn filec.FileUploadImageEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		healthyFlags = flag.NewFlagSet("healthy", flag.ContinueOnError)

		healthyGetFlags = flag.NewFlagSet("get", flag.ExitOnError)

		quoteFlags = flag.NewFlagSet("quote", flag.ContinueOnError)

		quoteGetFlags                 = flag.NewFlagSet("get", flag.ExitOnError)
		quoteGetOriginCountryFlag     = quoteGetFlags.String("origin-country", "REQUIRED", "")
		quoteGetDestCountryFlag       = quoteGetFlags.String("dest-country", "REQUIRED", "")
		quoteGetDestStateFlag         = quoteGetFlags.String("dest-state", "REQUIRED", "")
		quoteGetDestZipCodeFlag       = quoteGetFlags.String("dest-zip-code", "REQUIRED", "")
		quoteGetWeightFlag            = quoteGetFlags.String("weight", "REQUIRED", "")
		quoteGetLengthFlag            = quoteGetFlags.String("length", "REQUIRED", "")
		quoteGetWidthFlag             = quoteGetFlags.String("width", "REQUIRED", "")
		quoteGetHeightFlag            = quoteGetFlags.String("height", "REQUIRED", "")
		quoteGetProductAttributesFlag = quoteGetFlags.String("product-attributes", "REQUIRED", "")
		quoteGetFactoryFlag           = quoteGetFlags.String("factory", "", "")
		quoteGetDateFlag              = quoteGetFlags.String("date", "", "")

		trackFlags = flag.NewFlagSet("track", flag.ContinueOnError)

		trackGetFlags              = flag.NewFlagSet("get", flag.ExitOnError)
		trackGetTrackingNumberFlag = trackGetFlags.String("tracking-number", "REQUIRED", "")
		trackGetTypeFlag           = trackGetFlags.String("type", "REQUIRED", "")

		orderFlags = flag.NewFlagSet("order", flag.ContinueOnError)

		orderCreateInboundOrderFlags    = flag.NewFlagSet("create-inbound-order", flag.ExitOnError)
		orderCreateInboundOrderBodyFlag = orderCreateInboundOrderFlags.String("body", "REQUIRED", "")

		orderUpdateInboundOrderFlags    = flag.NewFlagSet("update-inbound-order", flag.ExitOnError)
		orderUpdateInboundOrderBodyFlag = orderUpdateInboundOrderFlags.String("body", "REQUIRED", "")

		orderCreateOutboundOrderFlags    = flag.NewFlagSet("create-outbound-order", flag.ExitOnError)
		orderCreateOutboundOrderBodyFlag = orderCreateOutboundOrderFlags.String("body", "REQUIRED", "")

		orderUpdateOutboundOrderFlags    = flag.NewFlagSet("update-outbound-order", flag.ExitOnError)
		orderUpdateOutboundOrderBodyFlag = orderUpdateOutboundOrderFlags.String("body", "REQUIRED", "")

		orderCreatePickupOrderFlags    = flag.NewFlagSet("create-pickup-order", flag.ExitOnError)
		orderCreatePickupOrderBodyFlag = orderCreatePickupOrderFlags.String("body", "REQUIRED", "")

		orderGetInboundOrderFlags             = flag.NewFlagSet("get-inbound-order", flag.ExitOnError)
		orderGetInboundOrderClientOrderIDFlag = orderGetInboundOrderFlags.String("client-order-id", "REQUIRED", "")

		orderGetOutboundOrderFlags             = flag.NewFlagSet("get-outbound-order", flag.ExitOnError)
		orderGetOutboundOrderClientOrderIDFlag = orderGetOutboundOrderFlags.String("client-order-id", "REQUIRED", "")

		productFlags = flag.NewFlagSet("product", flag.ContinueOnError)

		productBatchesCreateProductFlags    = flag.NewFlagSet("batches-create-product", flag.ExitOnError)
		productBatchesCreateProductBodyFlag = productBatchesCreateProductFlags.String("body", "REQUIRED", "")

		productUpdateProductFlags    = flag.NewFlagSet("update-product", flag.ExitOnError)
		productUpdateProductBodyFlag = productUpdateProductFlags.String("body", "REQUIRED", "")

		productGenerateBarcodeFlags = flag.NewFlagSet("generate-barcode", flag.ExitOnError)

		productGenerateTokenFlags    = flag.NewFlagSet("generate-token", flag.ExitOnError)
		productGenerateTokenBodyFlag = productGenerateTokenFlags.String("body", "REQUIRED", "")

		fileFlags = flag.NewFlagSet("file", flag.ContinueOnError)

		fileUploadImageFlags    = flag.NewFlagSet("upload-image", flag.ExitOnError)
		fileUploadImageBodyFlag = fileUploadImageFlags.String("body", "REQUIRED", "")
	)
	healthyFlags.Usage = healthyUsage
	healthyGetFlags.Usage = healthyGetUsage

	quoteFlags.Usage = quoteUsage
	quoteGetFlags.Usage = quoteGetUsage

	trackFlags.Usage = trackUsage
	trackGetFlags.Usage = trackGetUsage

	orderFlags.Usage = orderUsage
	orderCreateInboundOrderFlags.Usage = orderCreateInboundOrderUsage
	orderUpdateInboundOrderFlags.Usage = orderUpdateInboundOrderUsage
	orderCreateOutboundOrderFlags.Usage = orderCreateOutboundOrderUsage
	orderUpdateOutboundOrderFlags.Usage = orderUpdateOutboundOrderUsage
	orderCreatePickupOrderFlags.Usage = orderCreatePickupOrderUsage
	orderGetInboundOrderFlags.Usage = orderGetInboundOrderUsage
	orderGetOutboundOrderFlags.Usage = orderGetOutboundOrderUsage

	productFlags.Usage = productUsage
	productBatchesCreateProductFlags.Usage = productBatchesCreateProductUsage
	productUpdateProductFlags.Usage = productUpdateProductUsage
	productGenerateBarcodeFlags.Usage = productGenerateBarcodeUsage
	productGenerateTokenFlags.Usage = productGenerateTokenUsage

	fileFlags.Usage = fileUsage
	fileUploadImageFlags.Usage = fileUploadImageUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "healthy":
			svcf = healthyFlags
		case "quote":
			svcf = quoteFlags
		case "track":
			svcf = trackFlags
		case "order":
			svcf = orderFlags
		case "product":
			svcf = productFlags
		case "file":
			svcf = fileFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "healthy":
			switch epn {
			case "get":
				epf = healthyGetFlags

			}

		case "quote":
			switch epn {
			case "get":
				epf = quoteGetFlags

			}

		case "track":
			switch epn {
			case "get":
				epf = trackGetFlags

			}

		case "order":
			switch epn {
			case "create-inbound-order":
				epf = orderCreateInboundOrderFlags

			case "update-inbound-order":
				epf = orderUpdateInboundOrderFlags

			case "create-outbound-order":
				epf = orderCreateOutboundOrderFlags

			case "update-outbound-order":
				epf = orderUpdateOutboundOrderFlags

			case "create-pickup-order":
				epf = orderCreatePickupOrderFlags

			case "get-inbound-order":
				epf = orderGetInboundOrderFlags

			case "get-outbound-order":
				epf = orderGetOutboundOrderFlags

			}

		case "product":
			switch epn {
			case "batches-create-product":
				epf = productBatchesCreateProductFlags

			case "update-product":
				epf = productUpdateProductFlags

			case "generate-barcode":
				epf = productGenerateBarcodeFlags

			case "generate-token":
				epf = productGenerateTokenFlags

			}

		case "file":
			switch epn {
			case "upload-image":
				epf = fileUploadImageFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "healthy":
			c := healthyc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data = nil
			}
		case "quote":
			c := quotec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = quotec.BuildGetPayload(*quoteGetOriginCountryFlag, *quoteGetDestCountryFlag, *quoteGetDestStateFlag, *quoteGetDestZipCodeFlag, *quoteGetWeightFlag, *quoteGetLengthFlag, *quoteGetWidthFlag, *quoteGetHeightFlag, *quoteGetProductAttributesFlag, *quoteGetFactoryFlag, *quoteGetDateFlag)
			}
		case "track":
			c := trackc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = trackc.BuildGetPayload(*trackGetTrackingNumberFlag, *trackGetTypeFlag)
			}
		case "order":
			c := orderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-inbound-order":
				endpoint = c.CreateInboundOrder()
				data, err = orderc.BuildCreateInboundOrderPayload(*orderCreateInboundOrderBodyFlag)
			case "update-inbound-order":
				endpoint = c.UpdateInboundOrder()
				data, err = orderc.BuildUpdateInboundOrderPayload(*orderUpdateInboundOrderBodyFlag)
			case "create-outbound-order":
				endpoint = c.CreateOutboundOrder()
				data, err = orderc.BuildCreateOutboundOrderPayload(*orderCreateOutboundOrderBodyFlag)
			case "update-outbound-order":
				endpoint = c.UpdateOutboundOrder()
				data, err = orderc.BuildUpdateOutboundOrderPayload(*orderUpdateOutboundOrderBodyFlag)
			case "create-pickup-order":
				endpoint = c.CreatePickupOrder()
				data, err = orderc.BuildCreatePickupOrderPayload(*orderCreatePickupOrderBodyFlag)
			case "get-inbound-order":
				endpoint = c.GetInboundOrder()
				data, err = orderc.BuildGetInboundOrderPayload(*orderGetInboundOrderClientOrderIDFlag)
			case "get-outbound-order":
				endpoint = c.GetOutboundOrder()
				data, err = orderc.BuildGetOutboundOrderPayload(*orderGetOutboundOrderClientOrderIDFlag)
			}
		case "product":
			c := productc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "batches-create-product":
				endpoint = c.BatchesCreateProduct()
				data, err = productc.BuildBatchesCreateProductPayload(*productBatchesCreateProductBodyFlag)
			case "update-product":
				endpoint = c.UpdateProduct()
				data, err = productc.BuildUpdateProductPayload(*productUpdateProductBodyFlag)
			case "generate-barcode":
				endpoint = c.GenerateBarcode()
				data, err = productc.BuildGenerateBarcodePayload()
			case "generate-token":
				endpoint = c.GenerateToken()
				data, err = productc.BuildGenerateTokenPayload(*productGenerateTokenBodyFlag)
			}
		case "file":
			c := filec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload-image":
				endpoint = c.UploadImage(fileUploadImageEncoderFn)
				data, err = filec.BuildUploadImagePayload(*fileUploadImageBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthyUsage displays the usage of the healthy command and its subcommands.
func healthyUsage() {
	fmt.Fprintf(os.Stderr, `The healthy check service
Usage:
    %[1]s [globalflags] healthy COMMAND [flags]

COMMAND:
    get: Get implements get.

Additional help:
    %[1]s healthy COMMAND --help
`, os.Args[0])
}
func healthyGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] healthy get

Get implements get.

Example:
    %[1]s healthy get
`, os.Args[0])
}

// quoteUsage displays the usage of the quote command and its subcommands.
func quoteUsage() {
	fmt.Fprintf(os.Stderr, `The quote service performs operations on quotation
Usage:
    %[1]s [globalflags] quote COMMAND [flags]

COMMAND:
    get: Get implements get.

Additional help:
    %[1]s quote COMMAND --help
`, os.Args[0])
}
func quoteGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] quote get -origin-country STRING -dest-country STRING -dest-state STRING -dest-zip-code STRING -weight INT -length INT -width INT -height INT -product-attributes JSON -factory STRING -date STRING

Get implements get.
    -origin-country STRING: 
    -dest-country STRING: 
    -dest-state STRING: 
    -dest-zip-code STRING: 
    -weight INT: 
    -length INT: 
    -width INT: 
    -height INT: 
    -product-attributes JSON: 
    -factory STRING: 
    -date STRING: 

Example:
    %[1]s quote get --origin-country "CN" --dest-country "US" --dest-state "NY" --dest-zip-code "10016" --weight 3000 --length 100 --width 200 --height 300 --product-attributes '[
      "battery",
      "cosmetic",
      "liquid",
      "magnetic"
   ]' --factory "xxx" --date "2022-02-14"
`, os.Args[0])
}

// trackUsage displays the usage of the track command and its subcommands.
func trackUsage() {
	fmt.Fprintf(os.Stderr, `The track service performs operations on track order status
Usage:
    %[1]s [globalflags] track COMMAND [flags]

COMMAND:
    get: Get implements get.

Additional help:
    %[1]s track COMMAND --help
`, os.Args[0])
}
func trackGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] track get -tracking-number STRING -type INT

Get implements get.
    -tracking-number STRING: 
    -type INT: 

Example:
    %[1]s track get --tracking-number "Nesciunt architecto quam." --type 1
`, os.Args[0])
}

// orderUsage displays the usage of the order command and its subcommands.
func orderUsage() {
	fmt.Fprintf(os.Stderr, `The order service performs operations on order
Usage:
    %[1]s [globalflags] order COMMAND [flags]

COMMAND:
    create-inbound-order: CreateInboundOrder implements create_inbound_order.
    update-inbound-order: UpdateInboundOrder implements update_inbound_order.
    create-outbound-order: CreateOutboundOrder implements create_outbound_order.
    update-outbound-order: UpdateOutboundOrder implements update_outbound_order.
    create-pickup-order: CreatePickupOrder implements create_pickup_order.
    get-inbound-order: GetInboundOrder implements get_inbound_order.
    get-outbound-order: GetOutboundOrder implements get_outbound_order.

Additional help:
    %[1]s order COMMAND --help
`, os.Args[0])
}
func orderCreateInboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order create-inbound-order -body JSON

CreateInboundOrder implements create_inbound_order.
    -body JSON: 

Example:
    %[1]s order create-inbound-order --body '{
      "address": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "customer_code": "1013",
      "customer_order_id": "xxx1234",
      "description": "description",
      "estimated_arrival_at": "2021-01-12 09:34:09",
      "id": 1,
      "is_pickup": true,
      "items": [
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         }
      ],
      "requested_pickup_at": "2021-01-12 09:34:09",
      "tracking_number": "YT000001",
      "type": 1,
      "warehouse_id": 1
   }'
`, os.Args[0])
}

func orderUpdateInboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order update-inbound-order -body JSON

UpdateInboundOrder implements update_inbound_order.
    -body JSON: 

Example:
    %[1]s order update-inbound-order --body '{
      "address": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "customer_code": "1013",
      "customer_order_id": "xxx1234",
      "description": "description",
      "estimated_arrival_at": "2021-01-12 09:34:09",
      "id": 1,
      "is_pickup": true,
      "items": [
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         }
      ],
      "requested_pickup_at": "2021-01-12 09:34:09",
      "tracking_number": "YT000001",
      "type": 1,
      "warehouse_id": 1
   }'
`, os.Args[0])
}

func orderCreateOutboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order create-outbound-order -body JSON

CreateOutboundOrder implements create_outbound_order.
    -body JSON: 

Example:
    %[1]s order create-outbound-order --body '{
      "channel_id": 1,
      "currency": "USD",
      "customer_code": "YT",
      "customer_order_id": "YT000001",
      "customer_tariff_number": "xxx",
      "customer_tariff_number_type": 0,
      "description": "description",
      "enable_prepay_tariff": false,
      "id": 1,
      "inbound_order_id": 1,
      "items": [
         {
            "barcode": "xxx",
            "declared_cn_name": "NSS",
            "declared_en_name": "NSS",
            "declared_value_in_eur": 10.07,
            "declared_value_in_usd": 10.07,
            "hs_code": "xxx",
            "product_attributes": [
               "battery",
               "cosmetic",
               "liquid",
               "magnetic"
            ],
            "product_height": 10,
            "product_length": 10,
            "product_name": "NSS mate40",
            "product_price": 10.3,
            "product_sku": "xxxx",
            "product_weight": 10,
            "product_width": 10,
            "qty": 1
         },
         {
            "barcode": "xxx",
            "declared_cn_name": "NSS",
            "declared_en_name": "NSS",
            "declared_value_in_eur": 10.07,
            "declared_value_in_usd": 10.07,
            "hs_code": "xxx",
            "product_attributes": [
               "battery",
               "cosmetic",
               "liquid",
               "magnetic"
            ],
            "product_height": 10,
            "product_length": 10,
            "product_name": "NSS mate40",
            "product_price": 10.3,
            "product_sku": "xxxx",
            "product_weight": 10,
            "product_width": 10,
            "qty": 1
         }
      ],
      "package_id": 1,
      "receiver_info": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "shipping_type": 1,
      "total_price": 980.67,
      "type": 1
   }'
`, os.Args[0])
}

func orderUpdateOutboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order update-outbound-order -body JSON

UpdateOutboundOrder implements update_outbound_order.
    -body JSON: 

Example:
    %[1]s order update-outbound-order --body '{
      "channel_id": 1,
      "currency": "USD",
      "customer_code": "YT",
      "customer_order_id": "YT000001",
      "customer_tariff_number": "xxx",
      "customer_tariff_number_type": 0,
      "description": "description",
      "enable_prepay_tariff": false,
      "id": 1,
      "inbound_order_id": 1,
      "items": [
         {
            "barcode": "xxx",
            "declared_cn_name": "NSS",
            "declared_en_name": "NSS",
            "declared_value_in_eur": 10.07,
            "declared_value_in_usd": 10.07,
            "hs_code": "xxx",
            "product_attributes": [
               "battery",
               "cosmetic",
               "liquid",
               "magnetic"
            ],
            "product_height": 10,
            "product_length": 10,
            "product_name": "NSS mate40",
            "product_price": 10.3,
            "product_sku": "xxxx",
            "product_weight": 10,
            "product_width": 10,
            "qty": 1
         },
         {
            "barcode": "xxx",
            "declared_cn_name": "NSS",
            "declared_en_name": "NSS",
            "declared_value_in_eur": 10.07,
            "declared_value_in_usd": 10.07,
            "hs_code": "xxx",
            "product_attributes": [
               "battery",
               "cosmetic",
               "liquid",
               "magnetic"
            ],
            "product_height": 10,
            "product_length": 10,
            "product_name": "NSS mate40",
            "product_price": 10.3,
            "product_sku": "xxxx",
            "product_weight": 10,
            "product_width": 10,
            "qty": 1
         },
         {
            "barcode": "xxx",
            "declared_cn_name": "NSS",
            "declared_en_name": "NSS",
            "declared_value_in_eur": 10.07,
            "declared_value_in_usd": 10.07,
            "hs_code": "xxx",
            "product_attributes": [
               "battery",
               "cosmetic",
               "liquid",
               "magnetic"
            ],
            "product_height": 10,
            "product_length": 10,
            "product_name": "NSS mate40",
            "product_price": 10.3,
            "product_sku": "xxxx",
            "product_weight": 10,
            "product_width": 10,
            "qty": 1
         }
      ],
      "package_id": 1,
      "receiver_info": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "shipping_type": 1,
      "total_price": 980.67,
      "type": 1
   }'
`, os.Args[0])
}

func orderCreatePickupOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order create-pickup-order -body JSON

CreatePickupOrder implements create_pickup_order.
    -body JSON: 

Example:
    %[1]s order create-pickup-order --body '{
      "address": {
         "address1": "address1",
         "address2": "address2",
         "city_name": "SZ",
         "country_code": "US",
         "country_name": "US",
         "first_name": "He",
         "last_name": "John",
         "name": "He",
         "phone_number": "150xxxxxxxx",
         "state_code": "S",
         "state_name": "U",
         "zip_code": "10016"
      },
      "customer_code": "1013",
      "items": [
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         },
         {
            "barcode": "YCrankshaft",
            "product_name": "NSS Mate 40E",
            "product_sku": "YCrankshaft",
            "qty": 3
         }
      ],
      "requested_pickup_at": "2021-01-12 09:34:09",
      "type": 1
   }'
`, os.Args[0])
}

func orderGetInboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order get-inbound-order -client-order-id STRING

GetInboundOrder implements get_inbound_order.
    -client-order-id STRING: 

Example:
    %[1]s order get-inbound-order --client-order-id "xxx1234"
`, os.Args[0])
}

func orderGetOutboundOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order get-outbound-order -client-order-id STRING

GetOutboundOrder implements get_outbound_order.
    -client-order-id STRING: 

Example:
    %[1]s order get-outbound-order --client-order-id "xxx1234"
`, os.Args[0])
}

// productUsage displays the usage of the product command and its subcommands.
func productUsage() {
	fmt.Fprintf(os.Stderr, `The product service performs operations on product
Usage:
    %[1]s [globalflags] product COMMAND [flags]

COMMAND:
    batches-create-product: BatchesCreateProduct implements batches_create_product.
    update-product: UpdateProduct implements update_product.
    generate-barcode: GenerateBarcode implements generate_barcode.
    generate-token: GenerateToken implements generate_token.

Additional help:
    %[1]s product COMMAND --help
`, os.Args[0])
}
func productBatchesCreateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product batches-create-product -body JSON

BatchesCreateProduct implements batches_create_product.
    -body JSON: 

Example:
    %[1]s product batches-create-product --body '{
      "products": [
         {
            "barcode_service": false,
            "customer_code": "xxx",
            "declared_cn_name": "xxx",
            "declared_en_name": "xxx",
            "declared_value_in_eur": 50,
            "declared_value_in_usd": 50,
            "enabled_nss_barcode": false,
            "hs_code": "xxx",
            "id": 1,
            "product_attributes": [
               "liquid",
               "battery",
               "cosmetic",
               "magnetic"
            ],
            "product_barcode": "xxx",
            "product_height": 2,
            "product_image": [
               "url"
            ],
            "product_length": 1,
            "product_name": "xxx",
            "product_sku": "xxx",
            "product_weight": 10,
            "product_width": 1,
            "qty": 1
         }
      ]
   }'
`, os.Args[0])
}

func productUpdateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product update-product -body JSON

UpdateProduct implements update_product.
    -body JSON: 

Example:
    %[1]s product update-product --body '{
      "barcode_service": false,
      "customer_code": "xxx",
      "declared_cn_name": "xxx",
      "declared_en_name": "xxx",
      "declared_value_in_eur": 50,
      "declared_value_in_usd": 50,
      "enabled_nss_barcode": false,
      "hs_code": "xxx",
      "id": 1,
      "product_attributes": [
         "liquid",
         "battery",
         "cosmetic",
         "magnetic"
      ],
      "product_barcode": "xxx",
      "product_height": 2,
      "product_image": [
         "url"
      ],
      "product_length": 1,
      "product_name": "xxx",
      "product_sku": "xxx",
      "product_weight": 10,
      "product_width": 1,
      "qty": 1
   }'
`, os.Args[0])
}

func productGenerateBarcodeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product generate-barcode

GenerateBarcode implements generate_barcode.

Example:
    %[1]s product generate-barcode
`, os.Args[0])
}

func productGenerateTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product generate-token -body JSON

GenerateToken implements generate_token.
    -body JSON: 

Example:
    %[1]s product generate-token --body '{
      "id": 1,
      "tenant_id": 1
   }'
`, os.Args[0])
}

// fileUsage displays the usage of the file command and its subcommands.
func fileUsage() {
	fmt.Fprintf(os.Stderr, `The file service performs operations on file
Usage:
    %[1]s [globalflags] file COMMAND [flags]

COMMAND:
    upload-image: UploadImage implements upload_image.

Additional help:
    %[1]s file COMMAND --help
`, os.Args[0])
}
func fileUploadImageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] file upload-image -body JSON

UploadImage implements upload_image.
    -body JSON: 

Example:
    %[1]s file upload-image --body '{
      "file": "1.jpg",
      "file_name": "xxx"
   }'
`, os.Args[0])
}
