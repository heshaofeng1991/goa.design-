// Code generated by goa v3.6.2, DO NOT EDIT.
//
// woocommerce HTTP server
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	woocommerce "goa/gen/woocommerce"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the woocommerce service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	ReturnWoocommerce   http.Handler
	CallbackWoocommerce http.Handler
	RetrieveOrders      http.Handler
	RetrieveProducts    http.Handler
	CORS                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the woocommerce service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *woocommerce.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ReturnWoocommerce", "GET", "/v1/integrations/woocommerce/return"},
			{"CallbackWoocommerce", "POST", "/v1/integrations/woocommerce/callback"},
			{"RetrieveOrders", "GET", "/v1/integrations/woocommerce/retrieve/orders"},
			{"RetrieveProducts", "GET", "/v1/integrations/woocommerce/retrieve/products"},
			{"CORS", "OPTIONS", "/v1/integrations/woocommerce/return"},
			{"CORS", "OPTIONS", "/v1/integrations/woocommerce/callback"},
			{"CORS", "OPTIONS", "/v1/integrations/woocommerce/retrieve/orders"},
			{"CORS", "OPTIONS", "/v1/integrations/woocommerce/retrieve/products"},
		},
		ReturnWoocommerce:   NewReturnWoocommerceHandler(e.ReturnWoocommerce, mux, decoder, encoder, errhandler, formatter),
		CallbackWoocommerce: NewCallbackWoocommerceHandler(e.CallbackWoocommerce, mux, decoder, encoder, errhandler, formatter),
		RetrieveOrders:      NewRetrieveOrdersHandler(e.RetrieveOrders, mux, decoder, encoder, errhandler, formatter),
		RetrieveProducts:    NewRetrieveProductsHandler(e.RetrieveProducts, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "woocommerce" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ReturnWoocommerce = m(s.ReturnWoocommerce)
	s.CallbackWoocommerce = m(s.CallbackWoocommerce)
	s.RetrieveOrders = m(s.RetrieveOrders)
	s.RetrieveProducts = m(s.RetrieveProducts)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the woocommerce endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountReturnWoocommerceHandler(mux, h.ReturnWoocommerce)
	MountCallbackWoocommerceHandler(mux, h.CallbackWoocommerce)
	MountRetrieveOrdersHandler(mux, h.RetrieveOrders)
	MountRetrieveProductsHandler(mux, h.RetrieveProducts)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the woocommerce endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountReturnWoocommerceHandler configures the mux to serve the "woocommerce"
// service "return_woocommerce" endpoint.
func MountReturnWoocommerceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWoocommerceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/integrations/woocommerce/return", f)
}

// NewReturnWoocommerceHandler creates a HTTP handler which loads the HTTP
// request and calls the "woocommerce" service "return_woocommerce" endpoint.
func NewReturnWoocommerceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReturnWoocommerceRequest(mux, decoder)
		encodeResponse = EncodeReturnWoocommerceResponse(encoder)
		encodeError    = EncodeReturnWoocommerceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "return_woocommerce")
		ctx = context.WithValue(ctx, goa.ServiceKey, "woocommerce")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCallbackWoocommerceHandler configures the mux to serve the
// "woocommerce" service "callback_woocommerce" endpoint.
func MountCallbackWoocommerceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWoocommerceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/integrations/woocommerce/callback", f)
}

// NewCallbackWoocommerceHandler creates a HTTP handler which loads the HTTP
// request and calls the "woocommerce" service "callback_woocommerce" endpoint.
func NewCallbackWoocommerceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCallbackWoocommerceRequest(mux, decoder)
		encodeResponse = EncodeCallbackWoocommerceResponse(encoder)
		encodeError    = EncodeCallbackWoocommerceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "callback_woocommerce")
		ctx = context.WithValue(ctx, goa.ServiceKey, "woocommerce")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRetrieveOrdersHandler configures the mux to serve the "woocommerce"
// service "retrieve_orders" endpoint.
func MountRetrieveOrdersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWoocommerceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/integrations/woocommerce/retrieve/orders", f)
}

// NewRetrieveOrdersHandler creates a HTTP handler which loads the HTTP request
// and calls the "woocommerce" service "retrieve_orders" endpoint.
func NewRetrieveOrdersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRetrieveOrdersRequest(mux, decoder)
		encodeResponse = EncodeRetrieveOrdersResponse(encoder)
		encodeError    = EncodeRetrieveOrdersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "retrieve_orders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "woocommerce")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRetrieveProductsHandler configures the mux to serve the "woocommerce"
// service "retrieve_products" endpoint.
func MountRetrieveProductsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleWoocommerceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/integrations/woocommerce/retrieve/products", f)
}

// NewRetrieveProductsHandler creates a HTTP handler which loads the HTTP
// request and calls the "woocommerce" service "retrieve_products" endpoint.
func NewRetrieveProductsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRetrieveProductsRequest(mux, decoder)
		encodeResponse = EncodeRetrieveProductsResponse(encoder)
		encodeError    = EncodeRetrieveProductsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "retrieve_products")
		ctx = context.WithValue(ctx, goa.ServiceKey, "woocommerce")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service woocommerce.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleWoocommerceOrigin(h)
	mux.Handle("OPTIONS", "/v1/integrations/woocommerce/return", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/woocommerce/callback", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/woocommerce/retrieve/orders", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/integrations/woocommerce/retrieve/products", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleWoocommerceOrigin applies the CORS response headers corresponding to
// the origin for the service woocommerce.
func HandleWoocommerceOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, Accept, Origin, Authorization, X-Api-Version, x-nss-tenant-id")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
