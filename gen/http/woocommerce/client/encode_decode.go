// Code generated by goa v3.6.2, DO NOT EDIT.
//
// woocommerce HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	"fmt"
	woocommerce "goa/gen/woocommerce"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildReturnWoocommerceRequest instantiates a HTTP request object with method
// and path set to call the "woocommerce" service "return_woocommerce" endpoint
func (c *Client) BuildReturnWoocommerceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReturnWoocommerceWoocommercePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("woocommerce", "return_woocommerce", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReturnWoocommerceRequest returns an encoder for requests sent to the
// woocommerce return_woocommerce server.
func EncodeReturnWoocommerceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*woocommerce.WoocommerceReturnArgs)
		if !ok {
			return goahttp.ErrInvalidType("woocommerce", "return_woocommerce", "*woocommerce.WoocommerceReturnArgs", v)
		}
		body := NewReturnWoocommerceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("woocommerce", "return_woocommerce", err)
		}
		return nil
	}
}

// DecodeReturnWoocommerceResponse returns a decoder for responses returned by
// the woocommerce return_woocommerce endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeReturnWoocommerceResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeReturnWoocommerceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReturnWoocommerceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "return_woocommerce", err)
			}
			res := NewReturnWoocommerceWoocommerceReturnResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ReturnWoocommerceUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "return_woocommerce", err)
			}
			err = ValidateReturnWoocommerceUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "return_woocommerce", err)
			}
			return nil, NewReturnWoocommerceUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("woocommerce", "return_woocommerce", resp.StatusCode, string(body))
		}
	}
}

// BuildCallbackWoocommerceRequest instantiates a HTTP request object with
// method and path set to call the "woocommerce" service "callback_woocommerce"
// endpoint
func (c *Client) BuildCallbackWoocommerceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackWoocommerceWoocommercePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("woocommerce", "callback_woocommerce", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackWoocommerceRequest returns an encoder for requests sent to the
// woocommerce callback_woocommerce server.
func EncodeCallbackWoocommerceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*woocommerce.WoocommerceCallbackArgs)
		if !ok {
			return goahttp.ErrInvalidType("woocommerce", "callback_woocommerce", "*woocommerce.WoocommerceCallbackArgs", v)
		}
		body := NewCallbackWoocommerceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("woocommerce", "callback_woocommerce", err)
		}
		return nil
	}
}

// DecodeCallbackWoocommerceResponse returns a decoder for responses returned
// by the woocommerce callback_woocommerce endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeCallbackWoocommerceResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCallbackWoocommerceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CallbackWoocommerceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "callback_woocommerce", err)
			}
			err = ValidateCallbackWoocommerceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "callback_woocommerce", err)
			}
			res := NewCallbackWoocommerceWoocommerceCallbackRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CallbackWoocommerceUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "callback_woocommerce", err)
			}
			err = ValidateCallbackWoocommerceUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "callback_woocommerce", err)
			}
			return nil, NewCallbackWoocommerceUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("woocommerce", "callback_woocommerce", resp.StatusCode, string(body))
		}
	}
}

// BuildRetrieveOrdersRequest instantiates a HTTP request object with method
// and path set to call the "woocommerce" service "retrieve_orders" endpoint
func (c *Client) BuildRetrieveOrdersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveOrdersWoocommercePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("woocommerce", "retrieve_orders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRetrieveOrdersRequest returns an encoder for requests sent to the
// woocommerce retrieve_orders server.
func EncodeRetrieveOrdersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*woocommerce.GetWoocommerce)
		if !ok {
			return goahttp.ErrInvalidType("woocommerce", "retrieve_orders", "*woocommerce.GetWoocommerce", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.StoreID != nil {
			values.Add("store_id", fmt.Sprintf("%v", *p.StoreID))
		}
		for _, value := range p.PlatformRefIds {
			values.Add("platform_ref_ids", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRetrieveOrdersResponse returns a decoder for responses returned by the
// woocommerce retrieve_orders endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRetrieveOrdersResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeRetrieveOrdersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RetrieveOrdersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "retrieve_orders", err)
			}
			err = ValidateRetrieveOrdersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "retrieve_orders", err)
			}
			res := NewRetrieveOrdersWoocommerceOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RetrieveOrdersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "retrieve_orders", err)
			}
			err = ValidateRetrieveOrdersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "retrieve_orders", err)
			}
			return nil, NewRetrieveOrdersUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("woocommerce", "retrieve_orders", resp.StatusCode, string(body))
		}
	}
}

// BuildRetrieveProductsRequest instantiates a HTTP request object with method
// and path set to call the "woocommerce" service "retrieve_products" endpoint
func (c *Client) BuildRetrieveProductsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveProductsWoocommercePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("woocommerce", "retrieve_products", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRetrieveProductsRequest returns an encoder for requests sent to the
// woocommerce retrieve_products server.
func EncodeRetrieveProductsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*woocommerce.GetWoocommerce)
		if !ok {
			return goahttp.ErrInvalidType("woocommerce", "retrieve_products", "*woocommerce.GetWoocommerce", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.StoreID != nil {
			values.Add("store_id", fmt.Sprintf("%v", *p.StoreID))
		}
		for _, value := range p.PlatformRefIds {
			values.Add("platform_ref_ids", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRetrieveProductsResponse returns a decoder for responses returned by
// the woocommerce retrieve_products endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRetrieveProductsResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeRetrieveProductsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RetrieveProductsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "retrieve_products", err)
			}
			err = ValidateRetrieveProductsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "retrieve_products", err)
			}
			res := NewRetrieveProductsWoocommerceOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RetrieveProductsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("woocommerce", "retrieve_products", err)
			}
			err = ValidateRetrieveProductsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("woocommerce", "retrieve_products", err)
			}
			return nil, NewRetrieveProductsUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("woocommerce", "retrieve_products", resp.StatusCode, string(body))
		}
	}
}
