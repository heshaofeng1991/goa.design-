// Code generated by goa v3.6.2, DO NOT EDIT.
//
// platform_product HTTP server
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	platformproduct "goa/gen/platform_product"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the platform_product service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	PlatformProduct http.Handler
	Convert         http.Handler
	Mappings        http.Handler
	CORS            http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the platform_product service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *platformproduct.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"PlatformProduct", "GET", "/v1/platform-products"},
			{"Convert", "POST", "/v1/platform-products/convert"},
			{"Mappings", "POST", "/v1/platform-products/mappings"},
			{"CORS", "OPTIONS", "/v1/platform-products"},
			{"CORS", "OPTIONS", "/v1/platform-products/convert"},
			{"CORS", "OPTIONS", "/v1/platform-products/mappings"},
		},
		PlatformProduct: NewPlatformProductHandler(e.PlatformProduct, mux, decoder, encoder, errhandler, formatter),
		Convert:         NewConvertHandler(e.Convert, mux, decoder, encoder, errhandler, formatter),
		Mappings:        NewMappingsHandler(e.Mappings, mux, decoder, encoder, errhandler, formatter),
		CORS:            NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "platform_product" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.PlatformProduct = m(s.PlatformProduct)
	s.Convert = m(s.Convert)
	s.Mappings = m(s.Mappings)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the platform_product endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountPlatformProductHandler(mux, h.PlatformProduct)
	MountConvertHandler(mux, h.Convert)
	MountMappingsHandler(mux, h.Mappings)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the platform_product endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountPlatformProductHandler configures the mux to serve the
// "platform_product" service "platform_product" endpoint.
func MountPlatformProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePlatformProductOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/platform-products", f)
}

// NewPlatformProductHandler creates a HTTP handler which loads the HTTP
// request and calls the "platform_product" service "platform_product" endpoint.
func NewPlatformProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePlatformProductRequest(mux, decoder)
		encodeResponse = EncodePlatformProductResponse(encoder)
		encodeError    = EncodePlatformProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "platform_product")
		ctx = context.WithValue(ctx, goa.ServiceKey, "platform_product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountConvertHandler configures the mux to serve the "platform_product"
// service "convert" endpoint.
func MountConvertHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePlatformProductOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/platform-products/convert", f)
}

// NewConvertHandler creates a HTTP handler which loads the HTTP request and
// calls the "platform_product" service "convert" endpoint.
func NewConvertHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeConvertRequest(mux, decoder)
		encodeResponse = EncodeConvertResponse(encoder)
		encodeError    = EncodeConvertError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "convert")
		ctx = context.WithValue(ctx, goa.ServiceKey, "platform_product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMappingsHandler configures the mux to serve the "platform_product"
// service "mappings" endpoint.
func MountMappingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePlatformProductOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/platform-products/mappings", f)
}

// NewMappingsHandler creates a HTTP handler which loads the HTTP request and
// calls the "platform_product" service "mappings" endpoint.
func NewMappingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMappingsRequest(mux, decoder)
		encodeResponse = EncodeMappingsResponse(encoder)
		encodeError    = EncodeMappingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "mappings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "platform_product")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service platform_product.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandlePlatformProductOrigin(h)
	mux.Handle("OPTIONS", "/v1/platform-products", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/platform-products/convert", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/platform-products/mappings", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandlePlatformProductOrigin applies the CORS response headers corresponding
// to the origin for the service platform_product.
func HandlePlatformProductOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, Accept, Origin, Authorization, X-Api-Version, x-nss-tenant-id")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
