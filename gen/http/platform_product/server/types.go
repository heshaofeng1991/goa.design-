// Code generated by goa v3.6.2, DO NOT EDIT.
//
// platform_product HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	platformproduct "goa/gen/platform_product"

	goa "goa.design/goa/v3/pkg"
)

// ConvertRequestBody is the type of the "platform_product" service "convert"
// endpoint HTTP request body.
type ConvertRequestBody struct {
	// platform_product_ids
	PlatformProductIds []int32 `form:"platform_product_ids,omitempty" json:"platform_product_ids,omitempty" xml:"platform_product_ids,omitempty"`
}

// MappingsRequestBody is the type of the "platform_product" service "mappings"
// endpoint HTTP request body.
type MappingsRequestBody struct {
	// platform_product_ids
	PlatformProductIds []int32 `form:"platform_product_ids,omitempty" json:"platform_product_ids,omitempty" xml:"platform_product_ids,omitempty"`
	// products
	Products []*UpdateMappingsProductRequestBody `form:"products,omitempty" json:"products,omitempty" xml:"products,omitempty"`
}

// PlatformProductResponseBody is the type of the "platform_product" service
// "platform_product" endpoint HTTP response body.
type PlatformProductResponseBody struct {
	// data
	Data *MultiPlatformProductResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// ConvertResponseBody is the type of the "platform_product" service "convert"
// endpoint HTTP response body.
type ConvertResponseBody struct {
	// data
	Data []*ConvertPlatformProductsResDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// MappingsResponseBody is the type of the "platform_product" service
// "mappings" endpoint HTTP response body.
type MappingsResponseBody struct {
	// data
	Data interface{} `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// PlatformProductUnauthorizedResponseBody is the type of the
// "platform_product" service "platform_product" endpoint HTTP response body
// for the "Unauthorized" error.
type PlatformProductUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ConvertUnauthorizedResponseBody is the type of the "platform_product"
// service "convert" endpoint HTTP response body for the "Unauthorized" error.
type ConvertUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MappingsUnauthorizedResponseBody is the type of the "platform_product"
// service "mappings" endpoint HTTP response body for the "Unauthorized" error.
type MappingsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MultiPlatformProductResponseBody is used to define fields on response body
// types.
type MultiPlatformProductResponseBody struct {
	// MetaData info
	Meta *MetaDataResponseBody `form:"meta" json:"meta" xml:"meta"`
	// product info
	List []*ListingResponseBody `form:"list" json:"list" xml:"list"`
}

// MetaDataResponseBody is used to define fields on response body types.
type MetaDataResponseBody struct {
	// current
	Current int `form:"current" json:"current" xml:"current"`
	// page_size
	PageSize int `form:"page_size" json:"page_size" xml:"page_size"`
	// total
	Total int `form:"total" json:"total" xml:"total"`
}

// ListingResponseBody is used to define fields on response body types.
type ListingResponseBody struct {
	// listing sku
	ListingSku *string `form:"listing_sku,omitempty" json:"listing_sku,omitempty" xml:"listing_sku,omitempty"`
	// barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// images
	Images []string `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	// vendor
	Vendor *string `form:"vendor,omitempty" json:"vendor,omitempty" xml:"vendor,omitempty"`
	// platform status
	PlatformStatus *int `form:"platform_status,omitempty" json:"platform_status,omitempty" xml:"platform_status,omitempty"`
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// store
	Store *StoreResponseBody `form:"store,omitempty" json:"store,omitempty" xml:"store,omitempty"`
	// mappings
	Mappings []*MappingResponseBody `form:"mappings,omitempty" json:"mappings,omitempty" xml:"mappings,omitempty"`
	// is_mapping
	IsMapping *bool `form:"is_mapping,omitempty" json:"is_mapping,omitempty" xml:"is_mapping,omitempty"`
}

// StoreResponseBody is used to define fields on response body types.
type StoreResponseBody struct {
	// id
	ID int64 `form:"id" json:"id" xml:"id"`
	// name
	Name string `form:"name" json:"name" xml:"name"`
	// platform
	Platform string `form:"platform" json:"platform" xml:"platform"`
}

// MappingResponseBody is used to define fields on response body types.
type MappingResponseBody struct {
	// id
	ID int32 `form:"id" json:"id" xml:"id"`
	// platform_product_id
	PlatformProductID int32 `form:"platform_product_id" json:"platform_product_id" xml:"platform_product_id"`
	// product_id
	ProductID int32 `form:"product_id" json:"product_id" xml:"product_id"`
	// product_sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// qty
	Qty int32 `form:"qty" json:"qty" xml:"qty"`
	// product_name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// images
	Images []string `form:"images" json:"images" xml:"images"`
}

// ConvertPlatformProductsResDataResponseBody is used to define fields on
// response body types.
type ConvertPlatformProductsResDataResponseBody struct {
	// id
	ID int32 `form:"id" json:"id" xml:"id"`
	// success
	Success bool `form:"success" json:"success" xml:"success"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateMappingsProductRequestBody is used to define fields on request body
// types.
type UpdateMappingsProductRequestBody struct {
	// product_id
	ProductID *int32 `form:"product_id,omitempty" json:"product_id,omitempty" xml:"product_id,omitempty"`
	// qty
	Qty *int32 `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
}

// NewPlatformProductResponseBody builds the HTTP response body from the result
// of the "platform_product" endpoint of the "platform_product" service.
func NewPlatformProductResponseBody(res *platformproduct.MultiPlatformProductRsp) *PlatformProductResponseBody {
	body := &PlatformProductResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = marshalPlatformproductMultiPlatformProductToMultiPlatformProductResponseBody(res.Data)
	}
	return body
}

// NewConvertResponseBody builds the HTTP response body from the result of the
// "convert" endpoint of the "platform_product" service.
func NewConvertResponseBody(res *platformproduct.ConvertPlatformProductsRes) *ConvertResponseBody {
	body := &ConvertResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = make([]*ConvertPlatformProductsResDataResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalPlatformproductConvertPlatformProductsResDataToConvertPlatformProductsResDataResponseBody(val)
		}
	}
	return body
}

// NewMappingsResponseBody builds the HTTP response body from the result of the
// "mappings" endpoint of the "platform_product" service.
func NewMappingsResponseBody(res *platformproduct.UpdateMappingsRes) *MappingsResponseBody {
	body := &MappingsResponseBody{
		Data:    res.Data,
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewPlatformProductUnauthorizedResponseBody builds the HTTP response body
// from the result of the "platform_product" endpoint of the "platform_product"
// service.
func NewPlatformProductUnauthorizedResponseBody(res *goa.ServiceError) *PlatformProductUnauthorizedResponseBody {
	body := &PlatformProductUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewConvertUnauthorizedResponseBody builds the HTTP response body from the
// result of the "convert" endpoint of the "platform_product" service.
func NewConvertUnauthorizedResponseBody(res *goa.ServiceError) *ConvertUnauthorizedResponseBody {
	body := &ConvertUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMappingsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "mappings" endpoint of the "platform_product" service.
func NewMappingsUnauthorizedResponseBody(res *goa.ServiceError) *MappingsUnauthorizedResponseBody {
	body := &MappingsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPlatformProductGetListing builds a platform_product service
// platform_product endpoint payload.
func NewPlatformProductGetListing(platformStatus *int, name *string, pageSize *int, current *int, id *int32, listingSku *string, sku *string, isMapping *int, authorization *string, token *string) *platformproduct.GetListing {
	v := &platformproduct.GetListing{}
	v.PlatformStatus = platformStatus
	v.Name = name
	v.PageSize = pageSize
	v.Current = current
	v.ID = id
	v.ListingSku = listingSku
	v.Sku = sku
	v.IsMapping = isMapping
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewConvertPlatformProductsReq builds a platform_product service convert
// endpoint payload.
func NewConvertPlatformProductsReq(body *ConvertRequestBody, authorization *string, token *string) *platformproduct.ConvertPlatformProductsReq {
	v := &platformproduct.ConvertPlatformProductsReq{}
	v.PlatformProductIds = make([]int32, len(body.PlatformProductIds))
	for i, val := range body.PlatformProductIds {
		v.PlatformProductIds[i] = val
	}
	v.Authorization = authorization
	v.Token = token

	return v
}

// NewMappingsUpdateMappingsReq builds a platform_product service mappings
// endpoint payload.
func NewMappingsUpdateMappingsReq(body *MappingsRequestBody, authorization *string, token *string) *platformproduct.UpdateMappingsReq {
	v := &platformproduct.UpdateMappingsReq{}
	v.PlatformProductIds = make([]int32, len(body.PlatformProductIds))
	for i, val := range body.PlatformProductIds {
		v.PlatformProductIds[i] = val
	}
	v.Products = make([]*platformproduct.UpdateMappingsProduct, len(body.Products))
	for i, val := range body.Products {
		v.Products[i] = unmarshalUpdateMappingsProductRequestBodyToPlatformproductUpdateMappingsProduct(val)
	}
	v.Authorization = authorization
	v.Token = token

	return v
}

// ValidateConvertRequestBody runs the validations defined on ConvertRequestBody
func ValidateConvertRequestBody(body *ConvertRequestBody) (err error) {
	if body.PlatformProductIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform_product_ids", "body"))
	}
	return
}

// ValidateMappingsRequestBody runs the validations defined on
// MappingsRequestBody
func ValidateMappingsRequestBody(body *MappingsRequestBody) (err error) {
	if body.PlatformProductIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform_product_ids", "body"))
	}
	if body.Products == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("products", "body"))
	}
	for _, e := range body.Products {
		if e != nil {
			if err2 := ValidateUpdateMappingsProductRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateMappingsProductRequestBody runs the validations defined on
// UpdateMappingsProductRequestBody
func ValidateUpdateMappingsProductRequestBody(body *UpdateMappingsProductRequestBody) (err error) {
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_id", "body"))
	}
	if body.Qty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qty", "body"))
	}
	return
}
