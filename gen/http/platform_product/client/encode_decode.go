// Code generated by goa v3.6.2, DO NOT EDIT.
//
// platform_product HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	"fmt"
	platformproduct "goa/gen/platform_product"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildPlatformProductRequest instantiates a HTTP request object with method
// and path set to call the "platform_product" service "platform_product"
// endpoint
func (c *Client) BuildPlatformProductRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PlatformProductPlatformProductPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("platform_product", "platform_product", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePlatformProductRequest returns an encoder for requests sent to the
// platform_product platform_product server.
func EncodePlatformProductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*platformproduct.GetListing)
		if !ok {
			return goahttp.ErrInvalidType("platform_product", "platform_product", "*platformproduct.GetListing", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.PlatformStatus != nil {
			values.Add("platform_status", fmt.Sprintf("%v", *p.PlatformStatus))
		}
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		if p.PageSize != nil {
			values.Add("page_size", fmt.Sprintf("%v", *p.PageSize))
		}
		if p.Current != nil {
			values.Add("current", fmt.Sprintf("%v", *p.Current))
		}
		if p.ID != nil {
			values.Add("id", fmt.Sprintf("%v", *p.ID))
		}
		if p.ListingSku != nil {
			values.Add("listing_sku", *p.ListingSku)
		}
		if p.Sku != nil {
			values.Add("sku", *p.Sku)
		}
		if p.IsMapping != nil {
			values.Add("is_mapping", fmt.Sprintf("%v", *p.IsMapping))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodePlatformProductResponse returns a decoder for responses returned by
// the platform_product platform_product endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodePlatformProductResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodePlatformProductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PlatformProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "platform_product", err)
			}
			err = ValidatePlatformProductResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "platform_product", err)
			}
			res := NewPlatformProductMultiPlatformProductRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body PlatformProductUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "platform_product", err)
			}
			err = ValidatePlatformProductUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "platform_product", err)
			}
			return nil, NewPlatformProductUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("platform_product", "platform_product", resp.StatusCode, string(body))
		}
	}
}

// BuildConvertRequest instantiates a HTTP request object with method and path
// set to call the "platform_product" service "convert" endpoint
func (c *Client) BuildConvertRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ConvertPlatformProductPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("platform_product", "convert", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeConvertRequest returns an encoder for requests sent to the
// platform_product convert server.
func EncodeConvertRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*platformproduct.ConvertPlatformProductsReq)
		if !ok {
			return goahttp.ErrInvalidType("platform_product", "convert", "*platformproduct.ConvertPlatformProductsReq", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewConvertRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("platform_product", "convert", err)
		}
		return nil
	}
}

// DecodeConvertResponse returns a decoder for responses returned by the
// platform_product convert endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeConvertResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeConvertResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ConvertResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "convert", err)
			}
			err = ValidateConvertResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "convert", err)
			}
			res := NewConvertPlatformProductsResOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ConvertUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "convert", err)
			}
			err = ValidateConvertUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "convert", err)
			}
			return nil, NewConvertUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("platform_product", "convert", resp.StatusCode, string(body))
		}
	}
}

// BuildMappingsRequest instantiates a HTTP request object with method and path
// set to call the "platform_product" service "mappings" endpoint
func (c *Client) BuildMappingsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MappingsPlatformProductPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("platform_product", "mappings", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMappingsRequest returns an encoder for requests sent to the
// platform_product mappings server.
func EncodeMappingsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*platformproduct.UpdateMappingsReq)
		if !ok {
			return goahttp.ErrInvalidType("platform_product", "mappings", "*platformproduct.UpdateMappingsReq", v)
		}
		if p.Authorization != nil {
			head := *p.Authorization
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewMappingsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("platform_product", "mappings", err)
		}
		return nil
	}
}

// DecodeMappingsResponse returns a decoder for responses returned by the
// platform_product mappings endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeMappingsResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeMappingsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MappingsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "mappings", err)
			}
			err = ValidateMappingsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "mappings", err)
			}
			res := NewMappingsUpdateMappingsResOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body MappingsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("platform_product", "mappings", err)
			}
			err = ValidateMappingsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("platform_product", "mappings", err)
			}
			return nil, NewMappingsUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("platform_product", "mappings", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMultiPlatformProductResponseBodyToPlatformproductMultiPlatformProduct
// builds a value of type *platformproduct.MultiPlatformProduct from a value of
// type *MultiPlatformProductResponseBody.
func unmarshalMultiPlatformProductResponseBodyToPlatformproductMultiPlatformProduct(v *MultiPlatformProductResponseBody) *platformproduct.MultiPlatformProduct {
	if v == nil {
		return nil
	}
	res := &platformproduct.MultiPlatformProduct{}
	res.Meta = unmarshalMetaDataResponseBodyToPlatformproductMetaData(v.Meta)
	res.List = make([]*platformproduct.Listing, len(v.List))
	for i, val := range v.List {
		res.List[i] = unmarshalListingResponseBodyToPlatformproductListing(val)
	}

	return res
}

// unmarshalMetaDataResponseBodyToPlatformproductMetaData builds a value of
// type *platformproduct.MetaData from a value of type *MetaDataResponseBody.
func unmarshalMetaDataResponseBodyToPlatformproductMetaData(v *MetaDataResponseBody) *platformproduct.MetaData {
	res := &platformproduct.MetaData{
		Current:  *v.Current,
		PageSize: *v.PageSize,
		Total:    *v.Total,
	}

	return res
}

// unmarshalListingResponseBodyToPlatformproductListing builds a value of type
// *platformproduct.Listing from a value of type *ListingResponseBody.
func unmarshalListingResponseBodyToPlatformproductListing(v *ListingResponseBody) *platformproduct.Listing {
	res := &platformproduct.Listing{
		ListingSku:     v.ListingSku,
		Barcode:        v.Barcode,
		Name:           v.Name,
		Vendor:         v.Vendor,
		PlatformStatus: v.PlatformStatus,
		ID:             v.ID,
		IsMapping:      v.IsMapping,
	}
	if v.Images != nil {
		res.Images = make([]string, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = val
		}
	}
	if v.Store != nil {
		res.Store = unmarshalStoreResponseBodyToPlatformproductStore(v.Store)
	}
	if v.Mappings != nil {
		res.Mappings = make([]*platformproduct.Mapping, len(v.Mappings))
		for i, val := range v.Mappings {
			res.Mappings[i] = unmarshalMappingResponseBodyToPlatformproductMapping(val)
		}
	}

	return res
}

// unmarshalStoreResponseBodyToPlatformproductStore builds a value of type
// *platformproduct.Store from a value of type *StoreResponseBody.
func unmarshalStoreResponseBodyToPlatformproductStore(v *StoreResponseBody) *platformproduct.Store {
	if v == nil {
		return nil
	}
	res := &platformproduct.Store{
		ID:       *v.ID,
		Name:     *v.Name,
		Platform: *v.Platform,
	}

	return res
}

// unmarshalMappingResponseBodyToPlatformproductMapping builds a value of type
// *platformproduct.Mapping from a value of type *MappingResponseBody.
func unmarshalMappingResponseBodyToPlatformproductMapping(v *MappingResponseBody) *platformproduct.Mapping {
	if v == nil {
		return nil
	}
	res := &platformproduct.Mapping{
		ID:                *v.ID,
		PlatformProductID: *v.PlatformProductID,
		ProductID:         *v.ProductID,
		ProductSku:        *v.ProductSku,
		Qty:               *v.Qty,
		ProductName:       *v.ProductName,
	}
	res.Images = make([]string, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = val
	}

	return res
}

// unmarshalConvertPlatformProductsResDataResponseBodyToPlatformproductConvertPlatformProductsResData
// builds a value of type *platformproduct.ConvertPlatformProductsResData from
// a value of type *ConvertPlatformProductsResDataResponseBody.
func unmarshalConvertPlatformProductsResDataResponseBodyToPlatformproductConvertPlatformProductsResData(v *ConvertPlatformProductsResDataResponseBody) *platformproduct.ConvertPlatformProductsResData {
	if v == nil {
		return nil
	}
	res := &platformproduct.ConvertPlatformProductsResData{
		ID:      *v.ID,
		Success: *v.Success,
		Message: *v.Message,
	}

	return res
}

// marshalPlatformproductUpdateMappingsProductToUpdateMappingsProductRequestBody
// builds a value of type *UpdateMappingsProductRequestBody from a value of
// type *platformproduct.UpdateMappingsProduct.
func marshalPlatformproductUpdateMappingsProductToUpdateMappingsProductRequestBody(v *platformproduct.UpdateMappingsProduct) *UpdateMappingsProductRequestBody {
	res := &UpdateMappingsProductRequestBody{
		ProductID: v.ProductID,
		Qty:       v.Qty,
	}

	return res
}

// marshalUpdateMappingsProductRequestBodyToPlatformproductUpdateMappingsProduct
// builds a value of type *platformproduct.UpdateMappingsProduct from a value
// of type *UpdateMappingsProductRequestBody.
func marshalUpdateMappingsProductRequestBodyToPlatformproductUpdateMappingsProduct(v *UpdateMappingsProductRequestBody) *platformproduct.UpdateMappingsProduct {
	res := &platformproduct.UpdateMappingsProduct{
		ProductID: v.ProductID,
		Qty:       v.Qty,
	}

	return res
}
