// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	track "goa/gen/track"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "track" service "get" endpoint HTTP
// response body.
type GetResponseBody []*TrackResponse

// GetUnauthorizedResponseBody is the type of the "track" service "get"
// endpoint HTTP response body for the "Unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TrackResponse is used to define fields on response body types.
type TrackResponse struct {
	// tracking number of order
	TrackingNumber *string `form:"tracking_number,omitempty" json:"tracking_number,omitempty" xml:"tracking_number,omitempty"`
	// tracking url
	TrackingURL *string `form:"tracking_url,omitempty" json:"tracking_url,omitempty" xml:"tracking_url,omitempty"`
	// tracking details
	Details []*TrackItemResponse `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// status
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// type
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// order_id
	OrderID *string `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
}

// TrackItemResponse is used to define fields on response body types.
type TrackItemResponse struct {
	// tracking description
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// tracking timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// NewGetTrackOK builds a "track" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetTrackOK(body []*TrackResponse) []*track.Track {
	v := make([]*track.Track, len(body))
	for i, val := range body {
		v[i] = unmarshalTrackResponseToTrackTrack(val)
	}

	return v
}

// NewGetUnauthorized builds a track service get endpoint Unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_Unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTrackResponse runs the validations defined on TrackResponse
func ValidateTrackResponse(body *TrackResponse) (err error) {
	if body.TrackingNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "body"))
	}
	if body.Details == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("details", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}
