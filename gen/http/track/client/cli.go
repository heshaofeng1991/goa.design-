// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	track "goa/gen/track"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildBatchQueryTrackInfoPayload builds the payload for the track
// batch_query_track_info endpoint from CLI flags.
func BuildBatchQueryTrackInfoPayload(trackBatchQueryTrackInfoTrackingNumbers string) (*track.BatchQueryTrackPayload, error) {
	var err error
	var trackingNumbers []string
	{
		err = json.Unmarshal([]byte(trackBatchQueryTrackInfoTrackingNumbers), &trackingNumbers)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for trackingNumbers, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"Quia porro quis.\",\n      \"Cum sit laudantium.\",\n      \"Explicabo et qui autem eligendi voluptate deserunt.\"\n   ]'")
		}
		if len(trackingNumbers) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumbers", trackingNumbers, len(trackingNumbers), 1, true))
		}
		if len(trackingNumbers) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumbers", trackingNumbers, len(trackingNumbers), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &track.BatchQueryTrackPayload{}
	v.TrackingNumbers = trackingNumbers

	return v, nil
}

// BuildGetTrackPayload builds the payload for the track get_track endpoint
// from CLI flags.
func BuildGetTrackPayload(trackGetTrackTrackingNumber string) (*track.QueryTrackPayload, error) {
	var err error
	var trackingNumber string
	{
		trackingNumber = trackGetTrackTrackingNumber
		if utf8.RuneCountInString(trackingNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumber", trackingNumber, utf8.RuneCountInString(trackingNumber), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &track.QueryTrackPayload{}
	v.TrackingNumber = trackingNumber

	return v, nil
}
