// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	track "goa/gen/track"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildBatchQueryTrackInfoRequest instantiates a HTTP request object with
// method and path set to call the "track" service "batch_query_track_info"
// endpoint
func (c *Client) BuildBatchQueryTrackInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchQueryTrackInfoTrackPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("track", "batch_query_track_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchQueryTrackInfoRequest returns an encoder for requests sent to the
// track batch_query_track_info server.
func EncodeBatchQueryTrackInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*track.BatchQueryTrackPayload)
		if !ok {
			return goahttp.ErrInvalidType("track", "batch_query_track_info", "*track.BatchQueryTrackPayload", v)
		}
		values := req.URL.Query()
		for _, value := range p.TrackingNumbers {
			values.Add("tracking_numbers", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeBatchQueryTrackInfoResponse returns a decoder for responses returned
// by the track batch_query_track_info endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeBatchQueryTrackInfoResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeBatchQueryTrackInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchQueryTrackInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "batch_query_track_info", err)
			}
			err = ValidateBatchQueryTrackInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "batch_query_track_info", err)
			}
			res := NewBatchQueryTrackInfoQueryTrackRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BatchQueryTrackInfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "batch_query_track_info", err)
			}
			err = ValidateBatchQueryTrackInfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "batch_query_track_info", err)
			}
			return nil, NewBatchQueryTrackInfoUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("track", "batch_query_track_info", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTrackRequest instantiates a HTTP request object with method and path
// set to call the "track" service "get_track" endpoint
func (c *Client) BuildGetTrackRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		trackingNumber string
	)
	{
		p, ok := v.(*track.QueryTrackPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("track", "get_track", "*track.QueryTrackPayload", v)
		}
		trackingNumber = p.TrackingNumber
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTrackTrackPath(trackingNumber)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("track", "get_track", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetTrackResponse returns a decoder for responses returned by the track
// get_track endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetTrackResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetTrackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTrackResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "get_track", err)
			}
			err = ValidateGetTrackResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "get_track", err)
			}
			res := NewGetTrackTrackRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetTrackUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "get_track", err)
			}
			err = ValidateGetTrackUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "get_track", err)
			}
			return nil, NewGetTrackUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("track", "get_track", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTrackInfoResponseBodyToTrackTrackInfo builds a value of type
// *track.TrackInfo from a value of type *TrackInfoResponseBody.
func unmarshalTrackInfoResponseBodyToTrackTrackInfo(v *TrackInfoResponseBody) *track.TrackInfo {
	if v == nil {
		return nil
	}
	res := &track.TrackInfo{}
	res.List = make([]*track.Track, len(v.List))
	for i, val := range v.List {
		res.List[i] = unmarshalTrackResponseBodyToTrackTrack(val)
	}

	return res
}

// unmarshalTrackResponseBodyToTrackTrack builds a value of type *track.Track
// from a value of type *TrackResponseBody.
func unmarshalTrackResponseBodyToTrackTrack(v *TrackResponseBody) *track.Track {
	res := &track.Track{
		TrackingNumber: *v.TrackingNumber,
		TrackingURL:    *v.TrackingURL,
		Status:         *v.Status,
	}
	res.Details = make([]*track.TrackItem, len(v.Details))
	for i, val := range v.Details {
		res.Details[i] = unmarshalTrackItemResponseBodyToTrackTrackItem(val)
	}

	return res
}

// unmarshalTrackItemResponseBodyToTrackTrackItem builds a value of type
// *track.TrackItem from a value of type *TrackItemResponseBody.
func unmarshalTrackItemResponseBodyToTrackTrackItem(v *TrackItemResponseBody) *track.TrackItem {
	res := &track.TrackItem{
		Content:   v.Content,
		Timestamp: v.Timestamp,
	}

	return res
}
