// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	"fmt"
	track "goa/gen/track"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "track" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTrackPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("track", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the track get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*track.GetTrack)
		if !ok {
			return goahttp.ErrInvalidType("track", "get", "*track.GetTrack", v)
		}
		values := req.URL.Query()
		values.Add("tracking_number", p.TrackingNumber)
		values.Add("type", fmt.Sprintf("%v", p.Type))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the track get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeGetResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "get", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateTrackResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "get", err)
			}
			res := NewGetTrackOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("track", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("track", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("track", "get", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTrackResponseToTrackTrack builds a value of type *track.Track from
// a value of type *TrackResponse.
func unmarshalTrackResponseToTrackTrack(v *TrackResponse) *track.Track {
	res := &track.Track{
		TrackingNumber: *v.TrackingNumber,
		TrackingURL:    v.TrackingURL,
		Status:         *v.Status,
		Type:           *v.Type,
		OrderID:        v.OrderID,
	}
	res.Details = make([]*track.TrackItem, len(v.Details))
	for i, val := range v.Details {
		res.Details[i] = unmarshalTrackItemResponseToTrackTrackItem(val)
	}

	return res
}

// unmarshalTrackItemResponseToTrackTrackItem builds a value of type
// *track.TrackItem from a value of type *TrackItemResponse.
func unmarshalTrackItemResponseToTrackTrackItem(v *TrackItemResponse) *track.TrackItem {
	res := &track.TrackItem{
		Content:   v.Content,
		Timestamp: v.Timestamp,
	}

	return res
}
