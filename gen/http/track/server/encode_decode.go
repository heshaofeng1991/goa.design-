// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	track "goa/gen/track"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResponse returns an encoder for responses returned by the track get
// endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*track.Track)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the track get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			trackingNumber string
			type_          int
			err            error
		)
		trackingNumber = r.URL.Query().Get("tracking_number")
		if trackingNumber == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("tracking_number", "query string"))
		}
		{
			type_Raw := r.URL.Query().Get("type")
			if type_Raw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("type", "query string"))
			}
			v, err2 := strconv.ParseInt(type_Raw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("type_", type_Raw, "integer"))
			}
			type_ = int(v)
		}
		if !(type_ == 1 || type_ == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("type_", type_, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTrack(trackingNumber, type_)

		return payload, nil
	}
}

// EncodeGetError returns an encoder for errors returned by the get track
// endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalTrackTrackToTrackResponse builds a value of type *TrackResponse from
// a value of type *track.Track.
func marshalTrackTrackToTrackResponse(v *track.Track) *TrackResponse {
	res := &TrackResponse{
		TrackingNumber: v.TrackingNumber,
		TrackingURL:    v.TrackingURL,
		Status:         v.Status,
		Type:           v.Type,
		OrderID:        v.OrderID,
	}
	if v.Details != nil {
		res.Details = make([]*TrackItemResponse, len(v.Details))
		for i, val := range v.Details {
			res.Details[i] = marshalTrackTrackItemToTrackItemResponse(val)
		}
	}

	return res
}

// marshalTrackTrackItemToTrackItemResponse builds a value of type
// *TrackItemResponse from a value of type *track.TrackItem.
func marshalTrackTrackItemToTrackItemResponse(v *track.TrackItem) *TrackItemResponse {
	res := &TrackItemResponse{
		Content:   v.Content,
		Timestamp: v.Timestamp,
	}

	return res
}
