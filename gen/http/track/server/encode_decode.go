// Code generated by goa v3.6.2, DO NOT EDIT.
//
// track HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	track "goa/gen/track"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeBatchQueryTrackInfoResponse returns an encoder for responses returned
// by the track batch_query_track_info endpoint.
func EncodeBatchQueryTrackInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*track.QueryTrackRsp)
		enc := encoder(ctx, w)
		body := NewBatchQueryTrackInfoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeBatchQueryTrackInfoRequest returns a decoder for requests sent to the
// track batch_query_track_info endpoint.
func DecodeBatchQueryTrackInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			trackingNumbers []string
			err             error
		)
		trackingNumbers = r.URL.Query()["tracking_numbers"]
		if trackingNumbers == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("tracking_numbers", "query string"))
		}
		if len(trackingNumbers) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumbers", trackingNumbers, len(trackingNumbers), 1, true))
		}
		if len(trackingNumbers) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumbers", trackingNumbers, len(trackingNumbers), 50, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewBatchQueryTrackInfoBatchQueryTrackPayload(trackingNumbers)

		return payload, nil
	}
}

// EncodeBatchQueryTrackInfoError returns an encoder for errors returned by the
// batch_query_track_info track endpoint.
func EncodeBatchQueryTrackInfoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewBatchQueryTrackInfoUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetTrackResponse returns an encoder for responses returned by the
// track get_track endpoint.
func EncodeGetTrackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*track.TrackRsp)
		enc := encoder(ctx, w)
		body := NewGetTrackResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTrackRequest returns a decoder for requests sent to the track
// get_track endpoint.
func DecodeGetTrackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			trackingNumber string
			err            error

			params = mux.Vars(r)
		)
		trackingNumber = params["tracking_number"]
		if utf8.RuneCountInString(trackingNumber) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("trackingNumber", trackingNumber, utf8.RuneCountInString(trackingNumber), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTrackQueryTrackPayload(trackingNumber)

		return payload, nil
	}
}

// EncodeGetTrackError returns an encoder for errors returned by the get_track
// track endpoint.
func EncodeGetTrackError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetTrackUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalTrackTrackInfoToTrackInfoResponseBody builds a value of type
// *TrackInfoResponseBody from a value of type *track.TrackInfo.
func marshalTrackTrackInfoToTrackInfoResponseBody(v *track.TrackInfo) *TrackInfoResponseBody {
	if v == nil {
		return nil
	}
	res := &TrackInfoResponseBody{}
	if v.List != nil {
		res.List = make([]*TrackResponseBody, len(v.List))
		for i, val := range v.List {
			res.List[i] = marshalTrackTrackToTrackResponseBody(val)
		}
	}

	return res
}

// marshalTrackTrackToTrackResponseBody builds a value of type
// *TrackResponseBody from a value of type *track.Track.
func marshalTrackTrackToTrackResponseBody(v *track.Track) *TrackResponseBody {
	res := &TrackResponseBody{
		TrackingNumber: v.TrackingNumber,
		TrackingURL:    v.TrackingURL,
		Status:         v.Status,
	}
	if v.Details != nil {
		res.Details = make([]*TrackItemResponseBody, len(v.Details))
		for i, val := range v.Details {
			res.Details[i] = marshalTrackTrackItemToTrackItemResponseBody(val)
		}
	}

	return res
}

// marshalTrackTrackItemToTrackItemResponseBody builds a value of type
// *TrackItemResponseBody from a value of type *track.TrackItem.
func marshalTrackTrackItemToTrackItemResponseBody(v *track.TrackItem) *TrackItemResponseBody {
	res := &TrackItemResponseBody{
		Content:   v.Content,
		Timestamp: v.Timestamp,
	}

	return res
}
