// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product client HTTP transport
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the product service endpoint HTTP clients.
type Client struct {
	// BatchesCreateProduct Doer is the HTTP client used to make requests to the
	// batches_create_product endpoint.
	BatchesCreateProductDoer goahttp.Doer

	// UpdateProduct Doer is the HTTP client used to make requests to the
	// update_product endpoint.
	UpdateProductDoer goahttp.Doer

	// GenerateBarcode Doer is the HTTP client used to make requests to the
	// generate_barcode endpoint.
	GenerateBarcodeDoer goahttp.Doer

	// GenerateToken Doer is the HTTP client used to make requests to the
	// generate_token endpoint.
	GenerateTokenDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the product service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		BatchesCreateProductDoer: doer,
		UpdateProductDoer:        doer,
		GenerateBarcodeDoer:      doer,
		GenerateTokenDoer:        doer,
		CORSDoer:                 doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// BatchesCreateProduct returns an endpoint that makes HTTP requests to the
// product service batches_create_product server.
func (c *Client) BatchesCreateProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeBatchesCreateProductRequest(c.encoder)
		decodeResponse = DecodeBatchesCreateProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchesCreateProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchesCreateProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "batches_create_product", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProduct returns an endpoint that makes HTTP requests to the product
// service update_product server.
func (c *Client) UpdateProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProductRequest(c.encoder)
		decodeResponse = DecodeUpdateProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "update_product", err)
		}
		return decodeResponse(resp)
	}
}

// GenerateBarcode returns an endpoint that makes HTTP requests to the product
// service generate_barcode server.
func (c *Client) GenerateBarcode() goa.Endpoint {
	var (
		decodeResponse = DecodeGenerateBarcodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGenerateBarcodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenerateBarcodeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "generate_barcode", err)
		}
		return decodeResponse(resp)
	}
}

// GenerateToken returns an endpoint that makes HTTP requests to the product
// service generate_token server.
func (c *Client) GenerateToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeGenerateTokenRequest(c.encoder)
		decodeResponse = DecodeGenerateTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGenerateTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenerateTokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("product", "generate_token", err)
		}
		return decodeResponse(resp)
	}
}
