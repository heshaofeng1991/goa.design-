// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product HTTP client encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"bytes"
	"context"
	product "goa/gen/product"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildBatchesCreateProductRequest instantiates a HTTP request object with
// method and path set to call the "product" service "batches_create_product"
// endpoint
func (c *Client) BuildBatchesCreateProductRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchesCreateProductProductPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "batches_create_product", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchesCreateProductRequest returns an encoder for requests sent to
// the product batches_create_product server.
func EncodeBatchesCreateProductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*product.MultiProduct)
		if !ok {
			return goahttp.ErrInvalidType("product", "batches_create_product", "*product.MultiProduct", v)
		}
		body := NewBatchesCreateProductRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("product", "batches_create_product", err)
		}
		return nil
	}
}

// DecodeBatchesCreateProductResponse returns a decoder for responses returned
// by the product batches_create_product endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeBatchesCreateProductResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeBatchesCreateProductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchesCreateProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "batches_create_product", err)
			}
			err = ValidateBatchesCreateProductResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "batches_create_product", err)
			}
			res := NewBatchesCreateProductMultiProductRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BatchesCreateProductUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "batches_create_product", err)
			}
			err = ValidateBatchesCreateProductUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "batches_create_product", err)
			}
			return nil, NewBatchesCreateProductUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "batches_create_product", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateProductRequest instantiates a HTTP request object with method and
// path set to call the "product" service "update_product" endpoint
func (c *Client) BuildUpdateProductRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProductProductPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "update_product", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateProductRequest returns an encoder for requests sent to the
// product update_product server.
func EncodeUpdateProductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*product.Product)
		if !ok {
			return goahttp.ErrInvalidType("product", "update_product", "*product.Product", v)
		}
		body := NewUpdateProductRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("product", "update_product", err)
		}
		return nil
	}
}

// DecodeUpdateProductResponse returns a decoder for responses returned by the
// product update_product endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateProductResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateProductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "update_product", err)
			}
			err = ValidateUpdateProductResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "update_product", err)
			}
			res := NewUpdateProductUpdateResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateProductUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "update_product", err)
			}
			err = ValidateUpdateProductUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "update_product", err)
			}
			return nil, NewUpdateProductUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "update_product", resp.StatusCode, string(body))
		}
	}
}

// BuildGenerateBarcodeRequest instantiates a HTTP request object with method
// and path set to call the "product" service "generate_barcode" endpoint
func (c *Client) BuildGenerateBarcodeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenerateBarcodeProductPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "generate_barcode", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGenerateBarcodeResponse returns a decoder for responses returned by
// the product generate_barcode endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGenerateBarcodeResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGenerateBarcodeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GenerateBarcodeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "generate_barcode", err)
			}
			err = ValidateGenerateBarcodeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "generate_barcode", err)
			}
			res := NewGenerateBarcodeBarCodeRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GenerateBarcodeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "generate_barcode", err)
			}
			err = ValidateGenerateBarcodeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "generate_barcode", err)
			}
			return nil, NewGenerateBarcodeUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "generate_barcode", resp.StatusCode, string(body))
		}
	}
}

// BuildGenerateTokenRequest instantiates a HTTP request object with method and
// path set to call the "product" service "generate_token" endpoint
func (c *Client) BuildGenerateTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenerateTokenProductPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "generate_token", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGenerateTokenRequest returns an encoder for requests sent to the
// product generate_token server.
func EncodeGenerateTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*product.GenerateTokenReq)
		if !ok {
			return goahttp.ErrInvalidType("product", "generate_token", "*product.GenerateTokenReq", v)
		}
		body := NewGenerateTokenRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("product", "generate_token", err)
		}
		return nil
	}
}

// DecodeGenerateTokenResponse returns a decoder for responses returned by the
// product generate_token endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGenerateTokenResponse may return the following errors:
//	- "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGenerateTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GenerateTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "generate_token", err)
			}
			err = ValidateGenerateTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "generate_token", err)
			}
			res := NewGenerateTokenRspOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GenerateTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "generate_token", err)
			}
			err = ValidateGenerateTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("product", "generate_token", err)
			}
			return nil, NewGenerateTokenUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "generate_token", resp.StatusCode, string(body))
		}
	}
}

// marshalProductProductToProductRequestBody builds a value of type
// *ProductRequestBody from a value of type *product.Product.
func marshalProductProductToProductRequestBody(v *product.Product) *ProductRequestBody {
	res := &ProductRequestBody{
		ProductSku:         v.ProductSku,
		ProductName:        v.ProductName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		ProductWeight:      v.ProductWeight,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		HsCode:             v.HsCode,
		ProductBarcode:     v.ProductBarcode,
		Qty:                v.Qty,
		EnabledNssBarcode:  v.EnabledNssBarcode,
		DeclaredValueInEur: v.DeclaredValueInEur,
		CustomerCode:       v.CustomerCode,
		ID:                 v.ID,
		BarcodeService:     v.BarcodeService,
	}
	if v.ProductImage != nil {
		res.ProductImage = make([]string, len(v.ProductImage))
		for i, val := range v.ProductImage {
			res.ProductImage[i] = val
		}
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}

	return res
}

// marshalProductRequestBodyToProductProduct builds a value of type
// *product.Product from a value of type *ProductRequestBody.
func marshalProductRequestBodyToProductProduct(v *ProductRequestBody) *product.Product {
	res := &product.Product{
		ProductSku:         v.ProductSku,
		ProductName:        v.ProductName,
		DeclaredEnName:     v.DeclaredEnName,
		DeclaredCnName:     v.DeclaredCnName,
		DeclaredValueInUsd: v.DeclaredValueInUsd,
		ProductWeight:      v.ProductWeight,
		ProductLength:      v.ProductLength,
		ProductWidth:       v.ProductWidth,
		ProductHeight:      v.ProductHeight,
		HsCode:             v.HsCode,
		ProductBarcode:     v.ProductBarcode,
		Qty:                v.Qty,
		EnabledNssBarcode:  v.EnabledNssBarcode,
		DeclaredValueInEur: v.DeclaredValueInEur,
		CustomerCode:       v.CustomerCode,
		ID:                 v.ID,
		BarcodeService:     v.BarcodeService,
	}
	if v.ProductImage != nil {
		res.ProductImage = make([]string, len(v.ProductImage))
		for i, val := range v.ProductImage {
			res.ProductImage[i] = val
		}
	}
	if v.ProductAttributes != nil {
		res.ProductAttributes = make([]string, len(v.ProductAttributes))
		for i, val := range v.ProductAttributes {
			res.ProductAttributes[i] = val
		}
	}

	return res
}

// unmarshalMultiProductDataResponseBodyToProductMultiProductData builds a
// value of type *product.MultiProductData from a value of type
// *MultiProductDataResponseBody.
func unmarshalMultiProductDataResponseBodyToProductMultiProductData(v *MultiProductDataResponseBody) *product.MultiProductData {
	res := &product.MultiProductData{
		ProductID:   *v.ProductID,
		Status:      *v.Status,
		ErrorMsg:    *v.ErrorMsg,
		Barcode:     *v.Barcode,
		Sku:         *v.Sku,
		ProductName: *v.ProductName,
	}

	return res
}
