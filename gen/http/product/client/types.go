// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product HTTP client types
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	product "goa/gen/product"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BatchesCreateProductRequestBody is the type of the "product" service
// "batches_create_product" endpoint HTTP request body.
type BatchesCreateProductRequestBody struct {
	// product info
	Products []*ProductRequestBody `form:"products" json:"products" xml:"products"`
}

// UpdateProductRequestBody is the type of the "product" service
// "update_product" endpoint HTTP request body.
type UpdateProductRequestBody struct {
	// product image
	ProductImage []string `form:"product_image,omitempty" json:"product_image,omitempty" xml:"product_image,omitempty"`
	// product sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// declared en name
	DeclaredEnName string `form:"declared_en_name" json:"declared_en_name" xml:"declared_en_name"`
	// declared cn name
	DeclaredCnName string `form:"declared_cn_name" json:"declared_cn_name" xml:"declared_cn_name"`
	// declared value in usd（$）
	DeclaredValueInUsd float64 `form:"declared_value_in_usd" json:"declared_value_in_usd" xml:"declared_value_in_usd"`
	// product weight（g）
	ProductWeight float64 `form:"product_weight" json:"product_weight" xml:"product_weight"`
	// product length（mm）
	ProductLength float64 `form:"product_length" json:"product_length" xml:"product_length"`
	// product width（mm）
	ProductWidth float64 `form:"product_width" json:"product_width" xml:"product_width"`
	// product height（mm）
	ProductHeight float64 `form:"product_height" json:"product_height" xml:"product_height"`
	// hs code
	HsCode string `form:"hs_code" json:"hs_code" xml:"hs_code"`
	// product_barcode
	ProductBarcode string `form:"product_barcode" json:"product_barcode" xml:"product_barcode"`
	// product attributes
	ProductAttributes []string `form:"product_attributes" json:"product_attributes" xml:"product_attributes"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// need use nss barcode
	EnabledNssBarcode *bool `form:"enabled_nss_barcode,omitempty" json:"enabled_nss_barcode,omitempty" xml:"enabled_nss_barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur float64 `form:"declared_value_in_eur" json:"declared_value_in_eur" xml:"declared_value_in_eur"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// barcode_service
	BarcodeService bool `form:"barcode_service" json:"barcode_service" xml:"barcode_service"`
}

// GenerateTokenRequestBody is the type of the "product" service
// "generate_token" endpoint HTTP request body.
type GenerateTokenRequestBody struct {
	// user_id
	ID int64 `form:"id" json:"id" xml:"id"`
	// tenantID
	TenantID int64 `form:"tenant_id" json:"tenant_id" xml:"tenant_id"`
}

// BatchesCreateProductResponseBody is the type of the "product" service
// "batches_create_product" endpoint HTTP response body.
type BatchesCreateProductResponseBody struct {
	// results
	Results []*MultiProductDataResponseBody `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
}

// UpdateProductResponseBody is the type of the "product" service
// "update_product" endpoint HTTP response body.
type UpdateProductResponseBody struct {
	// status
	Status *int32 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GenerateBarcodeResponseBody is the type of the "product" service
// "generate_barcode" endpoint HTTP response body.
type GenerateBarcodeResponseBody struct {
	// barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
}

// GenerateTokenResponseBody is the type of the "product" service
// "generate_token" endpoint HTTP response body.
type GenerateTokenResponseBody struct {
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// BatchesCreateProductUnauthorizedResponseBody is the type of the "product"
// service "batches_create_product" endpoint HTTP response body for the
// "Unauthorized" error.
type BatchesCreateProductUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateProductUnauthorizedResponseBody is the type of the "product" service
// "update_product" endpoint HTTP response body for the "Unauthorized" error.
type UpdateProductUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenerateBarcodeUnauthorizedResponseBody is the type of the "product" service
// "generate_barcode" endpoint HTTP response body for the "Unauthorized" error.
type GenerateBarcodeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GenerateTokenUnauthorizedResponseBody is the type of the "product" service
// "generate_token" endpoint HTTP response body for the "Unauthorized" error.
type GenerateTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProductRequestBody is used to define fields on request body types.
type ProductRequestBody struct {
	// product image
	ProductImage []string `form:"product_image,omitempty" json:"product_image,omitempty" xml:"product_image,omitempty"`
	// product sku
	ProductSku string `form:"product_sku" json:"product_sku" xml:"product_sku"`
	// product name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
	// declared en name
	DeclaredEnName string `form:"declared_en_name" json:"declared_en_name" xml:"declared_en_name"`
	// declared cn name
	DeclaredCnName string `form:"declared_cn_name" json:"declared_cn_name" xml:"declared_cn_name"`
	// declared value in usd（$）
	DeclaredValueInUsd float64 `form:"declared_value_in_usd" json:"declared_value_in_usd" xml:"declared_value_in_usd"`
	// product weight（g）
	ProductWeight float64 `form:"product_weight" json:"product_weight" xml:"product_weight"`
	// product length（mm）
	ProductLength float64 `form:"product_length" json:"product_length" xml:"product_length"`
	// product width（mm）
	ProductWidth float64 `form:"product_width" json:"product_width" xml:"product_width"`
	// product height（mm）
	ProductHeight float64 `form:"product_height" json:"product_height" xml:"product_height"`
	// hs code
	HsCode string `form:"hs_code" json:"hs_code" xml:"hs_code"`
	// product_barcode
	ProductBarcode string `form:"product_barcode" json:"product_barcode" xml:"product_barcode"`
	// product attributes
	ProductAttributes []string `form:"product_attributes" json:"product_attributes" xml:"product_attributes"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// need use nss barcode
	EnabledNssBarcode *bool `form:"enabled_nss_barcode,omitempty" json:"enabled_nss_barcode,omitempty" xml:"enabled_nss_barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur float64 `form:"declared_value_in_eur" json:"declared_value_in_eur" xml:"declared_value_in_eur"`
	// customer code
	CustomerCode string `form:"customer_code" json:"customer_code" xml:"customer_code"`
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// barcode_service
	BarcodeService bool `form:"barcode_service" json:"barcode_service" xml:"barcode_service"`
}

// MultiProductDataResponseBody is used to define fields on response body types.
type MultiProductDataResponseBody struct {
	// product id
	ProductID *int64 `form:"product_id,omitempty" json:"product_id,omitempty" xml:"product_id,omitempty"`
	// status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// error msg
	ErrorMsg *string `form:"error_msg,omitempty" json:"error_msg,omitempty" xml:"error_msg,omitempty"`
	// barcode
	Barcode *string `form:"barcode,omitempty" json:"barcode,omitempty" xml:"barcode,omitempty"`
	// sku
	Sku *string `form:"sku,omitempty" json:"sku,omitempty" xml:"sku,omitempty"`
	// product_name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
}

// NewBatchesCreateProductRequestBody builds the HTTP request body from the
// payload of the "batches_create_product" endpoint of the "product" service.
func NewBatchesCreateProductRequestBody(p *product.MultiProduct) *BatchesCreateProductRequestBody {
	body := &BatchesCreateProductRequestBody{}
	if p.Products != nil {
		body.Products = make([]*ProductRequestBody, len(p.Products))
		for i, val := range p.Products {
			body.Products[i] = marshalProductProductToProductRequestBody(val)
		}
	}
	return body
}

// NewUpdateProductRequestBody builds the HTTP request body from the payload of
// the "update_product" endpoint of the "product" service.
func NewUpdateProductRequestBody(p *product.Product) *UpdateProductRequestBody {
	body := &UpdateProductRequestBody{
		ProductSku:         p.ProductSku,
		ProductName:        p.ProductName,
		DeclaredEnName:     p.DeclaredEnName,
		DeclaredCnName:     p.DeclaredCnName,
		DeclaredValueInUsd: p.DeclaredValueInUsd,
		ProductWeight:      p.ProductWeight,
		ProductLength:      p.ProductLength,
		ProductWidth:       p.ProductWidth,
		ProductHeight:      p.ProductHeight,
		HsCode:             p.HsCode,
		ProductBarcode:     p.ProductBarcode,
		Qty:                p.Qty,
		EnabledNssBarcode:  p.EnabledNssBarcode,
		DeclaredValueInEur: p.DeclaredValueInEur,
		CustomerCode:       p.CustomerCode,
		ID:                 p.ID,
		BarcodeService:     p.BarcodeService,
	}
	if p.ProductImage != nil {
		body.ProductImage = make([]string, len(p.ProductImage))
		for i, val := range p.ProductImage {
			body.ProductImage[i] = val
		}
	}
	if p.ProductAttributes != nil {
		body.ProductAttributes = make([]string, len(p.ProductAttributes))
		for i, val := range p.ProductAttributes {
			body.ProductAttributes[i] = val
		}
	}
	return body
}

// NewGenerateTokenRequestBody builds the HTTP request body from the payload of
// the "generate_token" endpoint of the "product" service.
func NewGenerateTokenRequestBody(p *product.GenerateTokenReq) *GenerateTokenRequestBody {
	body := &GenerateTokenRequestBody{
		ID:       p.ID,
		TenantID: p.TenantID,
	}
	return body
}

// NewBatchesCreateProductMultiProductRspOK builds a "product" service
// "batches_create_product" endpoint result from a HTTP "OK" response.
func NewBatchesCreateProductMultiProductRspOK(body *BatchesCreateProductResponseBody) *product.MultiProductRsp {
	v := &product.MultiProductRsp{}
	v.Results = make([]*product.MultiProductData, len(body.Results))
	for i, val := range body.Results {
		v.Results[i] = unmarshalMultiProductDataResponseBodyToProductMultiProductData(val)
	}

	return v
}

// NewBatchesCreateProductUnauthorized builds a product service
// batches_create_product endpoint Unauthorized error.
func NewBatchesCreateProductUnauthorized(body *BatchesCreateProductUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateProductUpdateResponseOK builds a "product" service "update_product"
// endpoint result from a HTTP "OK" response.
func NewUpdateProductUpdateResponseOK(body *UpdateProductResponseBody) *product.UpdateResponse {
	v := &product.UpdateResponse{
		Status: *body.Status,
	}

	return v
}

// NewUpdateProductUnauthorized builds a product service update_product
// endpoint Unauthorized error.
func NewUpdateProductUnauthorized(body *UpdateProductUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGenerateBarcodeBarCodeRspOK builds a "product" service "generate_barcode"
// endpoint result from a HTTP "OK" response.
func NewGenerateBarcodeBarCodeRspOK(body *GenerateBarcodeResponseBody) *product.BarCodeRsp {
	v := &product.BarCodeRsp{
		Barcode: *body.Barcode,
	}

	return v
}

// NewGenerateBarcodeUnauthorized builds a product service generate_barcode
// endpoint Unauthorized error.
func NewGenerateBarcodeUnauthorized(body *GenerateBarcodeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGenerateTokenRspOK builds a "product" service "generate_token" endpoint
// result from a HTTP "OK" response.
func NewGenerateTokenRspOK(body *GenerateTokenResponseBody) *product.GenerateTokenRsp {
	v := &product.GenerateTokenRsp{
		Token: *body.Token,
	}

	return v
}

// NewGenerateTokenUnauthorized builds a product service generate_token
// endpoint Unauthorized error.
func NewGenerateTokenUnauthorized(body *GenerateTokenUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateBatchesCreateProductResponseBody runs the validations defined on
// batches_create_product_response_body
func ValidateBatchesCreateProductResponseBody(body *BatchesCreateProductResponseBody) (err error) {
	if body.Results == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("results", "body"))
	}
	for _, e := range body.Results {
		if e != nil {
			if err2 := ValidateMultiProductDataResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateProductResponseBody runs the validations defined on
// update_product_response_body
func ValidateUpdateProductResponseBody(body *UpdateProductResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == 0 || *body.Status == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateGenerateBarcodeResponseBody runs the validations defined on
// generate_barcode_response_body
func ValidateGenerateBarcodeResponseBody(body *GenerateBarcodeResponseBody) (err error) {
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	return
}

// ValidateGenerateTokenResponseBody runs the validations defined on
// generate_token_response_body
func ValidateGenerateTokenResponseBody(body *GenerateTokenResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}

// ValidateBatchesCreateProductUnauthorizedResponseBody runs the validations
// defined on batches_create_product_Unauthorized_response_body
func ValidateBatchesCreateProductUnauthorizedResponseBody(body *BatchesCreateProductUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateProductUnauthorizedResponseBody runs the validations defined
// on update_product_Unauthorized_response_body
func ValidateUpdateProductUnauthorizedResponseBody(body *UpdateProductUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenerateBarcodeUnauthorizedResponseBody runs the validations defined
// on generate_barcode_Unauthorized_response_body
func ValidateGenerateBarcodeUnauthorizedResponseBody(body *GenerateBarcodeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGenerateTokenUnauthorizedResponseBody runs the validations defined
// on generate_token_Unauthorized_response_body
func ValidateGenerateTokenUnauthorizedResponseBody(body *GenerateTokenUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProductRequestBody runs the validations defined on ProductRequestBody
func ValidateProductRequestBody(body *ProductRequestBody) (err error) {
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if utf8.RuneCountInString(body.ProductSku) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", body.ProductSku, utf8.RuneCountInString(body.ProductSku), 50, false))
	}
	if utf8.RuneCountInString(body.ProductName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", body.ProductName, utf8.RuneCountInString(body.ProductName), 50, false))
	}
	if utf8.RuneCountInString(body.DeclaredEnName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_en_name", body.DeclaredEnName, utf8.RuneCountInString(body.DeclaredEnName), 50, false))
	}
	if utf8.RuneCountInString(body.DeclaredCnName) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_cn_name", body.DeclaredCnName, utf8.RuneCountInString(body.DeclaredCnName), 50, false))
	}
	if body.DeclaredValueInUsd < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", body.DeclaredValueInUsd, 0, true))
	}
	if utf8.RuneCountInString(body.HsCode) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.hs_code", body.HsCode, utf8.RuneCountInString(body.HsCode), 50, false))
	}
	if utf8.RuneCountInString(body.ProductBarcode) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_barcode", body.ProductBarcode, utf8.RuneCountInString(body.ProductBarcode), 50, false))
	}
	if body.EnabledNssBarcode != nil {
		if !(*body.EnabledNssBarcode == false || *body.EnabledNssBarcode == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enabled_nss_barcode", *body.EnabledNssBarcode, []interface{}{false, true}))
		}
	}
	if body.DeclaredValueInEur < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", body.DeclaredValueInEur, 0, true))
	}
	if utf8.RuneCountInString(body.CustomerCode) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if !(body.BarcodeService == false || body.BarcodeService == true) {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.barcode_service", body.BarcodeService, []interface{}{false, true}))
	}
	return
}

// ValidateMultiProductDataResponseBody runs the validations defined on
// MultiProductDataResponseBody
func ValidateMultiProductDataResponseBody(body *MultiProductDataResponseBody) (err error) {
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ErrorMsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_msg", "body"))
	}
	if body.Barcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode", "body"))
	}
	if body.Sku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sku", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	return
}
