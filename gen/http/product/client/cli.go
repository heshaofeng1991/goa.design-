// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product HTTP client CLI support package
//
// Command:
// $ goa gen goa/design -o ./

package client

import (
	"encoding/json"
	"fmt"
	product "goa/gen/product"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildBatchesCreateProductPayload builds the payload for the product
// batches_create_product endpoint from CLI flags.
func BuildBatchesCreateProductPayload(productBatchesCreateProductBody string) (*product.MultiProduct, error) {
	var err error
	var body BatchesCreateProductRequestBody
	{
		err = json.Unmarshal([]byte(productBatchesCreateProductBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"products\": [\n         {\n            \"barcode_service\": false,\n            \"customer_code\": \"xxx\",\n            \"declared_cn_name\": \"xxx\",\n            \"declared_en_name\": \"xxx\",\n            \"declared_value_in_eur\": 50,\n            \"declared_value_in_usd\": 50,\n            \"enabled_nss_barcode\": false,\n            \"hs_code\": \"xxx\",\n            \"id\": 1,\n            \"product_attributes\": [\n               \"liquid\",\n               \"battery\",\n               \"cosmetic\",\n               \"magnetic\"\n            ],\n            \"product_barcode\": \"xxx\",\n            \"product_height\": 2,\n            \"product_image\": [\n               \"url\"\n            ],\n            \"product_length\": 1,\n            \"product_name\": \"xxx\",\n            \"product_sku\": \"xxx\",\n            \"product_weight\": 10,\n            \"product_width\": 1,\n            \"qty\": 1\n         }\n      ]\n   }'")
		}
		if body.Products == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("products", "body"))
		}
		if len(body.Products) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.products", body.Products, len(body.Products), 1, true))
		}
		for _, e := range body.Products {
			if e != nil {
				if err2 := ValidateProductRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &product.MultiProduct{}
	if body.Products != nil {
		v.Products = make([]*product.Product, len(body.Products))
		for i, val := range body.Products {
			v.Products[i] = marshalProductRequestBodyToProductProduct(val)
		}
	}

	return v, nil
}

// BuildUpdateProductPayload builds the payload for the product update_product
// endpoint from CLI flags.
func BuildUpdateProductPayload(productUpdateProductBody string) (*product.Product, error) {
	var err error
	var body UpdateProductRequestBody
	{
		err = json.Unmarshal([]byte(productUpdateProductBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"barcode_service\": false,\n      \"customer_code\": \"xxx\",\n      \"declared_cn_name\": \"xxx\",\n      \"declared_en_name\": \"xxx\",\n      \"declared_value_in_eur\": 50,\n      \"declared_value_in_usd\": 50,\n      \"enabled_nss_barcode\": false,\n      \"hs_code\": \"xxx\",\n      \"id\": 1,\n      \"product_attributes\": [\n         \"liquid\",\n         \"battery\",\n         \"cosmetic\",\n         \"magnetic\"\n      ],\n      \"product_barcode\": \"xxx\",\n      \"product_height\": 2,\n      \"product_image\": [\n         \"url\"\n      ],\n      \"product_length\": 1,\n      \"product_name\": \"xxx\",\n      \"product_sku\": \"xxx\",\n      \"product_weight\": 10,\n      \"product_width\": 1,\n      \"qty\": 1\n   }'")
		}
		if body.ProductAttributes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
		}
		if utf8.RuneCountInString(body.ProductSku) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", body.ProductSku, utf8.RuneCountInString(body.ProductSku), 50, false))
		}
		if utf8.RuneCountInString(body.ProductName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", body.ProductName, utf8.RuneCountInString(body.ProductName), 50, false))
		}
		if utf8.RuneCountInString(body.DeclaredEnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_en_name", body.DeclaredEnName, utf8.RuneCountInString(body.DeclaredEnName), 50, false))
		}
		if utf8.RuneCountInString(body.DeclaredCnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_cn_name", body.DeclaredCnName, utf8.RuneCountInString(body.DeclaredCnName), 50, false))
		}
		if body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", body.DeclaredValueInUsd, 0, true))
		}
		if utf8.RuneCountInString(body.HsCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hs_code", body.HsCode, utf8.RuneCountInString(body.HsCode), 50, false))
		}
		if utf8.RuneCountInString(body.ProductBarcode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_barcode", body.ProductBarcode, utf8.RuneCountInString(body.ProductBarcode), 50, false))
		}
		if body.EnabledNssBarcode != nil {
			if !(*body.EnabledNssBarcode == false || *body.EnabledNssBarcode == true) {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enabled_nss_barcode", *body.EnabledNssBarcode, []interface{}{false, true}))
			}
		}
		if body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", body.DeclaredValueInEur, 0, true))
		}
		if utf8.RuneCountInString(body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", body.CustomerCode, utf8.RuneCountInString(body.CustomerCode), 50, false))
		}
		if body.ID != nil {
			if *body.ID < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
			}
		}
		if !(body.BarcodeService == false || body.BarcodeService == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.barcode_service", body.BarcodeService, []interface{}{false, true}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &product.Product{
		ProductSku:         body.ProductSku,
		ProductName:        body.ProductName,
		DeclaredEnName:     body.DeclaredEnName,
		DeclaredCnName:     body.DeclaredCnName,
		DeclaredValueInUsd: body.DeclaredValueInUsd,
		ProductWeight:      body.ProductWeight,
		ProductLength:      body.ProductLength,
		ProductWidth:       body.ProductWidth,
		ProductHeight:      body.ProductHeight,
		HsCode:             body.HsCode,
		ProductBarcode:     body.ProductBarcode,
		Qty:                body.Qty,
		EnabledNssBarcode:  body.EnabledNssBarcode,
		DeclaredValueInEur: body.DeclaredValueInEur,
		CustomerCode:       body.CustomerCode,
		ID:                 body.ID,
		BarcodeService:     body.BarcodeService,
	}
	if body.ProductImage != nil {
		v.ProductImage = make([]string, len(body.ProductImage))
		for i, val := range body.ProductImage {
			v.ProductImage[i] = val
		}
	}
	if body.ProductAttributes != nil {
		v.ProductAttributes = make([]string, len(body.ProductAttributes))
		for i, val := range body.ProductAttributes {
			v.ProductAttributes[i] = val
		}
	}

	return v, nil
}

// BuildGenerateBarcodePayload builds the payload for the product
// generate_barcode endpoint from CLI flags.
func BuildGenerateBarcodePayload() (*product.BarCode, error) {
	v := &product.BarCode{}

	return v, nil
}

// BuildGenerateTokenPayload builds the payload for the product generate_token
// endpoint from CLI flags.
func BuildGenerateTokenPayload(productGenerateTokenBody string) (*product.GenerateTokenReq, error) {
	var err error
	var body GenerateTokenRequestBody
	{
		err = json.Unmarshal([]byte(productGenerateTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 1,\n      \"tenant_id\": 1\n   }'")
		}
		if body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", body.ID, 1, true))
		}
		if body.TenantID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.tenant_id", body.TenantID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &product.GenerateTokenReq{
		ID:       body.ID,
		TenantID: body.TenantID,
	}

	return v, nil
}
