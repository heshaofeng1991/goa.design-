// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product HTTP server types
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	product "goa/gen/product"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BatchesCreateProductRequestBody is the type of the "product" service
// "batches_create_product" endpoint HTTP request body.
type BatchesCreateProductRequestBody struct {
	// product info
	Products []*ProductRequestBody `form:"products,omitempty" json:"products,omitempty" xml:"products,omitempty"`
}

// UpdateProductRequestBody is the type of the "product" service
// "update_product" endpoint HTTP request body.
type UpdateProductRequestBody struct {
	// product image
	ProductImage []string `form:"product_image,omitempty" json:"product_image,omitempty" xml:"product_image,omitempty"`
	// product sku
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared value in usd（$）
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// product weight（g）
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product length（mm）
	ProductLength *float64 `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// product width（mm）
	ProductWidth *float64 `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// product height（mm）
	ProductHeight *float64 `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// product_barcode
	ProductBarcode *string `form:"product_barcode,omitempty" json:"product_barcode,omitempty" xml:"product_barcode,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// need use nss barcode
	EnabledNssBarcode *bool `form:"enabled_nss_barcode,omitempty" json:"enabled_nss_barcode,omitempty" xml:"enabled_nss_barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// barcode_service
	BarcodeService *bool `form:"barcode_service,omitempty" json:"barcode_service,omitempty" xml:"barcode_service,omitempty"`
}

// GenerateTokenRequestBody is the type of the "product" service
// "generate_token" endpoint HTTP request body.
type GenerateTokenRequestBody struct {
	// user_id
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// tenantID
	TenantID *int64 `form:"tenant_id,omitempty" json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

// BatchesCreateProductResponseBody is the type of the "product" service
// "batches_create_product" endpoint HTTP response body.
type BatchesCreateProductResponseBody struct {
	// results
	Results []*MultiProductDataResponseBody `form:"results" json:"results" xml:"results"`
}

// UpdateProductResponseBody is the type of the "product" service
// "update_product" endpoint HTTP response body.
type UpdateProductResponseBody struct {
	// status
	Status int32 `form:"status" json:"status" xml:"status"`
}

// GenerateBarcodeResponseBody is the type of the "product" service
// "generate_barcode" endpoint HTTP response body.
type GenerateBarcodeResponseBody struct {
	// barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
}

// GenerateTokenResponseBody is the type of the "product" service
// "generate_token" endpoint HTTP response body.
type GenerateTokenResponseBody struct {
	// token
	Token string `form:"token" json:"token" xml:"token"`
}

// BatchesCreateProductUnauthorizedResponseBody is the type of the "product"
// service "batches_create_product" endpoint HTTP response body for the
// "Unauthorized" error.
type BatchesCreateProductUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateProductUnauthorizedResponseBody is the type of the "product" service
// "update_product" endpoint HTTP response body for the "Unauthorized" error.
type UpdateProductUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GenerateBarcodeUnauthorizedResponseBody is the type of the "product" service
// "generate_barcode" endpoint HTTP response body for the "Unauthorized" error.
type GenerateBarcodeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GenerateTokenUnauthorizedResponseBody is the type of the "product" service
// "generate_token" endpoint HTTP response body for the "Unauthorized" error.
type GenerateTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MultiProductDataResponseBody is used to define fields on response body types.
type MultiProductDataResponseBody struct {
	// product id
	ProductID int64 `form:"product_id" json:"product_id" xml:"product_id"`
	// status
	Status string `form:"status" json:"status" xml:"status"`
	// error msg
	ErrorMsg string `form:"error_msg" json:"error_msg" xml:"error_msg"`
	// barcode
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// sku
	Sku string `form:"sku" json:"sku" xml:"sku"`
	// product_name
	ProductName string `form:"product_name" json:"product_name" xml:"product_name"`
}

// ProductRequestBody is used to define fields on request body types.
type ProductRequestBody struct {
	// product image
	ProductImage []string `form:"product_image,omitempty" json:"product_image,omitempty" xml:"product_image,omitempty"`
	// product sku
	ProductSku *string `form:"product_sku,omitempty" json:"product_sku,omitempty" xml:"product_sku,omitempty"`
	// product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty" xml:"product_name,omitempty"`
	// declared en name
	DeclaredEnName *string `form:"declared_en_name,omitempty" json:"declared_en_name,omitempty" xml:"declared_en_name,omitempty"`
	// declared cn name
	DeclaredCnName *string `form:"declared_cn_name,omitempty" json:"declared_cn_name,omitempty" xml:"declared_cn_name,omitempty"`
	// declared value in usd（$）
	DeclaredValueInUsd *float64 `form:"declared_value_in_usd,omitempty" json:"declared_value_in_usd,omitempty" xml:"declared_value_in_usd,omitempty"`
	// product weight（g）
	ProductWeight *float64 `form:"product_weight,omitempty" json:"product_weight,omitempty" xml:"product_weight,omitempty"`
	// product length（mm）
	ProductLength *float64 `form:"product_length,omitempty" json:"product_length,omitempty" xml:"product_length,omitempty"`
	// product width（mm）
	ProductWidth *float64 `form:"product_width,omitempty" json:"product_width,omitempty" xml:"product_width,omitempty"`
	// product height（mm）
	ProductHeight *float64 `form:"product_height,omitempty" json:"product_height,omitempty" xml:"product_height,omitempty"`
	// hs code
	HsCode *string `form:"hs_code,omitempty" json:"hs_code,omitempty" xml:"hs_code,omitempty"`
	// product_barcode
	ProductBarcode *string `form:"product_barcode,omitempty" json:"product_barcode,omitempty" xml:"product_barcode,omitempty"`
	// product attributes
	ProductAttributes []string `form:"product_attributes,omitempty" json:"product_attributes,omitempty" xml:"product_attributes,omitempty"`
	// quality
	Qty *int `form:"qty,omitempty" json:"qty,omitempty" xml:"qty,omitempty"`
	// need use nss barcode
	EnabledNssBarcode *bool `form:"enabled_nss_barcode,omitempty" json:"enabled_nss_barcode,omitempty" xml:"enabled_nss_barcode,omitempty"`
	// declared value in eur（€）
	DeclaredValueInEur *float64 `form:"declared_value_in_eur,omitempty" json:"declared_value_in_eur,omitempty" xml:"declared_value_in_eur,omitempty"`
	// customer code
	CustomerCode *string `form:"customer_code,omitempty" json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// barcode_service
	BarcodeService *bool `form:"barcode_service,omitempty" json:"barcode_service,omitempty" xml:"barcode_service,omitempty"`
}

// NewBatchesCreateProductResponseBody builds the HTTP response body from the
// result of the "batches_create_product" endpoint of the "product" service.
func NewBatchesCreateProductResponseBody(res *product.MultiProductRsp) *BatchesCreateProductResponseBody {
	body := &BatchesCreateProductResponseBody{}
	if res.Results != nil {
		body.Results = make([]*MultiProductDataResponseBody, len(res.Results))
		for i, val := range res.Results {
			body.Results[i] = marshalProductMultiProductDataToMultiProductDataResponseBody(val)
		}
	}
	return body
}

// NewUpdateProductResponseBody builds the HTTP response body from the result
// of the "update_product" endpoint of the "product" service.
func NewUpdateProductResponseBody(res *product.UpdateResponse) *UpdateProductResponseBody {
	body := &UpdateProductResponseBody{
		Status: res.Status,
	}
	return body
}

// NewGenerateBarcodeResponseBody builds the HTTP response body from the result
// of the "generate_barcode" endpoint of the "product" service.
func NewGenerateBarcodeResponseBody(res *product.BarCodeRsp) *GenerateBarcodeResponseBody {
	body := &GenerateBarcodeResponseBody{
		Barcode: res.Barcode,
	}
	return body
}

// NewGenerateTokenResponseBody builds the HTTP response body from the result
// of the "generate_token" endpoint of the "product" service.
func NewGenerateTokenResponseBody(res *product.GenerateTokenRsp) *GenerateTokenResponseBody {
	body := &GenerateTokenResponseBody{
		Token: res.Token,
	}
	return body
}

// NewBatchesCreateProductUnauthorizedResponseBody builds the HTTP response
// body from the result of the "batches_create_product" endpoint of the
// "product" service.
func NewBatchesCreateProductUnauthorizedResponseBody(res *goa.ServiceError) *BatchesCreateProductUnauthorizedResponseBody {
	body := &BatchesCreateProductUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateProductUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_product" endpoint of the "product" service.
func NewUpdateProductUnauthorizedResponseBody(res *goa.ServiceError) *UpdateProductUnauthorizedResponseBody {
	body := &UpdateProductUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGenerateBarcodeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "generate_barcode" endpoint of the "product" service.
func NewGenerateBarcodeUnauthorizedResponseBody(res *goa.ServiceError) *GenerateBarcodeUnauthorizedResponseBody {
	body := &GenerateBarcodeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGenerateTokenUnauthorizedResponseBody builds the HTTP response body from
// the result of the "generate_token" endpoint of the "product" service.
func NewGenerateTokenUnauthorizedResponseBody(res *goa.ServiceError) *GenerateTokenUnauthorizedResponseBody {
	body := &GenerateTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchesCreateProductMultiProduct builds a product service
// batches_create_product endpoint payload.
func NewBatchesCreateProductMultiProduct(body *BatchesCreateProductRequestBody) *product.MultiProduct {
	v := &product.MultiProduct{}
	v.Products = make([]*product.Product, len(body.Products))
	for i, val := range body.Products {
		v.Products[i] = unmarshalProductRequestBodyToProductProduct(val)
	}

	return v
}

// NewUpdateProductProduct builds a product service update_product endpoint
// payload.
func NewUpdateProductProduct(body *UpdateProductRequestBody) *product.Product {
	v := &product.Product{
		ProductSku:         *body.ProductSku,
		ProductName:        *body.ProductName,
		DeclaredEnName:     *body.DeclaredEnName,
		DeclaredCnName:     *body.DeclaredCnName,
		DeclaredValueInUsd: *body.DeclaredValueInUsd,
		ProductWeight:      *body.ProductWeight,
		ProductLength:      *body.ProductLength,
		ProductWidth:       *body.ProductWidth,
		ProductHeight:      *body.ProductHeight,
		HsCode:             *body.HsCode,
		ProductBarcode:     *body.ProductBarcode,
		Qty:                body.Qty,
		EnabledNssBarcode:  body.EnabledNssBarcode,
		DeclaredValueInEur: *body.DeclaredValueInEur,
		CustomerCode:       *body.CustomerCode,
		ID:                 body.ID,
		BarcodeService:     *body.BarcodeService,
	}
	if body.ProductImage != nil {
		v.ProductImage = make([]string, len(body.ProductImage))
		for i, val := range body.ProductImage {
			v.ProductImage[i] = val
		}
	}
	v.ProductAttributes = make([]string, len(body.ProductAttributes))
	for i, val := range body.ProductAttributes {
		v.ProductAttributes[i] = val
	}

	return v
}

// NewGenerateBarcodeBarCode builds a product service generate_barcode endpoint
// payload.
func NewGenerateBarcodeBarCode() *product.BarCode {
	v := &product.BarCode{}

	return v
}

// NewGenerateTokenReq builds a product service generate_token endpoint payload.
func NewGenerateTokenReq(body *GenerateTokenRequestBody) *product.GenerateTokenReq {
	v := &product.GenerateTokenReq{
		ID:       *body.ID,
		TenantID: *body.TenantID,
	}

	return v
}

// ValidateBatchesCreateProductRequestBody runs the validations defined on
// batches_create_product_request_body
func ValidateBatchesCreateProductRequestBody(body *BatchesCreateProductRequestBody) (err error) {
	if body.Products == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("products", "body"))
	}
	if len(body.Products) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.products", body.Products, len(body.Products), 1, true))
	}
	for _, e := range body.Products {
		if e != nil {
			if err2 := ValidateProductRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateProductRequestBody runs the validations defined on
// update_product_request_body
func ValidateUpdateProductRequestBody(body *UpdateProductRequestBody) (err error) {
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.DeclaredEnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_en_name", "body"))
	}
	if body.DeclaredCnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_cn_name", "body"))
	}
	if body.DeclaredValueInUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_usd", "body"))
	}
	if body.ProductWeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_weight", "body"))
	}
	if body.ProductLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_length", "body"))
	}
	if body.ProductWidth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_width", "body"))
	}
	if body.ProductHeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_height", "body"))
	}
	if body.HsCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hs_code", "body"))
	}
	if body.ProductBarcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_barcode", "body"))
	}
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.DeclaredValueInEur == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_eur", "body"))
	}
	if body.BarcodeService == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode_service", "body"))
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 50, false))
		}
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 50, false))
		}
	}
	if body.DeclaredEnName != nil {
		if utf8.RuneCountInString(*body.DeclaredEnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_en_name", *body.DeclaredEnName, utf8.RuneCountInString(*body.DeclaredEnName), 50, false))
		}
	}
	if body.DeclaredCnName != nil {
		if utf8.RuneCountInString(*body.DeclaredCnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_cn_name", *body.DeclaredCnName, utf8.RuneCountInString(*body.DeclaredCnName), 50, false))
		}
	}
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.HsCode != nil {
		if utf8.RuneCountInString(*body.HsCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hs_code", *body.HsCode, utf8.RuneCountInString(*body.HsCode), 50, false))
		}
	}
	if body.ProductBarcode != nil {
		if utf8.RuneCountInString(*body.ProductBarcode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_barcode", *body.ProductBarcode, utf8.RuneCountInString(*body.ProductBarcode), 50, false))
		}
	}
	if body.EnabledNssBarcode != nil {
		if !(*body.EnabledNssBarcode == false || *body.EnabledNssBarcode == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enabled_nss_barcode", *body.EnabledNssBarcode, []interface{}{false, true}))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.BarcodeService != nil {
		if !(*body.BarcodeService == false || *body.BarcodeService == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.barcode_service", *body.BarcodeService, []interface{}{false, true}))
		}
	}
	return
}

// ValidateGenerateTokenRequestBody runs the validations defined on
// generate_token_request_body
func ValidateGenerateTokenRequestBody(body *GenerateTokenRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TenantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tenant_id", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.TenantID != nil {
		if *body.TenantID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.tenant_id", *body.TenantID, 1, true))
		}
	}
	return
}

// ValidateProductRequestBody runs the validations defined on ProductRequestBody
func ValidateProductRequestBody(body *ProductRequestBody) (err error) {
	if body.ProductSku == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_sku", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_name", "body"))
	}
	if body.DeclaredEnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_en_name", "body"))
	}
	if body.DeclaredCnName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_cn_name", "body"))
	}
	if body.DeclaredValueInUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_usd", "body"))
	}
	if body.ProductWeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_weight", "body"))
	}
	if body.ProductLength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_length", "body"))
	}
	if body.ProductWidth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_width", "body"))
	}
	if body.ProductHeight == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_height", "body"))
	}
	if body.HsCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hs_code", "body"))
	}
	if body.ProductBarcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_barcode", "body"))
	}
	if body.ProductAttributes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product_attributes", "body"))
	}
	if body.CustomerCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_code", "body"))
	}
	if body.DeclaredValueInEur == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("declared_value_in_eur", "body"))
	}
	if body.BarcodeService == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("barcode_service", "body"))
	}
	if body.ProductSku != nil {
		if utf8.RuneCountInString(*body.ProductSku) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_sku", *body.ProductSku, utf8.RuneCountInString(*body.ProductSku), 50, false))
		}
	}
	if body.ProductName != nil {
		if utf8.RuneCountInString(*body.ProductName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_name", *body.ProductName, utf8.RuneCountInString(*body.ProductName), 50, false))
		}
	}
	if body.DeclaredEnName != nil {
		if utf8.RuneCountInString(*body.DeclaredEnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_en_name", *body.DeclaredEnName, utf8.RuneCountInString(*body.DeclaredEnName), 50, false))
		}
	}
	if body.DeclaredCnName != nil {
		if utf8.RuneCountInString(*body.DeclaredCnName) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.declared_cn_name", *body.DeclaredCnName, utf8.RuneCountInString(*body.DeclaredCnName), 50, false))
		}
	}
	if body.DeclaredValueInUsd != nil {
		if *body.DeclaredValueInUsd < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_usd", *body.DeclaredValueInUsd, 0, true))
		}
	}
	if body.HsCode != nil {
		if utf8.RuneCountInString(*body.HsCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.hs_code", *body.HsCode, utf8.RuneCountInString(*body.HsCode), 50, false))
		}
	}
	if body.ProductBarcode != nil {
		if utf8.RuneCountInString(*body.ProductBarcode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.product_barcode", *body.ProductBarcode, utf8.RuneCountInString(*body.ProductBarcode), 50, false))
		}
	}
	if body.EnabledNssBarcode != nil {
		if !(*body.EnabledNssBarcode == false || *body.EnabledNssBarcode == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enabled_nss_barcode", *body.EnabledNssBarcode, []interface{}{false, true}))
		}
	}
	if body.DeclaredValueInEur != nil {
		if *body.DeclaredValueInEur < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.declared_value_in_eur", *body.DeclaredValueInEur, 0, true))
		}
	}
	if body.CustomerCode != nil {
		if utf8.RuneCountInString(*body.CustomerCode) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.customer_code", *body.CustomerCode, utf8.RuneCountInString(*body.CustomerCode), 50, false))
		}
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.BarcodeService != nil {
		if !(*body.BarcodeService == false || *body.BarcodeService == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.barcode_service", *body.BarcodeService, []interface{}{false, true}))
		}
	}
	return
}
