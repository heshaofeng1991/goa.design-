// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product HTTP server encoders and decoders
//
// Command:
// $ goa gen goa/design -o ./

package server

import (
	"context"
	"errors"
	product "goa/gen/product"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeBatchesCreateProductResponse returns an encoder for responses returned
// by the product batches_create_product endpoint.
func EncodeBatchesCreateProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*product.MultiProductRsp)
		enc := encoder(ctx, w)
		body := NewBatchesCreateProductResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeBatchesCreateProductRequest returns a decoder for requests sent to the
// product batches_create_product endpoint.
func DecodeBatchesCreateProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BatchesCreateProductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateBatchesCreateProductRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewBatchesCreateProductMultiProduct(&body)

		return payload, nil
	}
}

// EncodeBatchesCreateProductError returns an encoder for errors returned by
// the batches_create_product product endpoint.
func EncodeBatchesCreateProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewBatchesCreateProductUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateProductResponse returns an encoder for responses returned by the
// product update_product endpoint.
func EncodeUpdateProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*product.UpdateResponse)
		enc := encoder(ctx, w)
		body := NewUpdateProductResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateProductRequest returns a decoder for requests sent to the
// product update_product endpoint.
func DecodeUpdateProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateProductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateProductRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateProductProduct(&body)

		return payload, nil
	}
}

// EncodeUpdateProductError returns an encoder for errors returned by the
// update_product product endpoint.
func EncodeUpdateProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateProductUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGenerateBarcodeResponse returns an encoder for responses returned by
// the product generate_barcode endpoint.
func EncodeGenerateBarcodeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*product.BarCodeRsp)
		enc := encoder(ctx, w)
		body := NewGenerateBarcodeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGenerateBarcodeRequest returns a decoder for requests sent to the
// product generate_barcode endpoint.
func DecodeGenerateBarcodeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload := NewGenerateBarcodeBarCode()

		return payload, nil
	}
}

// EncodeGenerateBarcodeError returns an encoder for errors returned by the
// generate_barcode product endpoint.
func EncodeGenerateBarcodeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGenerateBarcodeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGenerateTokenResponse returns an encoder for responses returned by the
// product generate_token endpoint.
func EncodeGenerateTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*product.GenerateTokenRsp)
		enc := encoder(ctx, w)
		body := NewGenerateTokenResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGenerateTokenRequest returns a decoder for requests sent to the
// product generate_token endpoint.
func DecodeGenerateTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GenerateTokenRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGenerateTokenRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGenerateTokenReq(&body)

		return payload, nil
	}
}

// EncodeGenerateTokenError returns an encoder for errors returned by the
// generate_token product endpoint.
func EncodeGenerateTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGenerateTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalProductRequestBodyToProductProduct builds a value of type
// *product.Product from a value of type *ProductRequestBody.
func unmarshalProductRequestBodyToProductProduct(v *ProductRequestBody) *product.Product {
	res := &product.Product{
		ProductSku:         *v.ProductSku,
		ProductName:        *v.ProductName,
		DeclaredEnName:     *v.DeclaredEnName,
		DeclaredCnName:     *v.DeclaredCnName,
		DeclaredValueInUsd: *v.DeclaredValueInUsd,
		ProductWeight:      *v.ProductWeight,
		ProductLength:      *v.ProductLength,
		ProductWidth:       *v.ProductWidth,
		ProductHeight:      *v.ProductHeight,
		HsCode:             *v.HsCode,
		ProductBarcode:     *v.ProductBarcode,
		Qty:                v.Qty,
		EnabledNssBarcode:  v.EnabledNssBarcode,
		DeclaredValueInEur: *v.DeclaredValueInEur,
		CustomerCode:       *v.CustomerCode,
		ID:                 v.ID,
		BarcodeService:     *v.BarcodeService,
	}
	if v.ProductImage != nil {
		res.ProductImage = make([]string, len(v.ProductImage))
		for i, val := range v.ProductImage {
			res.ProductImage[i] = val
		}
	}
	res.ProductAttributes = make([]string, len(v.ProductAttributes))
	for i, val := range v.ProductAttributes {
		res.ProductAttributes[i] = val
	}

	return res
}

// marshalProductMultiProductDataToMultiProductDataResponseBody builds a value
// of type *MultiProductDataResponseBody from a value of type
// *product.MultiProductData.
func marshalProductMultiProductDataToMultiProductDataResponseBody(v *product.MultiProductData) *MultiProductDataResponseBody {
	res := &MultiProductDataResponseBody{
		ProductID:   v.ProductID,
		Status:      v.Status,
		ErrorMsg:    v.ErrorMsg,
		Barcode:     v.Barcode,
		Sku:         v.Sku,
		ProductName: v.ProductName,
	}

	return res
}
