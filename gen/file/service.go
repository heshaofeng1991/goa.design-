// Code generated by goa v3.6.2, DO NOT EDIT.
//
// file service
//
// Command:
// $ goa gen goa/design -o ./

package file

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The file service performs operations on file
type Service interface {
	// UploadImage implements upload_image.
	UploadImage(context.Context, *UploadFile) (res *UploadURL, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "file"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"upload_image"}

// UploadFile is the payload type of the file service upload_image method.
type UploadFile struct {
	// file
	File []byte
	// file name
	FileName string
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// UploadURL is the result type of the file service upload_image method.
type UploadURL struct {
	// data
	Data *UploadURLData
	// code
	Code int
	// message
	Message string
}

// UploadUrlData describes the file url
type UploadURLData struct {
	// file URL
	URL string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
