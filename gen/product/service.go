// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product service
//
// Command:
// $ goa gen goa/design -o ./

package product

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The product service performs operations on product
type Service interface {
	// BatchesCreateProduct implements batches_create_product.
	BatchesCreateProduct(context.Context, *MultiProduct) (res *MultiProductRsp, err error)
	// UpdateProduct implements update_product.
	UpdateProduct(context.Context, *Product) (res *UpdateResponse, err error)
	// ExportProduct implements export_product.
	ExportProduct(context.Context, *ProductQueryPayload) (res *ExportProductResult, body io.ReadCloser, err error)
	// DownloadTemplates implements download_templates.
	DownloadTemplates(context.Context, *DownloadTemplatesReq) (res *ExportProductResult, body io.ReadCloser, err error)
	// UploadProduct implements upload_product.
	UploadProduct(context.Context, *UploadProductPayload) (res *UploadProductResponse, err error)
	// UploadProductUpdate implements upload_product_update.
	UploadProductUpdate(context.Context, *UploadProductPayload) (res *UploadProductResponse, err error)
	// GenerateBarcode implements generate_barcode.
	GenerateBarcode(context.Context, *AuthToken) (res *BarCodeRsp, err error)
	// ProductsQuery implements products_query.
	ProductsQuery(context.Context, *ProductsQueryReq) (res *ProductsQueryRsp, err error)
	// ProductDetail implements product_detail.
	ProductDetail(context.Context, *ProductDetailReq) (res *ProductDetailRsp, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "product"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"batches_create_product", "update_product", "export_product", "download_templates", "upload_product", "upload_product_update", "generate_barcode", "products_query", "product_detail"}

// AuthToken is the payload type of the product service generate_barcode method.
type AuthToken struct {
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// BarCodeData describes the response of generate barcode
type BarCodeData struct {
	// barcode
	Barcode string
}

// BarCodeRsp is the result type of the product service generate_barcode method.
type BarCodeRsp struct {
	// data
	Data *BarCodeData
	// code
	Code int
	// message
	Message string
}

// DownloadTemplatesReq is the payload type of the product service
// download_templates method.
type DownloadTemplatesReq struct {
	// template
	Template *string
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ExportProductResult is the result type of the product service export_product
// method.
type ExportProductResult struct {
	// Length is the downloaded content length in bytes.
	Length int64
}

// MetaData describes the MetaData
type MetaData struct {
	// current
	Current int
	// page_size
	PageSize int
	// total
	Total int
}

// MultiProduct is the payload type of the product service
// batches_create_product method.
type MultiProduct struct {
	// product info
	Products []*Product
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// MultiProductRsp describes the multi product info
type MultiProductData struct {
	// product id
	ProductID int64
	// status
	Status string
	// error msg
	ErrorMsg string
	// barcode
	Barcode string
	// sku
	Sku string
	// product_name
	ProductName string
}

// MultiProductRsp describes the multi product info
type MultiProductInfo struct {
	// product info
	Products []*MultiProductData
}

// MultiProductRsp is the result type of the product service
// batches_create_product method.
type MultiProductRsp struct {
	// data
	Data *MultiProductInfo
	// code
	Code int
	// message
	Message string
}

// Product is the payload type of the product service update_product method.
type Product struct {
	// images
	Images []string
	// sku
	Sku string
	// name
	Name string
	// declared en name
	DeclaredEnName string
	// declared cn name
	DeclaredCnName string
	// declared value in usd（$）
	DeclaredValueInUsd float64
	// weight（g）
	Weight float64
	// length（mm）
	Length float64
	// width（mm）
	Width float64
	// height（mm）
	Height float64
	// hs code
	HsCode string
	// barcode
	Barcode string
	// attributes
	Attributes []string
	// quality
	Qty *int
	// need use nss barcode
	EnabledNssBarcode *bool
	// declared value in eur（€）
	DeclaredValueInEur float64
	// customer code
	CustomerCode string
	// id
	ID *int32
	// barcode_service
	BarcodeService *bool
	// error message
	ErrorMessage *string
	// Material
	Material string
	// Purpose
	Purpose string
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ProductItem describes product item
type ProductDetailData struct {
	// id
	ID int32
	// status
	Status int
	// barcode
	Barcode string
	// sku
	Sku string
	// name
	Name string
	// attributes
	Attributes []string
	// images
	Images []string
	// weight
	Weight float64
	// hs_code
	HsCode string
	// declared_cn_name
	DeclaredCnName string
	// declare_en_name
	DeclaredEnName string
	// declared_value_in_usd
	DeclaredValueInUsd float64
	// declared_value_in_eur
	DeclaredValueInEur float64
	// barcode_service
	BarcodeService bool
}

// ProductDetailReq is the payload type of the product service product_detail
// method.
type ProductDetailReq struct {
	// id
	ID *int32
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ProductDetailRsp is the result type of the product service product_detail
// method.
type ProductDetailRsp struct {
	// data
	Data *ProductDetailData
	// code
	Code int
	// message
	Message string
}

// ProductItem describes product item
type ProductItem struct {
	// id
	ID int32
	// status
	Status int
	// barcode
	Barcode string
	// sku
	Sku string
	// name
	Name string
	// attributes
	Attributes []string
	// images
	Images []string
	// inventory
	Inventory int
	// weight
	Weight float64
	// inbound_ eight
	InboundWeight float64
	// length
	Length float64
	// width
	Width float64
	// height
	Height float64
}

// ProductQueryPayload is the payload type of the product service
// export_product method.
type ProductQueryPayload struct {
	// id
	ID []string
	// sku
	Sku *string
	// barcode
	Barcode *string
	// status
	Status *string
	// attributes
	Attributes []string
	// name
	Name *string
	// inventory
	Inventory *string
	// current
	Current *int
	// page_size
	PageSize *int
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ProductsQueryData describes the query products resp
type ProductsQueryData struct {
	// list
	List []*ProductItem
	// meta
	Meta *MetaData
}

// ProductsQueryReq is the payload type of the product service products_query
// method.
type ProductsQueryReq struct {
	// name
	Name *string
	// sku
	Sku *string
	// barcode
	Barcode *string
	// attributes
	Attributes []string
	// status
	Status *int
	// inventory
	Inventory *bool
	// current
	Current *int
	// page_size
	PageSize *int
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ProductsQueryRsp is the result type of the product service products_query
// method.
type ProductsQueryRsp struct {
	// data
	Data *ProductsQueryData
	// code
	Code int
	// message
	Message string
}

// UpdateResponse is the result type of the product service update_product
// method.
type UpdateResponse struct {
	// data
	Data *UpdateResponseData
	// code
	Code int
	// message
	Message string
}

// UpdateResponse describes update status
type UpdateResponseData struct {
	// status
	Status int32
}

// UploadProductPayload is the payload type of the product service
// upload_product method.
type UploadProductPayload struct {
	// file
	File []byte
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// UploadProductResponse is the result type of the product service
// upload_product method.
type UploadProductResponse struct {
	// data
	Data *UploadProductResponseData
	// code
	Code int
	// message
	Message string
}

// Upload Product Response
type UploadProductResponseData struct {
	// Total Count
	TotalCount *int
	// Success Count
	SuccessCount *int
	// Fail Count
	FailCount *int
	// Result File
	ResultFile string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
