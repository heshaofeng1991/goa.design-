// Code generated by goa v3.6.2, DO NOT EDIT.
//
// product service
//
// Command:
// $ goa gen goa/design -o ./

package product

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The product service performs operations on product
type Service interface {
	// BatchesCreateProduct implements batches_create_product.
	BatchesCreateProduct(context.Context, *MultiProduct) (res *MultiProductRsp, err error)
	// UpdateProduct implements update_product.
	UpdateProduct(context.Context, *Product) (res *UpdateResponse, err error)
	// GenerateBarcode implements generate_barcode.
	GenerateBarcode(context.Context, *BarCode) (res *BarCodeRsp, err error)
	// GenerateToken implements generate_token.
	GenerateToken(context.Context, *GenerateTokenReq) (res *GenerateTokenRsp, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "product"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"batches_create_product", "update_product", "generate_barcode", "generate_token"}

// BarCode is the payload type of the product service generate_barcode method.
type BarCode struct {
}

// BarCodeRsp is the result type of the product service generate_barcode method.
type BarCodeRsp struct {
	// barcode
	Barcode string
}

// GenerateTokenReq is the payload type of the product service generate_token
// method.
type GenerateTokenReq struct {
	// user_id
	ID int64
	// tenantID
	TenantID int64
}

// GenerateTokenRsp is the result type of the product service generate_token
// method.
type GenerateTokenRsp struct {
	// token
	Token string
}

// MultiProduct is the payload type of the product service
// batches_create_product method.
type MultiProduct struct {
	// product info
	Products []*Product
}

// MultiProductRsp describes the multi product info
type MultiProductData struct {
	// product id
	ProductID int64
	// status
	Status string
	// error msg
	ErrorMsg string
	// barcode
	Barcode string
	// sku
	Sku string
	// product_name
	ProductName string
}

// MultiProductRsp is the result type of the product service
// batches_create_product method.
type MultiProductRsp struct {
	// results
	Results []*MultiProductData
}

// Product is the payload type of the product service update_product method.
type Product struct {
	// product image
	ProductImage []string
	// product sku
	ProductSku string
	// product name
	ProductName string
	// declared en name
	DeclaredEnName string
	// declared cn name
	DeclaredCnName string
	// declared value in usd（$）
	DeclaredValueInUsd float64
	// product weight（g）
	ProductWeight float64
	// product length（mm）
	ProductLength float64
	// product width（mm）
	ProductWidth float64
	// product height（mm）
	ProductHeight float64
	// hs code
	HsCode string
	// product_barcode
	ProductBarcode string
	// product attributes
	ProductAttributes []string
	// quality
	Qty *int
	// need use nss barcode
	EnabledNssBarcode *bool
	// declared value in eur（€）
	DeclaredValueInEur float64
	// customer code
	CustomerCode string
	// id
	ID *int32
	// barcode_service
	BarcodeService bool
}

// UpdateResponse is the result type of the product service update_product
// method.
type UpdateResponse struct {
	// status
	Status int32
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
