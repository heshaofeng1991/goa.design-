// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen goa/design -o ./

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The user service performs operations on user
type Service interface {
	// UserSignup implements user_signup.
	UserSignup(context.Context, *Signup) (res *SignupRsp, err error)
	// UserLogin implements user_login.
	UserLogin(context.Context, *Login) (res *SignupRsp, err error)
	// UserModifyPassword implements user_modify_password.
	UserModifyPassword(context.Context, *ModifyPassword) (res *UserRsp, err error)
	// UserForgetPassword implements user_forget_password.
	UserForgetPassword(context.Context, *ForgetPassword) (res *UserRsp, err error)
	// UserValidate implements user_validate.
	UserValidate(context.Context, *ValidateEmail) (res *UserRsp, err error)
	// UserLogout implements user_logout.
	UserLogout(context.Context, *Logout) (res *UserRsp, err error)
	// GetUserInfo implements get_user_info.
	GetUserInfo(context.Context, *AuthToken) (res *UserInfoRsp, err error)
	// UpdateUserInfo implements update_user_info.
	UpdateUserInfo(context.Context, *UserInfo) (res *UserRsp, err error)
	// Permissions implements permissions.
	Permissions(context.Context, *AuthToken) (res *PermissionsRsp, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"user_signup", "user_login", "user_modify_password", "user_forget_password", "user_validate", "user_logout", "get_user_info", "update_user_info", "permissions"}

// AuthToken is the payload type of the user service get_user_info method.
type AuthToken struct {
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ForgetPassword is the payload type of the user service user_forget_password
// method.
type ForgetPassword struct {
	// user email
	Email string
	// user password
	Password string
	// email code
	Code string
	// action
	Action *string
}

// Login is the payload type of the user service user_login method.
type Login struct {
	// user login email
	Email string
	// user login password
	Password string
	// store code
	StoreCode *string
}

// Logout is the payload type of the user service user_logout method.
type Logout struct {
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// ModifyPassword is the payload type of the user service user_modify_password
// method.
type ModifyPassword struct {
	// user email
	Email string
	// user password
	Password string
	// old password
	OldPassword string
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

// OrderStatusData describes the details
type OrderStatusData struct {
	// new
	Status int
	// ready
	Action []string
}

// OrderStatusData describes the details
type PermissionsData struct {
	// order_status
	OrderStatus []*OrderStatusData
}

// PermissionsRsp is the result type of the user service permissions method.
type PermissionsRsp struct {
	// data
	Data *PermissionsData
	// code
	Code int
	// message
	Message string
}

// Signup is the payload type of the user service user_signup method.
type Signup struct {
	// user register email
	Email string
	// user register password
	Password string
	// user register name
	UserName *string
	// user register phone
	Phone *string
	// source form platform
	Source *string
	// inviter id
	InviterID *int32
	// store code
	StoreCode *string
	// website
	Website *string
	// platform
	Platform *string
	// concerns
	Concerns *string
}

type SignupData struct {
	// status
	Status int
	// token
	Token string
}

// SignupRsp is the result type of the user service user_signup method.
type SignupRsp struct {
	// data
	Data *SignupData
	// code
	Code int
	// message
	Message string
}

type UserData struct {
	// status
	Status int
}

// UserInfo is the payload type of the user service update_user_info method.
type UserInfo struct {
	// user name
	UserName string
	// Authorization
	Authorization *string
	// JWT used for authentication
	Token *string
}

type UserInfoData struct {
	// id
	ID *int32
	// user name
	UserName *string
	// user email
	UserEmail *string
	// user avatar
	Avatar *string
	// user phone
	Phone *string
}

// UserInfoRsp is the result type of the user service get_user_info method.
type UserInfoRsp struct {
	// data
	Data *UserInfoData
	// code
	Code int
	// message
	Message string
}

// UserRsp is the result type of the user service user_modify_password method.
type UserRsp struct {
	// data
	Data *UserData
	// code
	Code int
	// message
	Message string
}

// ValidateEmail is the payload type of the user service user_validate method.
type ValidateEmail struct {
	// user email
	Email string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "Unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
