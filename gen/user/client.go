// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user client
//
// Command:
// $ goa gen goa/design -o ./

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "user" service client.
type Client struct {
	UserSignupEndpoint         goa.Endpoint
	UserLoginEndpoint          goa.Endpoint
	UserModifyPasswordEndpoint goa.Endpoint
	UserForgetPasswordEndpoint goa.Endpoint
	UserValidateEndpoint       goa.Endpoint
	UserLogoutEndpoint         goa.Endpoint
	GetUserInfoEndpoint        goa.Endpoint
	UpdateUserInfoEndpoint     goa.Endpoint
	PermissionsEndpoint        goa.Endpoint
}

// NewClient initializes a "user" service client given the endpoints.
func NewClient(userSignup, userLogin, userModifyPassword, userForgetPassword, userValidate, userLogout, getUserInfo, updateUserInfo, permissions goa.Endpoint) *Client {
	return &Client{
		UserSignupEndpoint:         userSignup,
		UserLoginEndpoint:          userLogin,
		UserModifyPasswordEndpoint: userModifyPassword,
		UserForgetPasswordEndpoint: userForgetPassword,
		UserValidateEndpoint:       userValidate,
		UserLogoutEndpoint:         userLogout,
		GetUserInfoEndpoint:        getUserInfo,
		UpdateUserInfoEndpoint:     updateUserInfo,
		PermissionsEndpoint:        permissions,
	}
}

// UserSignup calls the "user_signup" endpoint of the "user" service.
func (c *Client) UserSignup(ctx context.Context, p *Signup) (res *SignupRsp, err error) {
	var ires interface{}
	ires, err = c.UserSignupEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SignupRsp), nil
}

// UserLogin calls the "user_login" endpoint of the "user" service.
func (c *Client) UserLogin(ctx context.Context, p *Login) (res *SignupRsp, err error) {
	var ires interface{}
	ires, err = c.UserLoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SignupRsp), nil
}

// UserModifyPassword calls the "user_modify_password" endpoint of the "user"
// service.
func (c *Client) UserModifyPassword(ctx context.Context, p *ModifyPassword) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UserModifyPasswordEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}

// UserForgetPassword calls the "user_forget_password" endpoint of the "user"
// service.
func (c *Client) UserForgetPassword(ctx context.Context, p *ForgetPassword) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UserForgetPasswordEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}

// UserValidate calls the "user_validate" endpoint of the "user" service.
func (c *Client) UserValidate(ctx context.Context, p *ValidateEmail) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UserValidateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}

// UserLogout calls the "user_logout" endpoint of the "user" service.
func (c *Client) UserLogout(ctx context.Context, p *Logout) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UserLogoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}

// GetUserInfo calls the "get_user_info" endpoint of the "user" service.
func (c *Client) GetUserInfo(ctx context.Context, p *AuthToken) (res *UserInfoRsp, err error) {
	var ires interface{}
	ires, err = c.GetUserInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserInfoRsp), nil
}

// UpdateUserInfo calls the "update_user_info" endpoint of the "user" service.
func (c *Client) UpdateUserInfo(ctx context.Context, p *UserInfo) (res *UserRsp, err error) {
	var ires interface{}
	ires, err = c.UpdateUserInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserRsp), nil
}

// Permissions calls the "permissions" endpoint of the "user" service.
func (c *Client) Permissions(ctx context.Context, p *AuthToken) (res *PermissionsRsp, err error) {
	var ires interface{}
	ires, err = c.PermissionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PermissionsRsp), nil
}
