// Code generated by goa v3.6.2, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen goa/design -o ./

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	UserSignup         goa.Endpoint
	UserLogin          goa.Endpoint
	UserModifyPassword goa.Endpoint
	UserForgetPassword goa.Endpoint
	UserValidate       goa.Endpoint
	UserLogout         goa.Endpoint
	GetUserInfo        goa.Endpoint
	UpdateUserInfo     goa.Endpoint
	Permissions        goa.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		UserSignup:         NewUserSignupEndpoint(s),
		UserLogin:          NewUserLoginEndpoint(s),
		UserModifyPassword: NewUserModifyPasswordEndpoint(s, a.JWTAuth),
		UserForgetPassword: NewUserForgetPasswordEndpoint(s),
		UserValidate:       NewUserValidateEndpoint(s),
		UserLogout:         NewUserLogoutEndpoint(s, a.JWTAuth),
		GetUserInfo:        NewGetUserInfoEndpoint(s, a.JWTAuth),
		UpdateUserInfo:     NewUpdateUserInfoEndpoint(s, a.JWTAuth),
		Permissions:        NewPermissionsEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UserSignup = m(e.UserSignup)
	e.UserLogin = m(e.UserLogin)
	e.UserModifyPassword = m(e.UserModifyPassword)
	e.UserForgetPassword = m(e.UserForgetPassword)
	e.UserValidate = m(e.UserValidate)
	e.UserLogout = m(e.UserLogout)
	e.GetUserInfo = m(e.GetUserInfo)
	e.UpdateUserInfo = m(e.UpdateUserInfo)
	e.Permissions = m(e.Permissions)
}

// NewUserSignupEndpoint returns an endpoint function that calls the method
// "user_signup" of service "user".
func NewUserSignupEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Signup)
		return s.UserSignup(ctx, p)
	}
}

// NewUserLoginEndpoint returns an endpoint function that calls the method
// "user_login" of service "user".
func NewUserLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Login)
		return s.UserLogin(ctx, p)
	}
}

// NewUserModifyPasswordEndpoint returns an endpoint function that calls the
// method "user_modify_password" of service "user".
func NewUserModifyPasswordEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ModifyPassword)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UserModifyPassword(ctx, p)
	}
}

// NewUserForgetPasswordEndpoint returns an endpoint function that calls the
// method "user_forget_password" of service "user".
func NewUserForgetPasswordEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ForgetPassword)
		return s.UserForgetPassword(ctx, p)
	}
}

// NewUserValidateEndpoint returns an endpoint function that calls the method
// "user_validate" of service "user".
func NewUserValidateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ValidateEmail)
		return s.UserValidate(ctx, p)
	}
}

// NewUserLogoutEndpoint returns an endpoint function that calls the method
// "user_logout" of service "user".
func NewUserLogoutEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Logout)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UserLogout(ctx, p)
	}
}

// NewGetUserInfoEndpoint returns an endpoint function that calls the method
// "get_user_info" of service "user".
func NewGetUserInfoEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AuthToken)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetUserInfo(ctx, p)
	}
}

// NewUpdateUserInfoEndpoint returns an endpoint function that calls the method
// "update_user_info" of service "user".
func NewUpdateUserInfoEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UserInfo)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateUserInfo(ctx, p)
	}
}

// NewPermissionsEndpoint returns an endpoint function that calls the method
// "permissions" of service "user".
func NewPermissionsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AuthToken)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Permissions(ctx, p)
	}
}
