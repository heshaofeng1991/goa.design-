// Code generated by goa v3.6.2, DO NOT EDIT.
//
// integrations endpoints
//
// Command:
// $ goa gen goa/design -o ./

package integrations

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "integrations" service endpoints.
type Endpoints struct {
	List      goa.Endpoint
	Authorize goa.Endpoint
}

// NewEndpoints wraps the methods of the "integrations" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		List:      NewListEndpoint(s, a.JWTAuth),
		Authorize: NewAuthorizeEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "integrations" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Authorize = m(e.Authorize)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "integrations".
func NewListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AuthToken)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.List(ctx, p)
	}
}

// NewAuthorizeEndpoint returns an endpoint function that calls the method
// "authorize" of service "integrations".
func NewAuthorizeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Authorize2)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Authorize(ctx, p)
	}
}
