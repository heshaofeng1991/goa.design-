// Code generated by goa v3.6.2, DO NOT EDIT.
//
// platform_product client
//
// Command:
// $ goa gen goa/design -o ./

package platformproduct

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "platform_product" service client.
type Client struct {
	PlatformProductEndpoint goa.Endpoint
	ConvertEndpoint         goa.Endpoint
	MappingsEndpoint        goa.Endpoint
}

// NewClient initializes a "platform_product" service client given the
// endpoints.
func NewClient(platformProduct, convert, mappings goa.Endpoint) *Client {
	return &Client{
		PlatformProductEndpoint: platformProduct,
		ConvertEndpoint:         convert,
		MappingsEndpoint:        mappings,
	}
}

// PlatformProduct calls the "platform_product" endpoint of the
// "platform_product" service.
func (c *Client) PlatformProduct(ctx context.Context, p *GetListing) (res *MultiPlatformProductRsp, err error) {
	var ires interface{}
	ires, err = c.PlatformProductEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MultiPlatformProductRsp), nil
}

// Convert calls the "convert" endpoint of the "platform_product" service.
func (c *Client) Convert(ctx context.Context, p *ConvertPlatformProductsReq) (res *ConvertPlatformProductsRes, err error) {
	var ires interface{}
	ires, err = c.ConvertEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ConvertPlatformProductsRes), nil
}

// Mappings calls the "mappings" endpoint of the "platform_product" service.
func (c *Client) Mappings(ctx context.Context, p *UpdateMappingsReq) (res *UpdateMappingsRes, err error) {
	var ires interface{}
	ires, err = c.MappingsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateMappingsRes), nil
}
