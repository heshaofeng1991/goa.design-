// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order client
//
// Command:
// $ goa gen goa/design -o ./

package order

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "order" service client.
type Client struct {
	CreateInboundOrderEndpoint  goa.Endpoint
	UpdateInboundOrderEndpoint  goa.Endpoint
	CreateOutboundOrderEndpoint goa.Endpoint
	UpdateOutboundOrderEndpoint goa.Endpoint
	CreatePickupOrderEndpoint   goa.Endpoint
	GetInboundOrderEndpoint     goa.Endpoint
	GetOutboundOrderEndpoint    goa.Endpoint
}

// NewClient initializes a "order" service client given the endpoints.
func NewClient(createInboundOrder, updateInboundOrder, createOutboundOrder, updateOutboundOrder, createPickupOrder, getInboundOrder, getOutboundOrder goa.Endpoint) *Client {
	return &Client{
		CreateInboundOrderEndpoint:  createInboundOrder,
		UpdateInboundOrderEndpoint:  updateInboundOrder,
		CreateOutboundOrderEndpoint: createOutboundOrder,
		UpdateOutboundOrderEndpoint: updateOutboundOrder,
		CreatePickupOrderEndpoint:   createPickupOrder,
		GetInboundOrderEndpoint:     getInboundOrder,
		GetOutboundOrderEndpoint:    getOutboundOrder,
	}
}

// CreateInboundOrder calls the "create_inbound_order" endpoint of the "order"
// service.
func (c *Client) CreateInboundOrder(ctx context.Context, p *InboundOrder) (res *InboundOrderRsp, err error) {
	var ires interface{}
	ires, err = c.CreateInboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*InboundOrderRsp), nil
}

// UpdateInboundOrder calls the "update_inbound_order" endpoint of the "order"
// service.
func (c *Client) UpdateInboundOrder(ctx context.Context, p *InboundOrder) (res *UpdateResponse, err error) {
	var ires interface{}
	ires, err = c.UpdateInboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateResponse), nil
}

// CreateOutboundOrder calls the "create_outbound_order" endpoint of the
// "order" service.
func (c *Client) CreateOutboundOrder(ctx context.Context, p *OutboundOrder) (res *OutboundOrderRsp, err error) {
	var ires interface{}
	ires, err = c.CreateOutboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OutboundOrderRsp), nil
}

// UpdateOutboundOrder calls the "update_outbound_order" endpoint of the
// "order" service.
func (c *Client) UpdateOutboundOrder(ctx context.Context, p *OutboundOrder) (res *UpdateResponse, err error) {
	var ires interface{}
	ires, err = c.UpdateOutboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateResponse), nil
}

// CreatePickupOrder calls the "create_pickup_order" endpoint of the "order"
// service.
func (c *Client) CreatePickupOrder(ctx context.Context, p *PickupOrder) (res *PickupOrderRsp, err error) {
	var ires interface{}
	ires, err = c.CreatePickupOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PickupOrderRsp), nil
}

// GetInboundOrder calls the "get_inbound_order" endpoint of the "order"
// service.
func (c *Client) GetInboundOrder(ctx context.Context, p *GetOrder) (res []*InboundOrderResponse, err error) {
	var ires interface{}
	ires, err = c.GetInboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*InboundOrderResponse), nil
}

// GetOutboundOrder calls the "get_outbound_order" endpoint of the "order"
// service.
func (c *Client) GetOutboundOrder(ctx context.Context, p *GetOrder) (res []*OrderRsp, err error) {
	var ires interface{}
	ires, err = c.GetOutboundOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*OrderRsp), nil
}
