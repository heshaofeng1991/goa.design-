// Code generated by goa v3.6.2, DO NOT EDIT.
//
// order endpoints
//
// Command:
// $ goa gen goa/design -o ./

package order

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "order" service endpoints.
type Endpoints struct {
	CreateInboundOrder          goa.Endpoint
	UpdateInboundOrder          goa.Endpoint
	CreatePickupOrder           goa.Endpoint
	BatchQueryInboundOrder      goa.Endpoint
	GetInboundOrder             goa.Endpoint
	CreateOutboundOrder         goa.Endpoint
	UpdateOutboundOrder         goa.Endpoint
	BatchUpdateOutboundOrder    goa.Endpoint
	CreateOutboundOrderItem     goa.Endpoint
	UpdateOutboundOrderItem     goa.Endpoint
	DeleteOutboundOrderItem     goa.Endpoint
	BatchQueryOutboundOrder     goa.Endpoint
	GetOutboundOrder            goa.Endpoint
	GetOutboundOrderListFilters goa.Endpoint
	GetOutboundOrderCount       goa.Endpoint
	GetOutboundOrderList        goa.Endpoint
	UploadOutboundOrders        goa.Endpoint
	ExportOutboundOrders        goa.Endpoint
}

// ExportOutboundOrdersResponseData holds both the result and the HTTP response
// body reader of the "export_outbound_orders" method.
type ExportOutboundOrdersResponseData struct {
	// Result is the method result.
	Result *ExportOrderResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "order" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateInboundOrder:          NewCreateInboundOrderEndpoint(s, a.JWTAuth),
		UpdateInboundOrder:          NewUpdateInboundOrderEndpoint(s, a.JWTAuth),
		CreatePickupOrder:           NewCreatePickupOrderEndpoint(s, a.JWTAuth),
		BatchQueryInboundOrder:      NewBatchQueryInboundOrderEndpoint(s, a.JWTAuth),
		GetInboundOrder:             NewGetInboundOrderEndpoint(s, a.JWTAuth),
		CreateOutboundOrder:         NewCreateOutboundOrderEndpoint(s, a.JWTAuth),
		UpdateOutboundOrder:         NewUpdateOutboundOrderEndpoint(s, a.JWTAuth),
		BatchUpdateOutboundOrder:    NewBatchUpdateOutboundOrderEndpoint(s, a.JWTAuth),
		CreateOutboundOrderItem:     NewCreateOutboundOrderItemEndpoint(s, a.JWTAuth),
		UpdateOutboundOrderItem:     NewUpdateOutboundOrderItemEndpoint(s, a.JWTAuth),
		DeleteOutboundOrderItem:     NewDeleteOutboundOrderItemEndpoint(s, a.JWTAuth),
		BatchQueryOutboundOrder:     NewBatchQueryOutboundOrderEndpoint(s, a.JWTAuth),
		GetOutboundOrder:            NewGetOutboundOrderEndpoint(s, a.JWTAuth),
		GetOutboundOrderListFilters: NewGetOutboundOrderListFiltersEndpoint(s, a.JWTAuth),
		GetOutboundOrderCount:       NewGetOutboundOrderCountEndpoint(s, a.JWTAuth),
		GetOutboundOrderList:        NewGetOutboundOrderListEndpoint(s, a.JWTAuth),
		UploadOutboundOrders:        NewUploadOutboundOrdersEndpoint(s, a.JWTAuth),
		ExportOutboundOrders:        NewExportOutboundOrdersEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "order" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateInboundOrder = m(e.CreateInboundOrder)
	e.UpdateInboundOrder = m(e.UpdateInboundOrder)
	e.CreatePickupOrder = m(e.CreatePickupOrder)
	e.BatchQueryInboundOrder = m(e.BatchQueryInboundOrder)
	e.GetInboundOrder = m(e.GetInboundOrder)
	e.CreateOutboundOrder = m(e.CreateOutboundOrder)
	e.UpdateOutboundOrder = m(e.UpdateOutboundOrder)
	e.BatchUpdateOutboundOrder = m(e.BatchUpdateOutboundOrder)
	e.CreateOutboundOrderItem = m(e.CreateOutboundOrderItem)
	e.UpdateOutboundOrderItem = m(e.UpdateOutboundOrderItem)
	e.DeleteOutboundOrderItem = m(e.DeleteOutboundOrderItem)
	e.BatchQueryOutboundOrder = m(e.BatchQueryOutboundOrder)
	e.GetOutboundOrder = m(e.GetOutboundOrder)
	e.GetOutboundOrderListFilters = m(e.GetOutboundOrderListFilters)
	e.GetOutboundOrderCount = m(e.GetOutboundOrderCount)
	e.GetOutboundOrderList = m(e.GetOutboundOrderList)
	e.UploadOutboundOrders = m(e.UploadOutboundOrders)
	e.ExportOutboundOrders = m(e.ExportOutboundOrders)
}

// NewCreateInboundOrderEndpoint returns an endpoint function that calls the
// method "create_inbound_order" of service "order".
func NewCreateInboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*InboundOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateInboundOrder(ctx, p)
	}
}

// NewUpdateInboundOrderEndpoint returns an endpoint function that calls the
// method "update_inbound_order" of service "order".
func NewUpdateInboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*InboundOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateInboundOrder(ctx, p)
	}
}

// NewCreatePickupOrderEndpoint returns an endpoint function that calls the
// method "create_pickup_order" of service "order".
func NewCreatePickupOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PickupOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreatePickupOrder(ctx, p)
	}
}

// NewBatchQueryInboundOrderEndpoint returns an endpoint function that calls
// the method "batch_query_inbound_order" of service "order".
func NewBatchQueryInboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.BatchQueryInboundOrder(ctx, p)
	}
}

// NewGetInboundOrderEndpoint returns an endpoint function that calls the
// method "get_inbound_order" of service "order".
func NewGetInboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*QueryOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetInboundOrder(ctx, p)
	}
}

// NewCreateOutboundOrderEndpoint returns an endpoint function that calls the
// method "create_outbound_order" of service "order".
func NewCreateOutboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OutboundOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateOutboundOrder(ctx, p)
	}
}

// NewUpdateOutboundOrderEndpoint returns an endpoint function that calls the
// method "update_outbound_order" of service "order".
func NewUpdateOutboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OutboundOrderUpdateRequest)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateOutboundOrder(ctx, p)
	}
}

// NewBatchUpdateOutboundOrderEndpoint returns an endpoint function that calls
// the method "batch_update_outbound_order" of service "order".
func NewBatchUpdateOutboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BatchUpdateOrderRequest)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.BatchUpdateOutboundOrder(ctx, p)
	}
}

// NewCreateOutboundOrderItemEndpoint returns an endpoint function that calls
// the method "create_outbound_order_item" of service "order".
func NewCreateOutboundOrderItemEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OutboundOrderItemCreateRequest)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateOutboundOrderItem(ctx, p)
	}
}

// NewUpdateOutboundOrderItemEndpoint returns an endpoint function that calls
// the method "update_outbound_order_item" of service "order".
func NewUpdateOutboundOrderItemEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OutboundOrderItemUpdateRequest)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateOutboundOrderItem(ctx, p)
	}
}

// NewDeleteOutboundOrderItemEndpoint returns an endpoint function that calls
// the method "delete_outbound_order_item" of service "order".
func NewDeleteOutboundOrderItemEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteOutboundItemRequest)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.DeleteOutboundOrderItem(ctx, p)
	}
}

// NewBatchQueryOutboundOrderEndpoint returns an endpoint function that calls
// the method "batch_query_outbound_order" of service "order".
func NewBatchQueryOutboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.BatchQueryOutboundOrder(ctx, p)
	}
}

// NewGetOutboundOrderEndpoint returns an endpoint function that calls the
// method "get_outbound_order" of service "order".
func NewGetOutboundOrderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*QueryOutOrder)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOutboundOrder(ctx, p)
	}
}

// NewGetOutboundOrderListFiltersEndpoint returns an endpoint function that
// calls the method "get_outbound_order_list_filters" of service "order".
func NewGetOutboundOrderListFiltersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AuthToken)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOutboundOrderListFilters(ctx, p)
	}
}

// NewGetOutboundOrderCountEndpoint returns an endpoint function that calls the
// method "get_outbound_order_count" of service "order".
func NewGetOutboundOrderCountEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderQueryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOutboundOrderCount(ctx, p)
	}
}

// NewGetOutboundOrderListEndpoint returns an endpoint function that calls the
// method "get_outbound_order_list" of service "order".
func NewGetOutboundOrderListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderQueryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOutboundOrderList(ctx, p)
	}
}

// NewUploadOutboundOrdersEndpoint returns an endpoint function that calls the
// method "upload_outbound_orders" of service "order".
func NewUploadOutboundOrdersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UploadOrdersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UploadOutboundOrders(ctx, p)
	}
}

// NewExportOutboundOrdersEndpoint returns an endpoint function that calls the
// method "export_outbound_orders" of service "order".
func NewExportOutboundOrdersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrderQueryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, body, err := s.ExportOutboundOrders(ctx, p)
		if err != nil {
			return nil, err
		}
		return &ExportOutboundOrdersResponseData{Result: res, Body: body}, nil
	}
}
